
define([
  "dojo/_base/declare"
, "dojo/dom-style"

,  "dijit/_WidgetBase"

, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/Dummy"

, "hotplate/bd/WorkspacesContacts/WorkspacesContactsInfo"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsEmails"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsAddresses"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsPhoneNumbers"

], function(
  declare
, domStyle

, _WidgetBase

, widgets
, Dummy

, WorkspacesContactsInfo
, WorkspacesContactsEmails
, WorkspacesContactsAddresses
, WorkspacesContactsPhoneNumbers

){

  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div class="workspaces-contacts">\n' +
      '  <div data-dojo-attach-point="workspacesContactsInfoNode"></div>\n'+
      '  <div data-dojo-type="hotplate/hotDojoWidgets/Dummy"></div>\n'+
      '  <div data-dojo-attach-point="moreNode" class="more">\n'+
      '    <div class="box">\n' +
      '      <p class="boxTitle">Contactable by...</p>\n' +

      '      <div class="email-side">\n' +
      '        <p class="emails">Email addresses</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsEmailsNode"></div>\n'+
      '      </div>\n' +

      '      <div class="phone-numbers-side">\n' +
      '        <p class="phone-numbers">Phone numbers</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsPhoneNumbersNode"></div>\n'+
      '      </div>\n' +

      '      <div class="address-side">\n' +
      '        <p class="addresses">Postal addresses</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsAddressesNode"></div>\n'+
      '      </div>\n' +

      '    </div>\n' +

      '  </div>\n' +
      '</div>\n' +
      '',


    postCreate: function(){
      this.inherited(arguments);

      // Logic to add stuff to the form will go here
      var self = this;

      // Create the workspaceContacts widget, passing through all of the
      // grid's info
      self.workspacesContactsInfoWidget = new WorkspacesContactsInfo( { 
        storeParameters: self.storeParameters,
        storeName: self.storeName,
        recordId: self.recordId,
      }, self.workspacesContactsInfoNode );
      self.workspacesContactsInfoWidget.startup();

      // On successfulsubmit, any sub-widgets will finally be able
      // to exist as recordId will be set
      self.workspacesContactsInfoWidget.on( 'gotrecordid', function( e ){

        // Create the sub-widgets and start it up
        self.workspacesContactsEmailsWidget = new WorkspacesContactsEmails({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
        }, self.workspacesContactsEmailsNode );

        self.workspacesContactsAddressesWidget = new WorkspacesContactsAddresses({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
        }, self.workspacesContactsAddressesNode );

        self.workspacesContactsPhoneNumbersWidget = new WorkspacesContactsPhoneNumbers({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
        }, self.workspacesContactsPhoneNumbersNode );

        // Make the extra part of the form visible and start things up
        domStyle.set( self.moreNode, { display: 'block' } );
        self.workspacesContactsEmailsWidget.startup();
        self.workspacesContactsAddressesWidget.startup();
        self.workspacesContactsPhoneNumbersWidget.startup();
        self.resize();
      });

    },

    startup: function(){

      var self = this;

      // If the father widget already has a recordId, then
      // emit an artificial gotrecordid event so that
      // the dependant widget is placed there immediately
      if( self.workspacesContactsInfoWidget.recordId ){
        self.workspacesContactsInfoWidget.emit( 'gotrecordid', { bubble: false } );
      }
     
      this.inherited(arguments);
      
    },

  });


});

