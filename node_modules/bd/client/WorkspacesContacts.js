
define([
  "dojo/_base/declare"
, "dojo/dom-style"

,  "dijit/_WidgetBase"

, "hotplate/hotDojoWidgets/widgets"

, "hotplate/bd/WorkspacesContacts/WorkspacesContactsInfo"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsEmails"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsAddresses"

], function(
  declare
, domStyle

, _WidgetBase

, widgets

, WorkspacesContactsInfo
, WorkspacesContactsEmails
, WorkspacesContactsAddresses

){

  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div class="workspaces-contacts">\n' +
      '  <div data-dojo-attach-point="workspacesContactsInfoNode"></div>\n'+
      '  <div data-dojo-attach-point="dummyNode"></div>\n'+
      '  <div data-dojo-attach-point="moreNode" class="more">\n'+
      '    <div class="box">\n' +
      '      <p class="boxTitle">Contactable by...</p>\n' +

      '      <div class="email-side">\n' +
      '        <p class="email">Email</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsEmailsNode"></div>\n'+
      '      </div>\n' +

      '      <div class="address-side">\n' +
      '        <p class="address">Postal address</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsAddressesNode"></div>\n'+
      '      </div>\n' +
      '    </div>\n' +

      '  </div>\n' +
      '</div>\n' +
      '',


    postCreate: function(){
      this.inherited(arguments);

      // Logic to add stuff to the form will go here
      var self = this;

      // Create the workspaceContacts widget, passing through all of the
      // grid's info
      self.workspacesContactsInfoWidget = new WorkspacesContactsInfo( { 
        storeParameters: self.storeParameters,
        storeName: self.storeName,
        recordId: self.recordId,
      }, self.workspacesContactsInfoNode );
      self.workspacesContactsInfoWidget.startup();

      // Dummy widget so that it's not the only child. This is important as this widget starts
      // with one only child, but then more are added. HOWEVER, it will be resized the first time
      // as a widget with an only child, and disasters will happen
      self.dummyWidget = new _WidgetBase( { resize: function(){} } , self.dummyNode );
      self.dummyWidget.startup();

    
      // On successfulsubmit, any sub-widgets will finally be able
      // to exist as recordId will be set
      self.workspacesContactsInfoWidget.on( 'gotrecordid', function( e ){

        // Create the sub-widgets and start it up
        self.workspacesContactsEmailsWidget = new WorkspacesContactsEmails({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
          'class': 'workspaces-contacts-emails small-editable-list-autoheight',
        }, self.workspacesContactsEmailsNode );

        self.workspacesContactsAddressesWidget = new WorkspacesContactsAddresses({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
          'class': 'workspaces-contacts-addresses small-editable-list-autoheight',
        }, self.workspacesContactsAddressesNode );


        // Make the extra part of the form visible and start things up
        domStyle.set( self.moreNode, { display: 'block' } );
        self.workspacesContactsEmailsWidget.startup();
        self.workspacesContactsAddressesWidget.startup();
      });

    },

    startup: function(){

      var self = this;

      // If the father widget already has a recordId, then
      // emit an artificial gotrecordid event so that
      // the dependant widget is placed there immediately
      if( self.workspacesContactsInfoWidget.recordId ){
        self.workspacesContactsInfoWidget.emit( 'gotrecordid', { bubble: false } );
      }
     
      this.inherited(arguments);
      this._singleChild = null;
      
    },

    resize: function(){
      this._singleChild = null;
      console.log("DOES IT HAVE A SINGLE CHILD?", this._singleChild );
      D = this.domNode;
      this.inherited(arguments);
    }

  });


});

