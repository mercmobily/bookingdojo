define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"

, "put-selector/put"

, "hotplate/hotDojoWidgets/widgets"
, "hotplate/bd/WorkspacesMessages/WorkspacesMessages"
, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare

, ValidationTextBox

, put

, widgets
, WorkspacesMessages
, commonMixins
, EditingWidget
, EditableList
, BusyButton
, stores
, globals

){
  return declare( [ EditableList ], {

    // Sets initialFilter to the right contactId
    postMixInProperties: function(){
      this.inherited(arguments);
      this.initialFilter = { contactId: this.contactObject.id };

      this.addingConstructorParameter  = { contactObject: this.contactObject };
      this.editingConstructorParameter = { contactObject: this.contactObject };

    },

    ownClass: 'workspaces-contacts-messages',

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){

        console.log( object );
        var row = put('div.row' );

        var children = object._children;
        if( ! children || ! children.fromContactId ){
        	put( row, 'span.broken', 'Broken!' );
        	console.log("BROKEN!");
        	console.log( object );
        	return row;
        }
        var message = children.messageId;

        put( row, 'span.from', children.fromContactId.firstName );
        put( row, 'span.subject', children.messageId.subject ? children.messageId.subject : '' );

        if( children.messageId.bodyHtml ){
          put( row, 'span.bodyHtml', children.messageId.bodyHtml );
        } else {
          put( row, 'span.bodyHtml', children.messageId.bodyText );
        }

        return row;

      },
      dndParams: { copyOnly: true, selfAccept: false },
    }),

    /*
    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="newEmailButtonWidget" class="new-email" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New email" /></div>\n' +
        '  <div data-dojo-attach-point="newSmsButtonWidget" class="new-sms" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New SMS" /></div>\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',
    */

    storeName: 'workspacesMessages',
    storeParameters: { workspaceId: globals.workspaceId },
    editingWidgetPlacement: 'inline',
    multipleEditingAllowed: false,
    gutters: false,

    buttonsPosition: 'after', // or "top" or "bottom"

    AddingConstructor: WorkspacesMessages,
    addingWidgetRegion: 'top',

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

    },



  } );

});



