define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"

, "put-selector/put"

, "hotplate/hotDojoWidgets/widgets"
, "hotplate/bd/WorkspacesMessages/WorkspacesMessages"
, "hotplate/bd/formatters"
, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare

, ValidationTextBox

, put

, widgets
, WorkspacesMessages
, formatters
, commonMixins
, EditingWidget
, EditableList
, BusyButton
, stores
, globals

){
  return declare( [ EditableList ], {

    // Sets initialFilter to the right contactId
    postMixInProperties: function(){
      this.inherited(arguments);
      this.initialFilter = { contactId: this.contactObject.id };

      this.addingConstructorParameter  = { contactObject: this.contactObject };
      this.editingConstructorParameter = { contactObject: this.contactObject };

    },

    ownClass: 'workspaces-contacts-messages',

    ListConstructor: declare( [ commonMixins.FullOnDemandGridNoDnd ], {

			columns: {

				from: {
					label: "From",
					sortable: false,
					renderCell: function( object, value, node, options ){
						return put('span.from', formatters.contactName( object._children.fromContactId ) );
					}
				},

				to: {
					label: "To",
					sortable: false,
					renderCell: function( object, value, node, options ){	
						var tos = object._children.workspacesMessagesTo;
						//return put('span.to', tos.map( function( o ) { return o.contactId.substr(-2) } ).join(',') );
						return put('span.to', object.computedTo );

					}
				},

				subjectBody: {
					label: 'Contents',
					sortable: false,
					renderCell: function( object, value, node, options ){	

						var message = object._children.messageId;
						var subject, body, textPreview;

						if( message.type === 'sms'){
							return put('span.preview', message.bodyText );
						}

						if( message.subject ){
							subject = message.subject;
						}

						// " — "
						if( message.bodyText ){
							//body =  message.bodyText.replace(/ *> */g, '' );
							body = message.bodyText;
						} else if( message.bodyHtml ){

							// Make up the stripped version of the SAFE HTML
							var tmp = document.createElement("DIV");
   						tmp.innerHTML = message.bodyHtmlSane || '';
							body = tmp.textContent || tmp.innerText || "";
						}

						// Clean up the body
						body = body.replace(/On +(Mon|Tue|Wed|Thu|Fri|Sat|Sun)[\s\S]*wrote: */gim,'').substr( 0, 120);
						body = body.replace(/>/gim, '' );

						//textPreview = textPreview.replace(/On [a-zA-Z]+\, [0-9]+ +[a-zA-Z]+ 20[0-9][0-9].*$/m, '')
						textPreview = ( subject ? subject + ' — ' : '' ) + body;
						return put('span.preview', textPreview );
					}
				},

				date: {
					label: 'Date',
					sortable: false,
					renderCell: function( object, value, node, options){	
						return put('span.date', formatters.dateAlaGoogle( new Date( object.added ) ) );

					}
				},
			},


    }),


    
    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="newMessageButtonWidget" class="new-message" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New message" /></div>\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',
    

    storeName: 'workspacesMessages',
    storeParameters: { workspaceId: globals.workspaceId },
    editingWidgetPlacement: 'inline',
    multipleEditingAllowed: false,
    gutters: false,
    closeDialogAfterSubmit: true,

    buttonsPosition: 'after', // or "top" or "bottom"

    AddingConstructor: WorkspacesMessages,
    //addingWidgetRegion: 'top',

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.own(

        self.extraWidget.newMessageButtonWidget.on( 'click', function( e ){
          self.addingConstructorInDialog( 'Send message' );
        })
       );


    },



  } );

});



