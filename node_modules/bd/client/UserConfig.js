
define([
  "dojo/_base/declare",

  'dijit/_WidgetBase',
  'dijit/layout/ContentPane',
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  'dijit/layout/TabContainer',
  'dijit/_Container',
  'dijit/layout/_ContentPaneResizeMixin',

  "hotplate/hotDojoWidgets/EditingWidget",

  "hotplate/bd/globals",

   ], function(
     declare

     , _WidgetBase
     , ContentPane
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , TabContainer
     , _Container
     ,  _ContentPaneResizeMixin
     , EditingWidget

     , globals
 ){


  return declare('hotplate/bd/UserConfig', [ EditingWidget ], {

    widgetsInTemplate: true,

    templateString: jade.compile( '' +
      'div\n' +
      '  form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST")\n' +
      '    .box\n'+
      '      p.boxTitle User information\n' +

      '      .inputField( style="display:inline-block; margin-right:30px")\n' +
      '        label( for="${id}_Name") Your name\n' +
      '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:10em;", maxlength="40", data-dojo-props="" )\n' + 
      '      .inputField( style="display:inline-block;")\n' +
      '        label( for="${id}_Surname") Last Name\n' +
      '        input(  id="${id}_Surname", name="surname", data-dojo-type="dijit/form/ValidationTextBox", style="width:40em", maxlength="40", data-dojo-props="" )\n' +

      '      .inputField\n' +
      '        label( for="${id}_Email) Email\n' +
      '        input(  id="${id}_Email", name="email", data-dojo-type="dijit/form/ValidationTextBox", style="width:30em", maxlength="80", name="email", data-dojo-props="validator:sharedFunctions.hotCoreCommonValidators.email, required:true, invalidMessage:sharedFunctions.hotCoreCommonValidators.email(false)")\n' +

      '    input.formSubmit( type="submit", data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")\n' +
      '')(),

    constructor: function(params){

      var that = this;

      // This widget could be displayed outside the application container (e.g. in the pick page).
      // The only difference to us is the name of the store: set it
      if( globals.inContainer ){
        this.storeName = 'userConfig';
      } else {
        this.storeName = 'userConfigNoWorkspace';
      }

    },

    storeFields: { workspaceIdCall: globals.workspaceId },
    recordId: globals.userId,
  }); // declare('hotplate/bd/UserConfig'


 return UserConfig;
});


