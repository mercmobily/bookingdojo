define([
  "dojo/_base/declare"

, "dojo/dom"
, "dijit/form/ValidationTextBox"

, "put-selector/put"

, "hotplate/hotDojoStoreConfig/ConfigVars"
, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare

, dom
, ValidationTextBox

, put

, ConfigVars
, commonMixins
, EditingWidget
, EditableList
, BusyButton
, stores
, globals

){

  var templateString = '' +
    '<div>\n' +
    '  <div class="inline-form">\n' +
    '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
    '      <input class="dial-code" id="${id}_label" name="label" data-dojo-type="dijit/form/ValidationTextBox" maxlength="50" data-dojo-props="placeHolder:\'Label\', required: true" data-dojo-attach-point="labelWidget" />\n' +
    '      <input class="number" id="${id}_code" name="code" data-dojo-type="dijit/form/ValidationTextBox" maxlength="250" data-dojo-props="placeHolder:\'Code...\', required: true" data-dojo-attach-point="codeWidget" />\n' +
    '      <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" />' +
    '    </form>\n'+
    '  </div>\n'+
    '</div>\n'+
    '';

  return declare( [ EditableList ], {

    iframeButtonClicked: false,
    iframeWaitingBody: '',
    iframe: null,

    refreshOnSubmit: false,
    immediateRefresh: false,

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row', object.label + ': ' + object.code );
        return row;
      },
      queryOptions: { placeNew: 'last' },
      dndParams: { selfAccept: true },

    }),

    EditingConstructor: declare([ EditingWidget ], {
      templateString: templateString,
      alertBarDomPlacement: 'last',
      resetOnSuccess: true,
    }),


    ButtonsConstructor: declare([ EditableList.DefaultButtonsConstructor ], {
      templateString: '' +
                      '<div>\n'+
                      '  <div class="dijitPopup" data-dojo-type="dijit/form/Button" data-dojo-attach-point="editButtonWidget, focusNode" data-dojo-props="label:\'Modifica\'"> </div>\n'+
                      '  <div class="dijitPopup" data-dojo-type="dijit/form/Button" data-dojo-attach-point="deleteButtonWidget" data-dojo-props="label:\'Elimina\'"></div>\n'+
                      '  <div class="dijitPopup" data-dojo-type="dijit/form/Button" data-dojo-attach-point="contentsButtonWidget" data-dojo-props="label:\'Apri URL\'"></div>\n'+
                      '</div>\n'+
                      '',

      postCreate: function(){
 
        this.inherited(arguments);
        var self = this;

       },

    }),

    storeName: 'workspacesNinjaFormCodes',
    storeParameters: { workspaceId: globals.workspaceId },

    editingWidgetPlacement: 'inline',
    multipleEditingAllowed: false,
    addingWidgetRegion: 'top',
    gutters: false,
    buttonsPosition: 'after', // or "top" or "bottom"

    postCreate: function(){

      this.inherited(arguments);
      var self = this;
      SELF = this;

      self.buttons.contentsButtonWidget.on( 'click', function(e){

        // You can only do this once
        if( self.iframeButtonClicked ){
          return alert("You can only pick the code once");
        }
        self.iframeButtonClicked = true;

        // Get the row info
        var row = self.row( self._buttonsRowId );

        console.log("Button clicked: initiating iframe load and submit code", row.data );

        // Button clicked: setting iframe SRC and submitCode
        self.iframe = dom.byId( 'ninja-form-iframe' );
        self.iframe.src = ConfigVars.workspacesNinjaFormSettings.url;
       
        self.submitCode = row.data.code;         

        self.iframe.addEventListener( "load", function(){
          console.log("Loaded!");

          // iframeBody was empty to start with: using whatever came as starting point
          if( self.iframeWaitingBody == '' ){
            self.iframeWaitingBody = self.iframe.contentWindow.document.body.innerHTML;
            self.iframe.contentWindow.location.reload();

          // iframeWaitingBody was already set: check that it hasn't changed
          } else {
            if( self.iframeWaitingBody != self.iframe.contentWindow.document.body.innerHTML ){
              console.log("Changed!");
              var inputForms = I = self.iframe.contentDocument.getElementsByTagName('input');
              for( var i = 0, l = inputForms.length; i < l; i ++ ){
                var inputForm = inputForms[ i ];
                if( inputForm.type !== 'hidden' ) inputForm.value = self.submitCode;
              }

              
            } else {
              self.iframe.contentWindow.location.reload();
            }
          }    
 
        }, true );
      });
    },
 



  } );

});


