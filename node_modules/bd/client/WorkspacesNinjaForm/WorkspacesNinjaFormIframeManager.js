
// TODO: 1) Frame switcher 2) Button enabler
define([
  "dojo/_base/declare"

, "dojo/dom"
, "dojo/on"
, "dojo/dom-style"
, "dojo/dom-attr"
, "dojo/request"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoStoreConfig/ConfigVars"

], function(
  declare

, dom
, on
, domStyle
, domAttr
, request

, widgets
, ConfigVars


){
  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div>\n' +

      '  <div style="display: none; height: 100%; box-sizing: content-box;" data-dojo-attach-point="wholeNode">\n'+
      '    <div class="box" style="height: 100%; box-sizing: content-box;">\n'+
      '      <p class="boxTitle">Contenuto . Codice: <span data-dojo-attach-point="submitCodeNode">Non inserito</span></p>\n' +

      '      <div class="ninja-buttons" style="height: 10%;">\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="reloadWidget" label="Ricarica"></span>\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="freezeWidget" label="Congela"></span>\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="closeWidget" label="Chiudi"></span>\n' +
      '        Pagina caricata: <span data-dojo-attach-point="reloadCounterNode">0</span>\n' +
      '        <span data-dojo-attach-point="statusStringNode">Not set</span>\n' +
      '      </div>\n' +


      '      <iframe id="ninja-form-iframe" class="ninja-form-contents" data-dojo-attach-point="iframeInitialNode" style="display: none;height: 82%;" ></iframe>\n' +
      '      <iframe id="ninja-form-iframe" class="ninja-form-contents" data-dojo-attach-point="iframeNode" style="display: none; height: 82%;"></iframe>\n' +

      '    </div>\n'+
      '  </div>\n'+

      '</div>\n' +
      '',

    status: 'closed', // closed, loadingInitial, loadingSubsequent, loadingSubsequentPaused, waitingUserInput
    reloadCounter: 0,
    submitCode: '',
    n: 0,

    _setReloadCounterAttr: function( value ){
      this._set( 'reloadCounter', value );
      this.reloadCounterNode.innerHTML = value;
    },

    _getReloadCounterAttr: function( value ){
      return this.reloadCounter;
    },

    
    _loadIframe: function( iframe, url ){

      this.n++;

      var self = this;
      //console.log("GETTING:", url );
      request.get( url, {
        handleAs: 'xml'
      }).then(
        function( res ){
          //var elem = document.createElement('div');
          //elem.innerHTML = res;
          //elem.getElementsByTagName('head')[0].appendChild(   )
          res = res.replace('<head>','<head><base href="http://www.sitilab.it/test.html">');
          //res = res.replace('<body>','<body>' + self.n );

          I = iframe;
          //console.log("WRITING:", res );
          //iframe.contentWindow.write( res );
          
          setTimeout( function(){
            //on.emit( iframe, 'load', { bubbles: true } );  
            iframe.srcdoc = res;
          }, 500 );
        },
        function( err ){
          setTimeout( function(){
            iframe.srcdoc = '';
            //on.emit( iframe, 'load', { bubbles: true } );  
          }, 500 );
          console.log( err );
        }
      );

    },

    _setStatusAttr: function( value ){
      var self = this;

      var submitCode = '';
      var status = value;
      var statusString;

      if( typeof( value ) === 'object' && value !== null ){
        status = value.status;
        submitCode = value.submitCode;
        submitLabel = value.submitLabel;
      }

      switch( status ){

        case 'closed':
          statusString = "Chiuso";
	  self.reloadWidget.set( 'disabled', true );
          self.set( 'reloadCounter', 0 );
          self.submitCode = '';
          domStyle.set( self.wholeNode, 'display', 'none' );
          domStyle.set( self.iframeInitialNode, 'display', 'none' );
          domStyle.set( self.iframeNode, 'display', 'none' );
          if( dom.byId( 'ninja-settings' ) ) domStyle.set( dom.byId( 'ninja-settings' ), 'display', 'block' );
	  self.iframeInitialNode.src = '';
          self.iframeNode.src = '';
          self._set( 'status', 'closed' );
          self.freezeWidget.set( 'label', 'Congela' );
          
        break;

        case 'loadingInitial':
          statusString = "Carico la pagina iniziale...";
          self._set( 'status', 'loadingInitial' );
	  self.reloadWidget.set( 'disabled', true );
          self.set( 'reloadCounter', 0 );
          self.submitCodeNode.innerHTML = submitLabel + " (" + submitCode + ")";
          domStyle.set( self.wholeNode, 'display', 'block' );
          domStyle.set( self.iframeInitialNode, 'display', 'block' );
          domStyle.set( self.iframeNode, 'display', 'none' );
          domStyle.set( dom.byId( 'ninja-settings' ), 'display', 'none' );
          self.submitCode = submitCode;
          self._loadIframe( self.iframeInitialNode, ConfigVars.workspacesNinjaFormSettings.url );
          INITIAL = self.iframeInitialNode;
          OTHER = self.iframeNode;
	  //self.iframeInitialNode.src = ConfigVars.workspacesNinjaFormSettings.url;
          //self.iframeNode.src = '';
          self.freezeWidget.set( 'label', 'Congela' );
        break;

        case 'loadingSubsequent':
          if( self.status == 'loadingInitial' || self.status == 'loadingSubsequentPaused' ){
            statusString = "Monitoraggio della form in corso...";
            self._set( 'status', 'loadingSubsequent' );

	    self.reloadWidget.set( 'disabled', false );

            // MERC
            //domStyle.set( self.iframeInitialNode, 'display', 'none' );
            //domStyle.set( self.iframeNode, 'display', 'block' );

            self._loadIframe( self.iframeNode, ConfigVars.workspacesNinjaFormSettings.url );
            //self.iframeNode.src = ConfigVars.workspacesNinjaFormSettings.url;
          }
        break;

        case 'loadingSubsequentPaused':
          if( self.status == 'loadingSubsequent' ){
	    self.reloadWidget.set( 'disabled', false );
            statusString = "Monitoraggio della form in pausa...";
            self._set( 'status', 'loadingSubsequentPaused' );
            self.freezeWidget.set( 'label', 'Scongela' );
          }
        break;

        case 'waitingUserInput':
            statusString = "Waiting for user input...";
	    self.reloadWidget.set( 'disabled', true );
            domStyle.set( self.iframeInitialNode, 'display', 'none' );
            domStyle.set( self.iframeNode, 'display', 'block' );
            self._set( 'status', 'waitingUserInput' );
        break;
      }
      this.statusStringNode.innerHTML = statusString;

      this._set( 'status', status );
    },

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      IFRAME = self.iframeNode;

      self.reloadWidget.on( 'click', function( e ){
        if( self.status === 'loadingSubsequent' || self.status === 'loadingSubsequentPaused'){
          self.iframeNode.contentWindow.location.reload();
        }
      });

      self.freezeWidget.on( 'click', function( e ){
        if( self.status == 'loadingSubsequent'){
          self.set( 'status', 'loadingSubsequentPaused' );
        } else if( self.status == 'loadingSubsequentPaused'){
          self.set( 'status', 'loadingSubsequent' );
        } 
         
      });

      self.closeWidget.on( 'click', function( e ){
        self.set( 'status', 'closed' );
      });

      self.iframeInitialNode.addEventListener( "load", function(){
        //console.log("Initial page loaded");
        //console.log( self.status );
        if( self.status != 'loadingInitial' ) return;

        //console.log("Setting state to loadingSubsequent...");
        self.set( 'status', 'loadingSubsequent' );
      });


      self.iframeNode.addEventListener( "load", function(){
        if( self.status != 'loadingSubsequent' && self.status != 'loadingSubsequentPaused' ) return;

        self.set( 'reloadCounter', self.get( 'reloadCounter' ) + 1 );

        //console.log("COMPARING THIS:");
        //console.log( self.iframeInitialNode.contentDocument.documentElement.innerHTML );
        //console.log("WITH THIS:");
        //console.log( self.iframeNode.contentDocument.documentElement.innerHTML );
       
        if( self.iframeInitialNode.contentDocument.documentElement.innerHTML != self.iframeNode.contentDocument.documentElement.innerHTML ){
          
          self.set( 'status', 'waitingUserInput' );

          var inputForms = self.iframeNode.contentDocument.getElementsByTagName('input');
          for( var i = 0, l = inputForms.length; i < l; i ++ ){
            var inputForm = inputForms[ i ];
            if( inputForm.type !== 'hidden' && inputForm.value == '') inputForm.value = self.submitCode;
          }

        } else {
          if( self.status == 'loadingSubsequent' ){
            self._loadIframe( self.iframeNode, ConfigVars.workspacesNinjaFormSettings.url );
            //self.iframeNode.contentWindow.location.reload();
          }
        }
 
      }, true );
 

    },

    initiateScreening: function( label, code ){
      this.set( 'status', { status: 'loadingInitial', submitLabel: label, submitCode: code } );
    },

  });
});

