
// TODO: 1) Frame switcher 2) Button enabler
define([
  "dojo/_base/declare"

, "dojo/dom"
, "dojo/on"
, "dojo/dom-style"
, "dojo/dom-attr"
, "dojo/request"

, "dijit/layout/TabContainer"
, "dijit/layout/ContentPane"

, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoStoreConfig/ConfigVars"

], function(
  declare

, dom
, on
, domStyle
, domAttr
, request

, TabContainer
, ContentPane

, widgets
, ConfigVars


){

/*
  var MERCContentPane = declare( 'MERCContentPane', [ ContentPane ], {
    resize: function(){
      this.inherited(arguments);
      console.log("CALLED RESIZE FOR MERCCONTENTPANE!" , this.id);
    },
  });

  var MERCTabContainer = declare( 'MERCTabContainer', [ TabContainer ], {
    resize: function(){
      this.inherited(arguments);
      console.log("CALLED RESIZE FOR MERCTABCONTAINER!", this.id);
    },
  });
*/

  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div>\n' +

      '  <div style="display: none; height: 100%; box-sizing: content-box;" data-dojo-attach-point="wholeNode">\n'+
      '    <div class="box" style="height: 100%; box-sizing: content-box;">\n'+
      '      <p class="boxTitle">Contenuto . Codice: <span data-dojo-attach-point="submitCodeNode">Non inserito</span></p>\n' +

      '      <div class="ninja-buttons" style="height: 5%;">\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="backWidget" label="Indietro"></span>\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="reloadWidget" label="Ricarica"></span>\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="freezeWidget" label="Congela"></span>\n' +
      '        <span class="ninja-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="closeWidget" label="Chiudi"></span>\n' +
      '        Pagina caricata: <span data-dojo-attach-point="reloadCounterNode">0</span>\n' +
      '        <span data-dojo-attach-point="statusStringNode">Not set</span>\n' +
      '      </div>\n' +


      '      <div style="height: 82%" data-dojo-attach-point="previewContentPane" data-dojo-type="dijit/layout/ContentPane">\n' +
      '        <div style="height: 100%" data-dojo-attach-point="tabContainer" data-dojo-type="dijit/layout/TabContainer">\n' +
      '          <div style="height: 100%" data-dojo-attach-point="firstTab" data-dojo-type="dijit/layout/ContentPane" title="Main">\n' +
      '            <iframe id="ninja-form-iframe" class="ninja-form-contents" data-dojo-attach-point="iframeNode" style="display: block; height: 100%;"></iframe>\n' +

      '          </div>\n'+
      '        </div>\n'+
      '      </div>\n'+

      '    </div>\n'+
      '  </div>\n'+



      '</div>\n' +
      '',

    status: 'none', // none, closed, loadingInitial, loadingSubsequent, loadingSubsequentPaused, waitingUserInput
    reloadCounter: 0,
    submitCode: '',
    initialPage: '',
    url: '',

    startup: function(){
      this.inherited( arguments );
    },

    resize: function(){
      this.inherited( arguments );
    },

    _setReloadCounterAttr: function( value ){
      this._set( 'reloadCounter', value );
      this.reloadCounterNode.innerHTML = value;
    },

    _getReloadCounterAttr: function( value ){
      return this.reloadCounter;
    },

   

    _loadPage: function(){

      var self = this;
      //console.log("GETTING:", url );

      return request.get( self.url, 
        {
          handleAs: 'xml',
          preventCache: true,
          timeout: 10000,
          headers: {
            'X-Requested-With': '',
            'Referrer': '',
          },
        }
      ).then(
        function( res ){
          self._pageLoaded( res );
        },
        function( err ){
          console.log( err );
          self._pageLoaded( '' );
        }
      );
    },

    _pageLoaded: function( res ){

      var self = this;

      switch( self.status ){

        case 'loadingInitial':

          if( res == '' ){

            setTimeout( function(){
              self._loadPage();
            }, 150 );

          } else {
            self._placeContentsInIframe( res );
            self.initialPage = res; 
            self.set( 'status', 'loadingSubsequent' );
          }
        break;


        case 'loadingSubsequent':
        case 'loadingSubsequentPaused':

          self.set( 'reloadCounter', self.get( 'reloadCounter' ) + 1 );

//          console.log("COMPARING:");
//          console.log( self.initialPage );
//          console.log("WITH:");
//          console.log( res );

          if( self.initialPage != res && res != '' ){
          
            self.set( 'status', 'submitting' );
            self._placeContentsInIframe( res );

          } else {
            if( self.status == 'loadingSubsequent' ){

              // Replace request with a new one
              setTimeout( function(){
                self._loadPage();
              }, 200 );
            }
          }
        break;
      }
 
    },

    _placeContentsInIframe: function( contents ){

      var self = this;

      //var elem = document.createElement('div');
      //elem.innerHTML = res;
      //elem.getElementsByTagName('head')[0].appendChild(   )
      //res = res.replace('<body>','<body>' + self.n );
      contents = contents.replace(/< *head *>/,'<head><base href="' + self.url + '">');
      self.iframeNode.srcdoc = contents;
    },



    _setStatusAttr: function( value ){
      var self = this;

      var submitCode = '';
      var status = value;
      var statusString;

      if( typeof( value ) === 'object' && value !== null ){
        status = value.status;
        submitCode = value.submitCode;
        submitLabel = value.submitLabel;
      }

      switch( status ){

        case 'closed':
          console.log("CLOSED!");
          statusString = "Chiuso";
	  self.freezeWidget.set( 'disabled', false );
	  self.reloadWidget.set( 'disabled', true );
          self.backWidget.set( 'disabled', true );
          self.set( 'reloadCounter', 0 );
          self.submitCode = '';
          domStyle.set( self.wholeNode, 'display', 'none' );// MERC IT WAS: 'none'
          if( dom.byId( 'ninja-settings' ) ) domStyle.set( dom.byId( 'ninja-settings' ), 'display', 'block' );
          self.iframeNode.src = '';
          self._set( 'status', 'closed' );
          self.freezeWidget.set( 'label', 'Congela' );
          self.initialPage = '';
          self.iframeNode.srcdoc = '';

          // Take tabs out, destroy the children
          self.tabContainer.getChildren().forEach( function( child ){
            if( child.title != 'Main' ){
              self.tabContainer.removeChild( child );
              child.destroy();
            }
          });
          
        break;

        case 'loadingInitial':
          statusString = "Carico la pagina iniziale...";
          self._set( 'status', 'loadingInitial' );
	  self.reloadWidget.set( 'disabled', true );
          self.backWidget.set( 'disabled', true );
          self.set( 'reloadCounter', 0 );
          self.submitCodeNode.innerHTML = submitLabel + " (" + submitCode + ")";
          domStyle.set( self.wholeNode, 'display', 'block' );

          self.resize();

          domStyle.set( dom.byId( 'ninja-settings' ), 'display', 'none' );

          self.submitCode = submitCode;
          
          self._loadPage();
          self.freezeWidget.set( 'label', 'Congela' );

 
        break;

        case 'loadingSubsequent':
          if( self.status == 'loadingInitial' || self.status == 'loadingSubsequentPaused' ){
            statusString = "Monitoraggio della form in corso...";
            self._set( 'status', 'loadingSubsequent' );

	    self.reloadWidget.set( 'disabled', true );
            self.backWidget.set( 'disabled', true );

            self._loadPage();
            setTimeout( function(){
              self._loadPage();
            }, 200 );
            setTimeout( function(){
              self._loadPage();
            }, 400 );
            setTimeout( function(){
              self._loadPage();
            }, 600 );
            setTimeout( function(){
              self._loadPage();
            }, 800 );

            self.freezeWidget.set( 'label', 'Congela' );
          }
        break;

        case 'loadingSubsequentPaused':
          if( self.status == 'loadingSubsequent' ){
	    self.reloadWidget.set( 'disabled', false );
            self.backWidget.set( 'disabled', true );
            statusString = "Monitoraggio della form in pausa...";
            self._set( 'status', 'loadingSubsequentPaused' );
            self.freezeWidget.set( 'label', 'Scongela' );
          }
        break;

        case 'submitting':
          statusString = "Submitting!";
          self.reloadWidget.set( 'disabled', true );
          self.backWidget.set( 'disabled', false );
          self._set( 'status', 'submitting' );
	  self.freezeWidget.set( 'disabled', true );
        break;

        case 'waitingUserInput':
          statusString = "Form in display!";
          self.reloadWidget.set( 'disabled', true );
          self.backWidget.set( 'disabled', false );
          self._set( 'status', 'waitingUserInput' );
	  self.freezeWidget.set( 'disabled', true );
        break;
      }
      this.statusStringNode.innerHTML = statusString;

      this._set( 'status', status );
    },

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      SELF = self;
      P = self.previewContentPane;
      T = self.tabContainer;
      F = self.firstTab;

      self.url = ConfigVars.workspacesNinjaFormSettings.url;

      self.reloadWidget.on( 'click', function( e ){
        if( self.status === 'loadingSubsequent' || self.status === 'loadingSubsequentPaused'){
          self._loadPage();
        }
      });

      self.backWidget.on( 'click', function( e ){
        if( self.status === 'waitingUserInput' ){
          self.iframeNode.contentWindow.history.back( -1 );
        }
      });


      self.freezeWidget.on( 'click', function( e ){
        if( self.status == 'loadingSubsequent'){
          self.set( 'status', 'loadingSubsequentPaused' );
        } else if( self.status == 'loadingSubsequentPaused'){
          self.set( 'status', 'loadingSubsequent' );
        } 
      });

      self.closeWidget.on( 'click', function( e ){
        self.set( 'status', 'closed' );
      });


      on( self.iframeNode, 'load', function( e ){

        if( self.status == 'submitting' ){

          var inputFields = self.iframeNode.contentDocument.getElementsByTagName('input');
          if( inputFields ){
            for( var i = 0, l = inputFields.length; i < l; i ++ ){
              var inputForm = inputFields[ i ];
              if( inputForm.type !== 'hidden' && inputForm.value == '') inputForm.value = self.submitCode;
            }
          }
          

          var forms = self.iframeNode.contentDocument.getElementsByTagName('form');
          if( forms ){

            forms = Array.prototype.slice.call(forms, 0);

            var N = 0;
            forms.forEach( function( form ){

              var iframe = document.createElement( 'iframe' );
              iframe.id = "iframe_" + N;
              iframe.style.height = '100%';
              iframe.style.width = '100%';
              iframe.style.display = 'block';
              var cp = new ContentPane({
                title: "Form " + N,
                closable: true,
              });      
              cp.domNode.appendChild( iframe );
              cp.startup();
              self.tabContainer.addChild( cp );
    
              var prevTarget = form.target;
              form.target = 'iframe_' + N;
              form.id = "id_" + N;

              var button = document.createElement( 'input' );
              button.type = 'submit';
              button.value = 'submit button';
              button.style.display = 'none';
              form.appendChild( button );

              on( iframe, 'load', function(){
                form.target = prevTarget;
                self.tabContainer.selectChild( cp );
              });
              button.click();


              N++;

            });
          }

          self.set( 'status', 'waitingUserInput' );
        }

      });

    },

    initiateScreening: function( label, code ){
      this.set( 'status', { status: 'loadingInitial', submitLabel: label, submitCode: code } );
    },

  });
});

