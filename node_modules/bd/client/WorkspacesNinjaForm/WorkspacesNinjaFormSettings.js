define([

  "dojo/_base/declare"

, "dojo/on"
, "dojo/dom"
, "dijit/form/Form"
, "dijit/form/ValidationTextBox"
, "dijit/form/DateTextBox"
, "hotplate/hotDojoWidgets/UTCDateTextBox"
, "dijit/form/TimeTextBox"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoGlobals/globals"

], function(

  declare

, on
, dom
, Form
, ValidationTextBox
, DateTextBox
, UTCDateTextBox
, TimeTextBox

, stores
, BusyButton
, EditingWidget
, globals

){

  return declare( [ EditingWidget ], {

    templateString: '' +
    '<div>\n' +
    '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
    '    <div class="box">\n' +
    '      <p class="boxTitle">Informazioni di base</p>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_url">Form URL</label>\n' +
    '        <input id="${id}_url" name="url" data-dojo-type="dijit/form/ValidationTextBox" size="40" maxlength="250" data-dojo-props="" />\n' +
    '      </div>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_clickDate">Click date</label>\n' +
    '        <input id="${id}_clickDate" name="clickDate" data-dojo-type="dijit/form/DateTextBox" data-dojo-props="validator: this.dateValidator.bind(this)" data-dojo-attach-point="clickDateWidget" />\n' +
    '      </div>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_clickTime">Click time</label>\n' +
    '        <input id="${id}_clickTime" name="clickTime" data-dojo-type="dijit/form/TimeTextBox" data-dojo-props="validator: this.timeValidator.bind(this), timePattern: \'HH:mm:ss\', "  data-dojo-attach-point="clickTimeWidget" />\n' +
    '      </div>\n' +
    '      <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />' +
    '    </div>\n' +
    '  </form>\n' +
    '</div>\n' +
    '',

    storeName: 'workspacesNinjaFormSettings',
    storeParameters: {},
    recordId: globals.workspaceId,

    dateValidator: function( v ){
      return true;
    },

    timeValidator: function( v ){
      var date = this.clickDateWidget.get( 'value' );
      var time = this.clickTimeWidget.get( 'value' );

      //console.log("In timeDalidator. Date and time:", date, time );

      // Both null values are fine
      if( date == null && time == null ) return true;
      if( date != null && time != null ) return true;
      return false;
    },


    manipulateValuesBeforeSubmit: function( values ){


      // If the form is empty, simply delete the two fields
      if( ! values.clickDate ){
         delete values.clickDate;
         delete values.clickTime;
      } else {

        // Take timezone out of the equation from clickTime (ugh)
        values.clickTime.setTime( values.clickTime.getTime() - values.clickTime.getTimezoneOffset() * 60 * 1000 );

        // Make up the clickDate as the sum of time and date
        values.clickDate = new Date( values.clickDate.getTime() + values.clickTime.getTime() );

        // Won't submit this
        delete values.clickTime;
      }

    },

    postCreate: function(){

      this.inherited(arguments);

      this.on('successfulsubmit', function( e ){
        console.log("SUCCESSFUL SUBMIT!", e.submitted );
        if( e.submitted.clickDate ){
          
          //var iFrame = dom.byId('ninja-form-iframe' );
          //iFrame.src = e.submitted.url;


        }
        
      });

    },

    afterFormWidgetSet: function( res ){

      // Set the value for the dropDown menu for easy picking (the textbox will stay empty)
      var date = this.clickDateWidget.get( 'value' );
      if( ! date ){
        this.clickDateWidget.set( 'dropDownDefaultValue', new Date() );
      }

      // If there is a date, set the time to whatever was set
      if( date ){
        var t = new Date( res.clickDate );
        //t.setTime( t.getTime() + t.getTimezoneOffset() * 60 * 1000 );
      
        this.clickTimeWidget.set( 'value', t );
        

      }

    },

/*
    resize: function(){

      var firstResize = this._firstResize;
      this.inherited(arguments);

      if( firstResize ){


            console.log( "IT IS:");
        console.log( date );
        console.log( JSON.stringify( date ) );
         
        this.clickTimeWidget.set( 'value',  );


      }

        
    },
*/


  });

});
