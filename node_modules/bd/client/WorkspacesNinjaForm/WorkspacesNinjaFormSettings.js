
define([

  "dojo/_base/declare"

, "dijit/form/Form"
, "dijit/form/ValidationTextBox"
, "dijit/form/DateTextBox"
, "dijit/form/TimeTextBox"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoGlobals/globals"

], function(

  declare

, Form
, ValidationTextBox
, DateTextBox
, TimeTextBox

, stores
, BusyButton
, EditingWidget
, globals

){

  return declare( [ EditingWidget ], {

    templateString: '' +
    '<div>\n' +
    '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
    '    <div class="box">\n' +
    '      <p class="boxTitle">Form information</p>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_url">Form URL</label>\n' +
    '        <input id="${id}_url" name="url" data-dojo-type="dijit/form/ValidationTextBox" size="40" maxlength="250" data-dojo-props="required:true" />\n' +
    '      </div>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_clickDate">Click date</label>\n' +
    '        <input id="${id}_clickDate" name="clickDate" data-dojo-type="hotplate/hotDojoWidgets/UTCDateTextBox" data-dojo-props="" data-dojo-attach-point="clickDateWidget" />\n' +
    '      </div>\n' +
    '      <div class="inputField">\n' +
    '        <label for="${id}_clickTime">Click time</label>\n' +
    '        <input id="${id}_clickTime" name="clickTime" data-dojo-type="dijit/form/TimeTextBox" data-dojo-props="" />\n' +
    '      </div>\n' +
    '      <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />' +
    '    </div>\n' +
    '  </form>\n' +
    '  <p>Second para</p>\n' +
    '</div>\n' +
    '',

    storeName: 'workspacesNinjaFormSettings',
    storeParameters: {},
    recordId: globals.workspaceId,

    // Makes sure that isCompany is sent as a boolean flag
    manipulateValuesBeforeSubmit: function( values ){

      //if( ! this.clickDateWidget.get('value') || ! this.clickTimeWidget.get('value') ){
      if( ! values.clickDate || ! values.clickTime ){
         delete values.clickDate;
      } else {

        // Take timezone out of the equation from clickTime (ugh)
        values.clickTime.setTime( values.clickTime.getTime() - values.clickTime.getTimezoneOffset() * 60 * 1000 );

        // Make up the clickDate as the sum of time and date
        values.clickDate = new Date( values.clickDate.getTime() + values.clickTime.getTime() );

      }
      delete values.clickTime;

    },

    postCreate: function(){

      this.inherited(arguments);

      if( ! this.clickDateWidget.get('value') ){
        this.clickDateWidget.set( 'dropDownDefaultValue', new Date() );
      }

    },



  });

});
