
define([
  "dojo/_base/declare"
, "dojo/on"
, "dojo/when"

, "hotplate/hotDojoSubmit/defaultSubmit"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/StoreRecordViewWidget"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare
, on
, when

, ds
, BusyButton
, widgets
, StoreRecordViewWidget
, stores
, globals

){
  return declare( [ StoreRecordViewWidget ], {

    templateString: '' +
      '<div>\n' +
      '  <p>Current time offset: <span data-dojo-attach-point="timeOffset">Loading...</span></p>\n' +
      ' <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />\n' +
      '</div>\n' +
      '',

    storeName: 'workspacesNinjaFormTimeOffset',
    storeParameters: {},
    recordId: globals.workspaceId,

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      self.own(

        // Note that there is no need to run refreshData after this put
        // because the put() itself triggers a storeRecordUpdate event
        // which will prompt refreshData()

        // Simply run the put() when the button is clicked
        on( self.buttonWidget, 'click', function( e ){
          self.buttonWidget.makeReallyBusy();
          when( self.store.put( { workspaceId: globals.workspaceId } )).then(    
            ds.UIMsg( self.buttonWidget ),
            ds.UIErrorMsg( null, self.buttonWidget, null )
          );
        })
      );

    },

    // Data is refreshed: update the form with the new info
    refreshData: function( data ){
      this.inherited(arguments);

      this.timeOffset.innerHTML = data.timeOffset + " ms";

    },



  });

});
