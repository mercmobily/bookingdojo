define([
  "dojo/_base/declare"

, "dijit/form/Textarea"

, "hotplate/hotDojoWidgets/ValidationTextArea"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoWidgets/BusyButton"

], function(
  declare

, Textarea

, widgets
, EditingWidget
, BusyButton

){
  return declare([ EditingWidget ], {

    maxLength: 384,
    templateString: '' +
      '<div>\n' +
      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
      '    <div data-dojo-attach-point="counterNode"></div>\n' +
      '    <input id="${id}_body" style="min-height:4em;max-height:4em;display:block" name="body" data-dojo-type="hotplate/hotDojoWidgets/ValidationTextArea" data-dojo-props="required:true, validator: this.messageValidator" data-dojo-attach-point="bodyWidget" />\n' +
      '    <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Send" />' +
      '  </form>\n'+
      '</div>\n'+
      '',
    alertBarDomPlacement: 'first',
    resetOnSuccess: true, 

    messageValidator: function( value, constraints ){
      var self = this;

      //console.log('Validating:', value, self.maxLength, self.maxLength - value.length  )
      return self.maxLengthValidation - value.length > 0;
    },

    manipulateValuesBeforeSubmit: function( values ){
      values.type = 'sms';
    },

    savedMessage: 'SMS queued!',

    _updateCounter: function( ){
      var self = this;
      var l = self.maxLength - self.bodyWidget.get('value').length;
      self.counterNode.innerHTML = l;
      self.counterNode.className = l >= 0 ? 'black' : 'red';
    },

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      self._updateCounter();

      self.bodyWidget.on('keyup', function(e){
        self._updateCounter();
      });

      // Editor doesn't implement reset, have to reset it by hand... ugh!
      this.on( 'successfulsubmit', function(){
        self._updateCounter();
      });

      // This will make maxLength available to the textbox's validator
      self.bodyWidget.maxLengthValidation = self.maxLength;

    },

  });
});