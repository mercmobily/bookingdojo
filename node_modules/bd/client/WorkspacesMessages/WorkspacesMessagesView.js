define([
  "dojo/_base/declare"

, "dojo/on"
, "dojo/dom-construct"
, "dijit/registry"

, "hotplate/hotClientDojo/dgridWidgets/commonMixins"
, "hotplate/hotClientDojo/widgets/ViewingWidget"
, "hotplate/hotClientDojo/widgets/widgets"
, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/widgets/util"

, "hotplate/bd/WorkspacesMessages/WorkspacesSelectContactFrom"
, "hotplate/bd/formatters"


], function(
  declare

, on
, domConstruct
, registry

, commonMixins
, ViewingWidget
, widgets
, stores
, globals
, util

, WorkspacesSelectContactFrom
, formatters

){

  var templateString = '' +
    '<div class="workspaces-messages-view">\n' +

      '  <div data-dojo-attach-point="fromContactNode"></div>\n' + 
    //'  <div class="workspaces-messages-view-from" data-dojo-attach-point="fromNode">\n' +
    //'    <span class="workspaces-messages-view-from-main" data-dojo-attach-point="fromMain"></span>\n' +
    //'  </div>\n'+

    '  <div class="workspaces-messages-view-to"><span class="s">To:</span><span data-dojo-attach-point="toNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-re" data-dojo-attach-point="reDiv"><span class="s">Re:</span><span data-dojo-attach-point="reNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-on"><span class="s">On:</span><span data-dojo-attach-point="onNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-contents" data-dojo-attach-point="messageNode"></div>\n' +
    '</div>\n'+
    '';

  return declare( [ ViewingWidget ], {

  	templateString: templateString,

    postCreate: function(){
      this.inherited(arguments);
    },

    renderInfo: function(){
    	var self = this;

    	//console.log( "MESSAGE DATA:", this.info );

      this.fromContactWidget = new WorkspacesSelectContactFrom( { 
        info: {
          workspacesMessages: {
            loadOnShow: true,
            data: self.info.workspacesMessages.data,
            id: self.info.workspacesMessages.data.id,
            store: self.info.workspacesMessages.store,
          },
        }
      }, this.fromContactNode );
        
      // Render the information
    	/*this.fromMain.innerHTML = this.info.workspacesMessages.data.fromContactId ?  formatters.contactName( this.info.workspacesMessages.data._children.fromContactId ) : '';
    	if( this.info.workspacesMessages.data.computedFrom ){
    		this.fromVia = domConstruct.place( '<span>', this.fromNode );
    	  this.fromVia.innerHTML = "(via " + util.escapeHTML( this.info.onlineMessages.data.from )  + ")";
    	}
        */

    	this.toNode.innerHTML = util.escapeHTML( this.info.workspacesMessages.data.toAsString );

    	this.info.onlineMessages.data.subject
    		? this.reNode.innerHTML = util.escapeHTML( this.info.onlineMessages.data.subject )
        : domConstruct.destroy( this.reDiv);

    	this.onNode.innerHTML = formatters.dateFull( this.info.workspacesMessages.data.added );
    	this.messageNode.innerHTML = this.info.onlineMessages.data.bodyHtmlSane || this.info.onlineMessages.data.bodyText;


        /*
    	// Add editing widgets if "from" and "to" were computed, and therefore changeable
    	if( this.info.workspacesMessages.data.computedFrom ){
    		this.fromEditButton = domConstruct.place( '<span>', this.fromMain );

        // TODO: Place widget here
    		this.fromEditButton.innerHTML = "[EDIT]"
    	}
        */

        // Add editing widgets if "from" and "to" were computed, and therefore changeable
    	if( this.info.onlineMessages.data.incoming ){
    		this.toEditButton = domConstruct.place( '<span>', this.toNode );

        // TODO: place widget here
    		this.toEditButton.innerHTML = "[EDIT]"
    	}


    	on.emit( self.domNode, 'force-resize', { bubbles: true } );

    }

  });

});



