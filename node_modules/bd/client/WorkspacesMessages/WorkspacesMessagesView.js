define([
  "dojo/_base/declare"

, "dojo/on"
, "dojo/dom-construct"
, "dijit/registry"

, "hotplate/hotClientDojo/dgridWidgets/commonMixins"
, "hotplate/hotClientDojo/widgets/ViewingWidget"
, "hotplate/hotClientDojo/widgets/widgets"
, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/widgets/util"

, "hotplate/bd/WorkspacesMessages/WorkspacesSelectContactFrom"
, "hotplate/bd/formatters"


], function(
  declare

, on
, domConstruct
, registry

, commonMixins
, ViewingWidget
, widgets
, stores
, globals
, util

, WorkspacesSelectContactFrom
, formatters

){

  var templateString = '' +
    '<div class="workspaces-messages-view">\n' +

    '  <div data-dojo-type="hotplate/bd/WorkspacesMessages/WorkspacesSelectContactFrom" data-dojo-props="workspaceMessage:this.workspaceMessage"></div>\n' + 
    
    '  <div class="workspaces-messages-view-to"><span class="s">To:</span><span data-dojo-attach-point="toNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-re" data-dojo-attach-point="reDiv"><span class="s">Re:</span><span data-dojo-attach-point="reNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-on"><span class="s">On:</span><span data-dojo-attach-point="onNode"></span></div>\n' +

    '  <div class="workspaces-messages-view-contents" data-dojo-attach-point="messageNode"></div>\n' +
    '</div>\n'+
    '';

  return declare( [ ViewingWidget ], {

  	templateString: templateString,

    postMixInProperties: function(){
      this.info = {
        workspacesMessages: {
          id: this.workspaceMessage.id,
          data: this.workspaceMessage,
          storeParameters: { workspaceId: this.workspaceMessage.workspaceId },
        },
        onlineMessages: {
          id: this.workspaceMessage.messageId,
          storeParameters: { workspaceId: this.workspaceMessage.workspaceId }
        }
      }
    },

    renderInfo: function(){
    	var self = this;
        
    	this.toNode.innerHTML = util.escapeHTML( this.info.workspacesMessages.data.toAsString );

    	this.info.onlineMessages.data.subject
    		? this.reNode.innerHTML = util.escapeHTML( this.info.onlineMessages.data.subject )
        : domConstruct.destroy( this.reDiv);

    	this.onNode.innerHTML = formatters.dateFull( this.info.workspacesMessages.data.added );
    	this.messageNode.innerHTML = this.info.onlineMessages.data.bodyHtmlSane || this.info.onlineMessages.data.bodyText;

        // Add editing widgets if "from" and "to" were computed, and therefore changeable
    	if( this.info.onlineMessages.data.incoming ){
    		this.toEditButton = domConstruct.place( '<span>', this.toNode );

        // TODO: place widget here
    		this.toEditButton.innerHTML = "[EDIT]"
    	}


    	on.emit( self.domNode, 'force-resize', { bubbles: true } );

    }

  });

});



