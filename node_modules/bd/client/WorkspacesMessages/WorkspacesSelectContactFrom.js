
define([

  "dojo/_base/declare"

, "dijit/form/Form"
, "dijit/form/ValidationTextBox"
, "dijit/form/NumberTextBox"
, "dijit/_WidgetBase"
, "dijit/form/Select"

, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/widgets/BusyButton"
, "hotplate/hotClientDojo/widgets/ViewingWidget"
, "hotplate/hotClientDojo/widgets/Dummy"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/widgets/util"

, "hotplate/bd/WorkspacesConfig/StatsUsesSelect"
, "hotplate/bd/formatters"

], function(

  declare

, Form
, ValidationTextBox
, NumberTextBox
, _WidgetBase
, Select

, stores
, BusyButton
, ViewingWidget
, Dummy
, globals
, util

, StatsUsesSelect
, formatters

){

  return declare( [ ViewingWidget ], {

    templateString: '' +
    '<div class="contact-from-select">\n' +
    '    <div data-dojo-attach-point="selectNode"></div>\n' +
    '</div>\n' +
    '',
  
    postMixInProperties: function(){
      this.info = {
        workspacesMessages: {
          id: this.workspaceMessage.id,
          data: this.workspaceMessage,
          storeParameters: { workspaceId: this.workspaceMessage.workspaceId },
        },
      }
    },    
    
    _populateSelectWidget: function(){

      var self = this;

      var data = self.info.workspacesMessages.data;
      var options = [];

      if( data.fromContactId ){
        options.push({
          label: formatters.contactName( data._children.fromContactId ),
          value: "contact",
        });
      } else {
        options.push({
          label: util.escapeHTML( self.info.workspacesMessages.data._children.messageId.from ),
          value: "selection"
        });
      }

      options = options.concat([
        { label: "Link to a new contact",
          value: "new"
        },
        { 
          label: "Link to another existing contact",
          value: "existing"
        }
      ]);

      if( data.fromContactId ){
        options.push({
          label: "Look for more matching contacts",
          value: "more"
        });
      };

      this.selectWidget.set( 'options', options );
      this.selectWidget.set( 'value', this.selectWidget.value );

      // Add people with matching email addresses as options, with parseable IDs
    },

    renderInfo: function(){
      this.inherited(arguments);

      var self = this;
      var data = self.info.workspacesMessages.data;

      var options = [];

      // OUTGOING message: it's _certainly_ from a fromContactId, and it's not
      // changeable
      if( !data.incoming ){
        this.selectNode.innerHTML = formatters.contactName( data._children.fromContactId );

      // INGOING: it's from the outside, the system tried to match which contact it
      // was from, but it's error prone. Offer a select to change the contactId
      } else {

        if( this.selectWidget ){
          this.selectWidget.destroy();
        }
      
        this.selectWidget = new Select({
          name: 'operation',
          options: {},
        }, this.selectNode );
        
        this._populateSelectWidget();

        self.selectWidget.on('change', function( e ){
          var newValue = self.selectWidget.get('value');

          switch( newValue ){
            case 'existing':

              self.selectWidget.set('value', 'contact' );
            break;

            case 'new':

            break;

            case 'more':
            
            break;

          }



        })



      }
    },

    postCreate: function(){
      this.inherited(arguments);


    }


  });

});
