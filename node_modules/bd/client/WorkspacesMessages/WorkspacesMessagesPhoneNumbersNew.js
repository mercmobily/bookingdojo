define([
  "dojo/_base/declare"

, "hotplate/hotClientDojo/widgets/EditingWidget"
, "hotplate/hotClientDojo/widgets/ViewingWidget"

, "hotplate/hotClientDojo/widgets/ValidationTextArea"
, "hotplate/hotClientDojo/dgridWidgets/StoreSelect"


, "hotplate/hotClientDojo/widgets/BusyButton"
, "hotplate/hotClientDojo/storeConfig/ConfigVars"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/widgets/util"
, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/widgets/Dummy"

, "hotplate/bd/WorkspacesMessages/WorkspacesContactsTo"

], function(
  declare

, EditingWidget
, ViewingWidget

, ValidationTextarea
, StoreSelect

, BusyButton
, ConfigVars  
, globals
, util
, stores
, Dummy

, WorkspacesContactsToSms

){

  return declare([ EditingWidget, ViewingWidget ], {

    maxLength: 384,
    templateString: '' +
      '<div class="workspaces-messages-new workspaces-messages-new-phone-numbers">\n' +
      '  <div data-dojo-type="hotplate/hotClientDojo/widgets/Dummy"></div>\n' +

      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

      '    <div id="${id}_from" name="from" >\n' +
      '      <span class="from">From: </span>\n' +
      '      <span class="from-name-node" data-dojo-attach-point="fromNameNode"></span>\n' +
      '    </div>\n' +

      '    <div id="${id}_to" value="" name="to" data-dojo-attach-point="toWidget" data-dojo-type="hotplate/bd/WorkspacesMessages/WorkspacesContactsTo" data-dojo-props="workspaceId: this.workspaceId, contactId: this.contactId, recipientType:\'PhoneNumbers\', storeParameters: this.storeParameters"></div>\n' +

      '    <div data-dojo-attach-point="counterNode"></div>\n' +

      '    <input id="${id}_bodyText" name="bodyText" data-dojo-type="hotplate/hotClientDojo/widgets/ValidationTextArea" data-dojo-props="required:true, validator: this.messageValidator" data-dojo-attach-point="bodyWidget" />\n' +

      '    <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Send" />' +
      '  </form>\n'+
      '</div>\n'+
      '',
    alertBarDomPlacement: 'first',
    resetOnSuccess: true, 

    storeName: 'workspacesMessages',

    postMixInProperties: function(){

      this.inherited(arguments);

      this.info = {
        workspacesContacts_from: {
          storeParameters: { workspaceId: this.workspaceId },
          id: vars.bd.userContact.id,
          storeName: 'workspacesContacts',
        }
      };
    },

    renderInfo: function(){
      this.fromNameNode.innerHTML = util.escapeHTML( this.info.workspacesContacts_from.data.firstName );
    },
    
    messageValidator: function( value, constraints ){
      var self = this;

      //console.log('Validating:', value, self.maxLength, self.maxLength - value.length  )
      return self.maxLengthValidation - value.length > 0;
    },

    savedMessage: 'SMS queued!',

    _updateCounter: function( ){
      var self = this;
      var l = self.maxLength - self.bodyWidget.get('value').length;
      self.counterNode.innerHTML = l;
      self.counterNode.className = l >= 0 ? 'black' : 'red';
    },

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      self._updateCounter();

      self.toWidget.set( 'value', self.contactObject ? self.contactObject.mainPhoneNumberId : null );

      self.bodyWidget.on('keyup', function(e){
        self._updateCounter();
      });

      // Editor doesn't implement reset, have to reset it by hand... ugh!
      this.on( 'successfulsubmit', function(){
        self._updateCounter();
        self.toWidget.resetTo();
      });

      // This will make maxLength available to the textbox's validator
      self.bodyWidget.maxLengthValidation = self.maxLength;
    },

    manipulateValuesBeforeSubmit: function( values ){
      values.type = 'sms';
    },

   savedMessage: 'SMS queued!',

  });
});