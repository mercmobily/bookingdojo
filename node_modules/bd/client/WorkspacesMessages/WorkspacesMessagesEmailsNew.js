define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"
, "dijit/Editor"

, "hotplate/hotClientDojo/widgets/EditingWidget"
, "hotplate/hotClientDojo/widgets/ViewingWidget"
, "hotplate/hotClientDojo/widgets/BusyButton"
, "hotplate/hotClientDojo/storeConfig/ConfigVars"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/widgets/util"
, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/widgets/Dummy"

, "hotplate/bd/WorkspacesMessages/WorkspacesContactsTo"

], function(
  declare

, ValidationTextBox
, Editor

, EditingWidget
, ViewingWidget
, BusyButton
, ConfigVars
, globals
, util
, stores
, Dummy

, WorkspacesContactsTo

){
  return  declare([ EditingWidget, ViewingWidget ], {

    templateString: '' +
      '<div class="workspaces-messages-new workspaces-messages-new-emails">\n' +
      '  <div data-dojo-type="hotplate/hotClientDojo/widgets/Dummy"></div>\n' +

      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

      '    <div id="${id}_from" name="from" >\n' +
      '      <span class="from">From: </span>\n' +
      '      <span class="from-name-node" data-dojo-attach-point="fromNameNode"></span>\n' +
      '    </div>\n' +

      '    <div id="${id}_to" value="" name="to" data-dojo-attach-point="toWidget" data-dojo-type="hotplate/bd/WorkspacesMessages/WorkspacesContactsTo" data-dojo-props="workspaceId: this.workspaceId, contactId: this.contactId, recipientType:\'Emails\', storeParameters: this.storeParameters"></div>\n' +

      '    <input id="${id}_subject" class="workspaces-messages-subject" name="subject" data-dojo-type="dijit/form/ValidationTextBox" maxlength="128" data-dojo-props="placeHolder:\'Subject\', required:true" data-dojo-attach-point="subjectWidget" />\n' +

      '    <div id="${id}_bodyHtml" class="workspaces-messages-body" name="bodyHtml" data-dojo-attach-point="bodyWidgetNode"></div>\n' +

      '    <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Send" />' +
      '  </form>\n'+
      '</div>\n'+
      '',
    alertBarDomPlacement: 'first',
    resetOnSuccess: true, 

    storeName: 'workspacesMessages',

    postMixInProperties: function(){

      this.inherited(arguments);
      
      this.info = {
        workspacesContacts_from: {
          storeParameters: { workspaceId: this.workspaceId },
          id: vars.bd.userContact.id,
          storeName: 'workspacesContacts'
        }
      }
    },

    renderInfo: function(){
      this.fromNameNode.innerHTML = util.escapeHTML( this.info.workspacesContacts_from.data.firstName );
    },

    // The editor will only ever work if it's created on a visible TAB
    _onShow: function(){
      this.inherited(arguments);

      if( ! this.editorInitialised ){

        this.bodyWidget = new Editor({ name: 'bodyHtml', height:'150px' }, this.bodyWidgetNode );
        this.bodyWidget.startup();
        this.editorInitialised = true;
      }
    },

    postCreate: function(){
      this.inherited(arguments);
      var self = this;

      self.toWidget.set( 'value', self.contactObject ? self.contactObject.mainEmailId : null );

      // Editor doesn't implement reset, have to reset it by hand... ugh!
      this.on( 'successfulsubmit', function(){
        self.bodyWidget.set('value', '');
        self.toWidget.resetTo();
      });

    },

    manipulateValuesBeforeSubmit: function( values ){
      values.type = 'email';
    },

    savedMessage: 'Email queued!',

  });
});