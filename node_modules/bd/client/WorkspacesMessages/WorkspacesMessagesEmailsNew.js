define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"
, "dijit/Editor"

, "hotplate/bd/WorkspacesMessages/WorkspacesContactsTo"
, "hotplate/hotDojoWidgets/EditingWidget"

, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStoreConfig/ConfigVars"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoWidgets/util"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/Dummy"

], function(
  declare

, ValidationTextBox
, Editor

, WorkspacesContactsTo
, EditingWidget

, BusyButton
, ConfigVars
, globals
, util
, stores
, Dummy

){
  return  declare([ EditingWidget ], {

    templateString: '' +
      '<div class="workspaces-messages-new workspaces-messages-new-emails">\n' +
      '  <div data-dojo-type="hotplate/hotDojoWidgets/Dummy"></div>\n' +

      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

      '    <div id="${id}_from" name="from" >\n' +
      '      <span class="from">From: </span>\n' +
      '      <span class="from-name-node" data-dojo-attach-point="fromNameNode"></span>\n' +
      '    </div>\n' +

      '    <div id="${id}_to" value="" name="to" data-dojo-attach-point="to" data-dojo-type="hotplate/bd/WorkspacesMessages/WorkspacesContactsTo" data-dojo-props="defaultTo: this.contactObject, recipientType:\'Emails\'"></div>\n' +

      '    <input id="${id}_subject" class="workspaces-messages-subject" name="subject" data-dojo-type="dijit/form/ValidationTextBox" maxlength="128" data-dojo-props="placeHolder:\'Subject\', required:true" data-dojo-attach-point="subjectWidget" />\n' +

      '    <div id="${id}_bodyHtml" class="workspaces-messages-body" name="bodyHtml" data-dojo-attach-point="bodyWidgetNode"></div>\n' +

      '    <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Send" />' +
      '  </form>\n'+
      '</div>\n'+
      '',
    alertBarDomPlacement: 'first',
    resetOnSuccess: true, 

    // The editor will only ever work if it's created on a visible TAB
    _onShow: function(){
      this.inherited(arguments);

      if( ! this.editorInitialised ){

        this.bodyWidget = new Editor({ name: 'bodyHtml', height:'150px' }, this.bodyWidgetNode );
        this.bodyWidget.startup();
        this.editorInitialised = true;
      }
    },

    postCreate: function(){
      this.inherited(arguments);
      var self = this;

      self.to.set( 'value', self.contactObject.mainEmailId );

      // Editor doesn't implement reset, have to reset it by hand... ugh!
      this.on( 'successfulsubmit', function(){
        self.bodyWidget.set('value', '');
        self.to.resetTo();
      });

      // Have the first name...
      //var me = ConfigVars.workspacesUsersInfo._children.workspacesContacts[0];
      var me = vars.bd.userContact;
      self.fromNameNode.innerHTML = util.escapeHTML( me.firstName );
      // ...and make sure to update it if it changes
      var workspacesContactsStore = stores('workspacesContacts', { workspaceId: globals.workspaceId } ) ;
      workspacesContactsStore.on( 'update', function( event ){
        if( event.target.id == me.id ){
          self.fromNameNode.innerHTML = util.escapeHTML( event.target.firstName );
        }
      });

    },

    manipulateValuesBeforeSubmit: function( values ){
      values.type = 'email';
    },

    savedMessage: 'Email queued!',

  });
});