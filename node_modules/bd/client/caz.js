
define([
  "dojo/_base/declare"
, "dojo/dom-style"

, "hotplate/hotDojoWidgets/widgets"

, "hotplate/bd/WorkspacesContacts/WorkspacesContactsInfo"
, "hotplate/bd/WorkspacesContacts/WorkspacesContactsEmails"

], function(
  declare
, domStyle

, widgets

, WorkspacesContactsInfo
, WorkspacesContactsEmails

){

  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div class="workspaces-contacts">\n' +
      '  <div data-dojo-attach-point="workspacesContactsInfoNode"></div>\n'+
      '  <div data-dojo-attach-point="workspacesContactsMoreNode" class="more">\n'+
      '    <div class="box">\n' +
      '      <p class="boxTitle">Contactable by...</p>\n' +

      '      <div class="email-side">\n' +
      '        <p class="email">Email</p>\n' +
      '        <div data-dojo-attach-point="workspacesContactsEmailsNode"></div>\n'+
      '      </div>\n' +

      '      <div class="address-side">\n' +
      '      </div>\n' +
      '    </div>\n' +

      '  </div>\n' +
      '</div>\n' +
      '',


    postCreate: function(){
      this.inherited(arguments);

      // Logic to add stuff to the form will go here
      var self = this;

      // Create the workspaceContacts widget, passing through all of the
      // grid's info
      self.workspacesContactsInfoWidget = new WorkspacesContactsInfo( { 
        storeParameters: self.storeParameters,
        storeName: self.storeName,
        recordId: self.recordId,
      }, self.workspacesContactsInfoNode );
      self.workspacesContactsInfoWidget.startup();
      
      // On successfulcreation, any sub-widgets will finally be able
      // to exist
      self.workspacesContactsInfoWidget.on( 'successfulcreation', function( e ){

        // Create the sub-widget and start it up
        self.workspacesContactsEmailsWidget = new WorkspacesContactsEmails({
          storeParameters: self.storeParameters,
          storeExtraParameters: { contactId: self.workspacesContactsInfoWidget.recordId },
          'class': 'workspaces-contacts-emails small-editable-list-autoheight',
        }, self.workspacesContactsEmailsNode );

        domStyle.set( self.workspacesContactsMoreNode, { display: 'block' } );
        self.workspacesContactsEmailsWidget.startup();

      });

      // If the father widget already has a recordId, then
      // emit an artificial successfulcreation event so that
      // the dependant widget is placed there immediately
      //if( self.workspacesContactsInfoWidget.recordId ){
      //  self.workspacesContactsInfoWidget.emit( 'successfulcreation', { bubble: false } );
      //}




    }
  });


});

