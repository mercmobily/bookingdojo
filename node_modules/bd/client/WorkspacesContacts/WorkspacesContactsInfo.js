define([

  "dojo/_base/declare"

, "dijit/form/Form"
, "dijit/form/ValidationTextBox"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoGlobals/globals"

], function(

  declare

, Form
, ValidationTextBox

, stores
, BusyButton
, EditingWidget
, globals

){

  return declare( [ EditingWidget ], {

    storeName: 'WorkspacesContacts',
    store: stores( 'WorkspacesContacts', { workspaceId: globals.workspaceId } ),

    templateString: '' +
        '<div>\n' +
        '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
        '    <div class="inputField">\n' +
        '      <label for="${id}_firstName">Name</label>\n' +
        '      <input id="${id}_firstName" name="firstName" data-dojo-type="dijit/form/ValidationTextBox" size="25" maxlength="50" />\n' +
        '    </div>\n' +

        '    <div class="inputField">\n' +
        '      <label for="${id}_middleName">Middle Name</label>\n' +
        '      <input id="${id}_middleName" name="middleName" data-dojo-type="dijit/form/ValidationTextBox" size="10" maxlength="50" />\n' +
        '    </div>\n' +

        '    <div class="inputField">\n' +
        '      <label for="${id}_lastName">Last Name</label>\n' +
        '      <input id="${id}_lastName" name="lastName" data-dojo-type="dijit/form/ValidationTextBox" size="10" maxlength="50" />\n' +
        '    </div>\n' +
        '    <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" />\n' +
        '  </form>\n' +
        '</div>\n'+
        '',

    constructor: function(){
    },  
  });
});




/*

define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

, "hotplate/bd/Contacts/WorkspaceContactsEmails"

], function(
  declare

, ValidationTextBox

, put

, commonMixins
, widgets
, TempDialog
, EditingWidget
, EditableList
, BusyButton
, stores
, globals

, WorkspaceContactsEmails

){

  var formTemplate =  '' +

        '<div>\n' +
        '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
        '    <div class="inputField">\n' +
        '      <label for="${id}_firstName">Name</label>\n' +
        '      <input id="${id}_firstName" name="firstName" data-dojo-type="dijit/form/ValidationTextBox" size="25" maxlength="50" />\n' +
        '    </div>\n' +

        '    <div class="inputField">\n' +
        '      <label for="${id}_middleName">Middle Name</label>\n' +
        '      <input id="${id}_middleName" name="middleName" data-dojo-type="dijit/form/ValidationTextBox" size="10" maxlength="50" />\n' +
        '    </div>\n' +

        '    <div class="inputField">\n' +
        '      <label for="${id}_lastName">Last Name</label>\n' +
        '      <input id="${id}_lastName" name="lastName" data-dojo-type="dijit/form/ValidationTextBox" size="10" maxlength="50" />\n' +
        '    </div>\n' +
        '    <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" />\n' +
        '  </form>\n' +
        '</div>\n'+
        '';


  return declare( [ EditableList ], {

    refreshOnSubmit: false,
    immediateRefresh: true,

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row', ( object.lastName ? object.lastName + ', ' : '' ) + object.firstName + ( object.middleName ? ' ' + object.middleName : '' ) );
        return row;
      },
      queryOptions: { placeNew: 'last' },
      dndParams: { selfAccept: false },
    }),

    EditingConstructor: declare([ EditingWidget ], {
      templateString: formTemplate,
      alertBarDomPlacement: 'last',
      postCreate: function(){
        this.inherited(arguments);
        var self = this;

        self.workspaceContactsEmailsWidget = new WorkspaceContactsEmails( { contactId: self.recordId }, self.workspaceContactsEmailsNode );
        self.workspaceContactsEmailsWidget.startup();
        
        //console.log( self.workspaceContactsEmailsWidget );
        //console.log( self.workspaceContactsEmailsWidget.domNode );
      },

    }),

    AddingConstructor: declare( [ EditingWidget ], {
      templateString: formTemplate,
      resetOnSuccess: true,
      postCreate: function(){
        this.inherited(arguments);

        var self = this;

        self.on('successfulsubmit', function( e ){
          debugger;
          self.workspaceContactsEmailsWidget = new WorkspaceContactsEmails( { contactId: e.received.id }, self.workspaceContactsEmailsNode );
        });

      },

      alertBarDomPlacement: 'last',
    }),

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New" />\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    storeName: 'WorkspaceContacts',
    store: stores( 'WorkspaceContacts', { workspaceId: globals.workspaceId } ),
    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    //addingWidgetRegion: 'top',
    gutters: false,

    buttonsPosition: 'after', // or "top" or "bottom"

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingConstructorInDialog( 'New contact' );
      });

   },


  } );

});

*/
