define([

  "dojo/_base/declare"
, "dojo/date/stamp"

, "dijit/form/Form"
, "dijit/form/ValidationTextBox"
, "dijit/form/DateTextBox"
, "dijit/form/CheckBox"
, "dojo/dom-style"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoGlobals/globals"

], function(

  declare
, stamp

, Form
, ValidationTextBox
, DateTextBox
, CheckBox
, domStyle

, stores
, BusyButton
, EditingWidget
, globals

){

  var UTCDateTextBox = declare( 'UTCDateTextBox', [ DateTextBox ], {

    _getValueAttr: function(){
      var ov = this.inherited(arguments);
      //console.log("GET Value before", ov );
      if( ov ){
        ov.setTime( ov.getTime() - ov.getTimezoneOffset() * 60 * 1000 ); 
      }
      //console.log("GET Value after:", ov );
      return ov;

    },

    _setValueAttr: function( value, priorityChange, formattedValue){


      //console.log("SET ISO value:", value );
      var v = stamp.fromISOString( value );
      //console.log("SET Value before:", v );
      if( v ){
        v.setTime( v.getTime() + v.getTimezoneOffset() * 60 * 1000 );  
        value = v;
      }
      //console.log("SET Value after:", v );
       
      this.inherited(arguments);
    },

 
  });

  return declare( [ EditingWidget ], {

    _showPersonalFields: true,

    templateString: '' +
      '<div class="workspaces-contacts-info">\n' +
      '  <div class="box">\n'+
      '    <p class="boxTitle">Name</p>\n' +


      '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

      '      <div class="inputField is-company">\n' +
      '        <label for="${id}_isCompany">Company?</label>\n' +
      '        <input id="${id}_isCompany" name="isCompany" data-dojo-type="dijit/form/CheckBox" data-dojo-attach-point="isCompanyWidget" data-dojo-props: "" value="on" tabindex="10" />\n' +
      '      </div>\n' +

      '      <div class="inputField name">\n' +
      '        <label for="${id}_firstName">Name</label>\n' +
      '        <input id="${id}_firstName" name="firstName" data-dojo-type="dijit/form/ValidationTextBox" size="25" maxlength="50" tabindex="1"/>\n' +
      '      </div>\n' +

      '      <div class="inputField middle-name" data-dojo-attach-point="middleNameField">\n' +
      '        <label for="${id}_middleName">Middle Name</label>\n' +
      '        <input id="${id}_middleName" name="middleName" data-dojo-type="dijit/form/ValidationTextBox" data-dojo-attach-point="middleNameWidget" size="10" maxlength="50" tabindex="2" />\n' +
      '      </div>\n' +

      '      <div class="inputField last-name" data-dojo-attach-point="lastNameField">\n' +
      '        <label for="${id}_lastName">Last Name</label>\n' +
      '        <input id="${id}_lastName" name="lastName" data-dojo-type="dijit/form/ValidationTextBox" data-dojo-attach-point="lastNameWidget" size="10" maxlength="50" tabindex="3" />\n' +
      '      </div>\n' +

      '      <div class="inputField date-of-birth" data-dojo-attach-point="dateOfBirthField">\n' +
      '        <label for="${id}_dateOfBirth">Date Of Birth</label>\n' +
      '        <input class="input" id="${id}_dateOfBirth" name="dateOfBirth" data-dojo-type="UTCDateTextBox" data-dojo-attach-point="dateOfBirthWidget" tabindex="4" />\n' +
      '      </div>\n' +

      '      <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" tabindex="5" />\n' +
      '    </form>\n' +
      '  </div>\n'+
      '</div>\n'+
      '',


      // Makes sure that isCompany is sent as a boolean flag
      manipulateValuesBeforeSubmit: function( values ){
        values.isCompany = values.isCompany.indexOf( 'on' ) !== -1;

        if( ! this._showPersonalFields ){
          delete values.dateOfBirth;
          delete values.lastName;
          delete values.middleName;
        }
        if( values.dateOfBirth === null ) delete values.dateOfBirth;

      },

      // Rests the isCompany widget depending on value fetched
      afterFormWidgetSet: function( res ){
        if( res.isCompany ) this.isCompanyWidget.set('value', true );
      },

      // Will hide personal info if needed
      _togglePersonalInfo: function( hide ){

        if( hide ){
          domStyle.set( this.dateOfBirthField, 'display', 'none' );
          domStyle.set( this.lastNameField, 'display', 'none' );
          domStyle.set( this.middleNameField, 'display', 'none' );
          this._showPersonalFields = false;
        } else {
          domStyle.set( this.dateOfBirthField, 'display', this.dateOfBirthFieldOriginalStyle );
          domStyle.set( this.lastNameField, 'display', this.lastNameFieldOriginalStyle );
          domStyle.set( this.middleNameField, 'display', this.middleNameFieldOriginalStyle );
          this._showPersonalFields = true;
        }

      },

      postCreate: function(){
        this.inherited( arguments );
        var self = this;

        // Set the default value for popup to sometime in the past if it's a new record
        if( ! self.recordId || ! self.dateOfBirthWidget.get('value') ){
          self.dateOfBirthWidget.set( 'dropDownDefaultValue', new Date('1/1/1971') );
        }

        // Get original styles for the widgets that will need to disappear
        self.dateOfBirthFieldOriginalStyle = domStyle.get( this.dateOfBirthField, 'display' );
        self.lastNameFieldOriginalStyle = domStyle.get( this.lastNameField, 'display' );
        self.middleNameFieldOriginalStyle = domStyle.get( this.middleNameField, 'display' );

        // If it's an existing record, determine whether to show extra fields
        if( self.recordId ){
          self._togglePersonalInfo( self.isCompanyWidget.get('value') );
        }

        self.isCompanyWidget.on( 'change', function( status ){
          self._togglePersonalInfo( status );
        });

      },

  });
});


