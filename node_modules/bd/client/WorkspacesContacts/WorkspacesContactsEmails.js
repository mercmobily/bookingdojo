define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare

, ValidationTextBox

, put

, commonMixins
, EditingWidget
, EditableList
, BusyButton
, stores
, globals

){

  var templateString = '' +
    '<div>\n' +
    '  <div class="inline-form">\n' +
    '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
    '      <input id="${id}_email" name="email" data-dojo-type="dijit/form/ValidationTextBox" maxlength="70" data-dojo-props="required: true" data-dojo-attach-point="emailWidget" />\n' +
    '      <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" />' +
    '    </form>\n'+
    '  </div>\n'+
    '</div>\n'+
    '';

  return declare( [ EditableList ], {

    // Sets the `storeParameters` variable depending on the passed contactId
    constructor: function( p ){
      this.storeParameters = { workspaceId: globals.workspaceId, contactId: p.contactId };
    },

    refreshOnSubmit: false,
    immediateRefresh: false,

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row', object.email );
        return row;
      },

      queryOptions: { placeNew: 'last' },
      dndParams: { selfAccept: true },
    }),

    EditingConstructor: declare([ EditingWidget ], {
      templateString: templateString,
      alertBarDomPlacement: 'last',
    }),

    AddingConstructor: declare( [ EditingWidget ], {
      templateString: templateString,
      resetOnSuccess: true,
      alertBarDomPlacement: 'last',
    }),

    storeName: 'WorkspacesContactsEmails',
    editingWidgetPlacement: 'inline',
    multipleEditingAllowed: false,
    addingWidgetRegion: 'top',
    gutters: false,
    buttonsPosition: 'after', // or "top" or "bottom"
  } );

});



