define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"
, "dijit/form/Textarea"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

], function(
  declare

, ValidationTextBox
, Textarea

, put

, commonMixins
, EditingWidget
, widgets
, EditableList
, BusyButton
, stores
, globals

){

  var templateString = '' +
    '<div class="workspaces-contacts-addresses-dialog">\n' +
    '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

    '    <div class="input-field street">\n' +
    '      <label for="${id}_street">Street</label>\n' +
    '      <input class="field" id="${id}_street" name="street" data-dojo-type="dijit/form/Textarea" cols="25" />\n' +
    '    </div>\n' +

    '    <div class="input-field po-box">\n' +
    '      <label for="${id}_poBox">PO BOX</label>\n' +
    '      <input class="field" id="${id}_poBox" name="poBox" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <div class="input-field local-area">\n' +
    '      <label for="${id}_localArea">Local area</label>\n' +
    '      <input class="field" id="${id}_localArea" name="localArea" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <div class="input-field city">\n' +
    '      <label for="${id}_city">City</label>\n' +
    '      <input class="field" id="${id}_city" name="city" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <div class="input-field county">\n' +
    '      <label for="${id}_county">County/Area</label>\n' +
    '      <input class="field" id="${id}_county" name="county" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <div class="input-field postcode">\n' +
    '      <label for="${id}_postcode">ZIP/Postcode</label>\n' +
    '      <input class="field" id="${id}_postcode" name="postcode" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <div class="input-field country">\n' +
    '      <label for="${id}_country">Country/Region</label>\n' +
    '      <input class="field" id="${id}_country" name="country" data-dojo-type="dijit/form/ValidationTextBox" maxlength="64" />\n' +
    '    </div>\n' +

    '    <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Save" />' +
    '    </form>\n'+
    '</div>\n'+
    '';

  var formatAddress = function( o ){
    var e = put('div.address-view' );

    var longRes = '';
    [ 'street', 'poBox', 'localArea', 'city', 'county', 'postcode', 'country' ].forEach( function( f ){
      longRes = longRes + o[ f ];
    }); 

    if( longRes == '' ){
      put( e, 'span.empty', "Address is empty" );
      return e;
    }
  
    if( typeof( o.street === 'string' ) && o.street ){
      var streetSpan = put( e, 'span.street' );
      o.street.split(/\n/ ).forEach( function( streetLine ){
       put( streetSpan, 'span.street-line', streetLine );
      });
    }
 
    if( typeof( o.poBox ) === 'string' && o.poBox ) put( e, 'span.poBox', o.poBox );

    var addressGroup = put( e, 'span.address-group' );
    [ 'localArea', 'city', 'county', 'postcode' ].forEach( function(fieldName ){
      if( typeof( o[ fieldName ] === 'string' ) && o[ fieldName ] ) put( addressGroup, 'span.' + fieldName, o[ fieldName ] );
    });

    if( typeof( o.country ) === 'string' && o.country ) put( e, 'span.country', o.country );

    return e;
  }

  return declare( [ EditableList ], {

    refreshOnSubmit: false,
    immediateRefresh: false,
    closeDialogAfterSubmit: true,

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row', formatAddress( object ) );
        return row;
      },
      queryOptions: { placeNew: 'last' },
      dndParams: { selfAccept: true },
      refresh: function(){
        this.inherited( arguments );
      },

    }),

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" class="new-address" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New address..." />\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    EditingConstructor: declare([ EditingWidget ], {
      templateString: templateString,
      alertBarDomPlacement: 'last',
      resetOnSuccess: true,
    }),

    storeName: 'workspacesContactsAddresses',
    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    buttonsPosition: 'bottom',

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingConstructorInDialog( 'New address' );
      });
    },



  });

});



