define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"

, "dgrid/List"
, "dgrid/OnDemandList"
, "dgrid/Selection"
, "dgrid/Keyboard"
, "dgrid/util/mouse"
, "dgrid/extensions/DijitRegistry"
, "dgrid/extensions/DnD"
, "dojo/dnd/Source"

, "put-selector/put"

, "hotplate/hotDojoAuth/panels/Manager"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoDgridWidgets/StoreSelect"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoWidgets/widgets"

], function(

  declare

, ValidationTextBox

, List
, OnDemandList
, Selection
, Keyboard
, mouse
, DijitRegistry
, DnD
, DnDSource
, put

//, DestroyableBladeTemplatedContainer
, Manager
, EditingWidget
, EditableList
, StoreSelect
, BusyButton
, stores
, globals
, widgets
//, _BladeTemplatedMixin

){

  return declare( [ widgets.DestroyableTemplatedContainer ], {

    templateString: '' +
      '<div>\n' +
      '  <form>\n'+
      '    <table>\n'+
      '      <tr>\n'+
      '        <td>\n'+
      '          <div data-dojo-attach-point="workspacesCategoriesNode"></div>\n'+
      '          <div data-dojo-attach-point="workspacesCategoriesSelectNode"></div>\n'+
      '        <td>\n'+
      '          <div data-dojo-attach-point="usersCategoriesNode"></div>\n'+
      '          <div data-dojo-attach-point="usersCategoriesSelectNode"></div>\n'+
      '        <td>\n'+
      '          <div data-dojo-attach-point="workspacesUsersCategoriesNode"></div>\n'+
      '          <div data-dojo-attach-point="workspacesUsersCategoriesSelectNode"></div>\n'+
      '        </td>\n'+
      '      </tr>\n'+
      '    </table>\n'+
      '  </form>\n'+ 
      '  <div data-dojo-attach-point="nonConfigNode"></div>\n'+
      '  <div data-dojo-attach-point="nonConfigSelectNode"></div>\n'+
      '  <div data-dojo-attach-point="managerNode"></div>\n'+
      '</div>\n'+
      '',


    postCreate:function(){
      var that = this, q;

      this.inherited(arguments);

    },

    startup: function(){
      this.inherited(arguments);
      var counter = 0;

      return;

      var strategiesStore = stores( 'UsersStrategies', { userId: globals.userId } );

      var manager = new Manager( {}, this.managerNode );
      manager.startup();
     
      this.workspacesCategories = new EditableList({ 

        refreshOnSubmit: false,
        immediateRefresh: true,

        className: 'category-list',

        ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry, DnD ], {

          renderRow: function(object, options){
            var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
            return row;
          },

          postCreate: function(){
            var self = this;
            this.inherited(arguments);
            this.set( 'queryOptions', { placeNew: 'last' } );
            // this.set( 'queryOptions',{ before: { _id: '514aba99849418630e0001b8' }  } );
            // this.set( 'queryOptions', { placeNew: 'none', sort: [ { attribute:'name' } ]  } );
            // this.set( 'queryOptions',{ placeNew: 'last' } );
            // this.set( 'queryOptions',{ before: null  } );
          },

          dndParams: { selfAccept: true, copyOnly: false, selfCopy: false },
        }),

        EditingConstructor: declare([ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputfield">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%;" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />' +
            '      </div>\n'+
            '    </form>\n'+
            '  </div>\n'+
            '</div>\n'+
            '',
            alertBarDomPlacement: 'last',
            startup: function(){
              this.inherited(arguments);
              this.nameWidget.focus();
            },

        }),

        AddingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputField">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" style="width:5%;padding-left: 10px;" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Add" />\n' +
            '      </div>\n'+
            '    </form>\n'+
            '  </div>\n'+
            '</div>\n'+
            '',
            resetOnSuccess: true,
            alertBarDomPlacement: 'last',
        }),

        storeName: 'ContactsCategories',
        storeParameters: { workspaceId: globals.workspaceId },
        editingWidgetPlacement: 'inline',
        multipleEditingAllowed: true,
        addingWidgetRegion: 'top',
        gutters: false,

        buttonsPosition: 'after', // or "top" or "bottom"

      }, this.workspacesCategoriesNode );

      this.workspacesCategories.startup();


      this.usersCategories = new EditableList({ 

        refreshOnSubmit: false,

        className: 'category-list',

        ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry, DnD ], {

          renderRow: function(object, options){
            var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
            return row;
          },

          postCreate: function(){
            var self = this;
            this.inherited(arguments);
            this.set( 'queryOptions', { placeNew: 'last' } );
          },

          //dndSourceType: "name",
          dndParams: { selfAccept: false, copyOnly: true },

        }),

        EditingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputfield">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%;" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />\n' +
            '      </div>\n' +
            '    </form>\n' +
            '  </div>\n' +
            '</div>\n' +
            '',
            alertBarDomPlacement: 'last',
            startup: function(){
              this.inherited(arguments);
              this.nameWidget.focus();
            },

        }),

        AddingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class=".inputField">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" style="width:5%;padding-left: 10px;" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Add" />' +
            '      </div>\n' +
            '    </form>\n' +
            '  </div>\n' +
            '</div>\n'+
            '',
            resetOnSuccess: true,
            alertBarDomPlacement: 'last',
        }),

        storeName: 'UsersCategories',
        store: stores( 'UsersCategories', { userId: globals.userId } ),
        editingWidgetPlacement: 'inline',
        multipleEditingAllowed: true,
        addingWidgetRegion: 'top',
        gutters: false,

        buttonsPosition: 'after', // or "top" or "bottom"

      }, this.usersCategoriesNode );

      this.usersCategories.startup();



      this.workspacesUsersCategories = new EditableList({ 

        refreshOnSubmit: false,

        className: 'category-list',

        ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

          renderRow: function(object, options){
            var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
            return row;
          },

          postCreate: function(){
            var self = this;
            this.inherited(arguments);
            this.set( 'queryOptions', { placeNew: 'first' } );
          }

        }),

        EditingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputfield">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%;" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />\n' +
            '      </div>\n' +
            '    </form>\n' +
            '  </div>\n' +
            '</div>\n' +
            '',
            alertBarDomPlacement: 'last',
            startup: function(){
              this.inherited(arguments);
              this.nameWidget.focus();
            },

        }),

        AddingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div type="inputField">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" style="width:5%;padding-left: 10px;" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Add" />\n' +
            '      </div>\n' +
            '    </form>\n' +
            '  </div>\n' +
            '</div>\n' +
            '',
            resetOnSuccess: true,
            alertBarDomPlacement: 'last',
        }),

        editingWidgetPlacement: 'dialog',
        storeName: 'WorkspacesUsersCategories',
        store: stores( 'WorkspacesUsersCategories', { userId: globals.userId, workspaceId: globals.workspaceId } ),
        editingWidgetPlacement: 'dialog',
        multipleEditingAllowed: false,
        addingWidgetRegion: 'bottom',
        gutters: false,

        buttonsPosition: 'after', // or "top" or "bottom"

      }, this.workspacesUsersCategoriesNode );

      this.workspacesUsersCategories.startup();


      this.nonConfig = new EditableList({ 

        refreshOnSubmit: false,

        className: 'category-list',

        ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

          renderRow: function(object, options){
            var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
            return row;
          },

          postCreate: function(){
            var self = this;
            this.inherited(arguments);
            this.set( 'queryOptions', { placeNew: 'first' } );
          }

        }),

        EditingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputfield">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%;" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />\n' +
            '      </div>\n' +
            '    </form>\n' +
            '  </div>\n' +
            '</div>\n' +
            '',
            alertBarDomPlacement: 'last',
            startup: function(){
              this.inherited(arguments);
              this.nameWidget.focus();
            },

        }),

        AddingConstructor: declare( [ EditingWidget ], {
          templateString: '' +
            '<div>\n' +
            '  <div class="inline-form">\n' +
            '    <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +
            '      <div class="inputField">\n' +
            '        <input id="${id}_name" name="name" data-dojo-type="dijit/form/ValidationTextBox" style="width:100%" maxlength="50" data-dojo-props="required:true" data-dojo-attach-point="nameWidget" />\n' +
            '        <input class="form-submit" type="submit" style="width:5%;padding-left: 10px;" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Add" />\n' +
            '      </div>\n'+
            '    </form>\n'+
            '  </div>\n'+
            '</div>\n'+
            '',
            resetOnSuccess: true,
            alertBarDomPlacement: 'last',
        }),

        storeName: 'NonConfig',
        store: stores( 'NonConfig', { userId: globals.userId, workspaceId: globals.workspaceId } ),
        //editingWidgetPlacement: 'dialog',
        multipleEditingAllowed: false,
        addingWidgetRegion: 'bottom',
        gutters: false,

        buttonsPosition: 'after', // or "top" or "bottom"

      }, this.nonConfigNode );

      this.nonConfig.startup();


      this.workspacesCategoriesSelect =  new StoreSelect( {
        storeName: 'ContactsCategories',
        store: stores( 'ContactsCategories', { workspaceId: globals.workspaceId } ),
        baseClass: 'category-picker',
        // query: { name: "O" },
        queryOptions: { placeNew: 'last' },
        renderRow: function( object ){
          var row = put('div.row', object.name );
          return row;
        },
        // value: '514c6edcbbd8ca9f680000b2',
      }, this.workspacesCategoriesSelectNode );
      this.workspacesCategoriesSelect.startup();


      this.usersCategoriesSelect =  new StoreSelect( {
        storeName: 'UsersCategories',
        store: stores( 'UsersCategories', { userId: globals.userId } ),
        baseClass: 'category-picker',
        // query: { name: "O" },
        queryOptions: { placeNew: 'last' },
        renderRow: function( object ){
          var row = put('div.row', object.name );
          return row;
        },
        // value: '514c6edcbbd8ca9f680000b2',
      }, this.usersCategoriesSelectNode );
      this.usersCategoriesSelect.startup();

      this.workspacesUsersCategoriesSelect =  new StoreSelect( {
        storeName: 'WorkspacesUsersCategories',
        store: stores( 'WorkspacesUsersCategories', { workspaceId: globals.workspaceId, userId: globals.userId } ),
        baseClass: 'category-picker',
        // query: { name: "O" },
        queryOptions: { placeNew: 'last' },
        renderRow: function( object ){
          var row = put('div.row', object.name );
          return row;
        },
        // value: '514c6edcbbd8ca9f680000b2',
      }, this.workspacesUsersCategoriesSelectNode );
      this.workspacesUsersCategoriesSelect.startup();


      this.nonConfigSelect =  new StoreSelect( {
        storeName: 'NonConfig',
        store: stores( 'NonConfig', { workspaceId: globals.workspaceId, userId: globals.userId } ),
        baseClass: 'category-picker',
        queryOptions: { placeNew: 'last' },
        renderRow: function( object ){
          var row = put('div.row', object.name );
          return row;
        },
      }, this.nonConfigSelectNode );
      this.nonConfigSelect.startup();

    },

  });
});


                          /*
                          '  <button data-dojo-type="dijit/form/DropDownButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\',labelll:\'AND\'">\n'+
                          '     <span>Edit<b>!</b></span>\n'+
                          '       <span id="editMenu" data-dojo-type="dijit/Menu" >\n'+
                          '         <span id="cut" data-dojo-type="dijit/MenuItem" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\'">Cut</span>\n'+
                          '         <span id="paste" data-dojo-type="dijit/MenuItem" data-dojo-attach-point="otherButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconPaste\'">Paste</span>\n'+
                          '       </span>\n'+
                          '     </span>\n'+
                          '  </button>\n'+
                          */
 
