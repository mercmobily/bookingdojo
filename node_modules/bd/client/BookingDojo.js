define( [
  "dojo/_base/declare"
, "dojo/topic"

, "dijit/Dialog"
, "dijit/_OnDijitClickMixin"
, "dijit/layout/BorderContainer"
, "dijit/layout/TabContainer"
, "dijit/layout/ContentPane"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/_OverlayMixin"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoAuth/panels/Resume"
, "hotplate/hotDojoStoreConfig/ConfigVars"
, "hotplate/hotDojoWidgets/util"
, "hotplate/hotDojoComet/_TabRegisterMixin"
, "hotplate/hotDojoAuth/_ReLoginMixin"
, "hotplate/hotDojoWidgets/widgets"

, "hotplate/bd/WorkspacesUsersConfig"
, "hotplate/bd/WorkspacesConfig"
, "hotplate/bd/UsersConfig"
, "hotplate/bd/GodConfig"
, "hotplate/bd/Inbox"
, "hotplate/bd/Contacts"


], function(
  declare
, topic

, Dialog
, _OnDijitClickMixin
, BorderContainer
, TabContainer
, ContentPane

, stores
, _OverlayMixin
, globals
, Resume
, ConfigVars
, util
, _TabRegisterMixin
, _ReLoginMixin
, widgets

, WorkspacesUsersConfig
, WorkspacesConfig
, UsersConfig
, GodConfig
, Inbox
, Contacts

){
  var counter = 0;

  return declare( [ widgets.DestroyableTemplatedContainer, _OverlayMixin, _OnDijitClickMixin, _TabRegisterMixin ], {

    workspaceName: vars.hotDojoAppContainer.workspaceName,

    templateString: '' +
      '<div>\n' +
      '  <div class="bookingDojo" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">\n' +
      '    <div class="appHeader" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">\n' +
      '      <span>Booking Dojo</span>\n'+
      '      <span id="user-name" data-dojo-attach-point="userName" data-dojo-attach-event="ondijitclick:showUserConfig"></span>\n' +
      '    </div>\n' +
      '    <div data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">\n' +
      '      <div class="scrollable" data-dojo-attach-point="inboxWidget" data-dojo-type="hotplate/bd/Inbox" data-dojo-props="title:\'Inbox\'" class="inbox"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="search" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="calendar" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="contacts" data-dojo-type="hotplate/bd/Contacts" data-dojo-props="title:\'Contacts\'"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="workspacesUsersConfig" data-dojo-type="hotplate/bd/WorkspacesUsersConfig" data-dojo-props="title: \'Your Config\'"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="workspacesConfig" data-dojo-type="hotplate/bd/WorkspacesConfig" data-dojo-props="title: \'Admin\'"></div>\n' +
      '      <div class="scrollable" data-dojo-attach-point="godConfig" data-dojo-type="hotplate/bd/GodConfig" data-dojo-props="title: \'God\'"></div>\n' +
      '    </div>\n' +
      '  </div>\n' +
      '</div>\n' +
      '',

    showUserConfig: function(){
      this.userDialog.show();
    },

    postCreate: function(){
      var self = this;

      this.inherited(arguments);

      // Place the user's name at the top. Taken from configuration. If it changes,
      // it's updated in realtime
      self.userName.innerHTML = util.escapeHTML( ConfigVars.UsersInfo.name );
      //self.userName.innerHTML = util.escapeHTML( 'USER' );
      topic.subscribe( 'configChange/UsersInfo', function( record ){
        self.userName.innerHTML = util.escapeHTML( record.name );
      });     

      // The user-wide configuration dialog
      this.userDialog = new Dialog( {
        title: "Your account",
      });
      var u;
      this.userDialog.addChild( u = new UsersConfig );
      //this.userDialog.on('show', function( e ){
      //  u._onShow();
      //});
      this.userDialog.startup();
    },

    startup: function(){
      this.inherited(arguments);

    },

  });

});

/*
 */
