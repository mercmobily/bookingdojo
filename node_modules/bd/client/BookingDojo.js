define([
   "dojo/_base/declare",
   "dojo/topic",

   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",
   "dijit/layout/BorderContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",

   "hotplate/hotDojoWidgets/TempDialog",
   "hotplate/hotDojoStores/stores",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoComet/messages",
   "hotplate/hotDojoGlobals/globals",
   "hotplate/hotDojoAuth/panels/Resume",
   "hotplate/hotDojoJade/DestroyableJadeTemplatedContainer",
   "hotplate/hotDojoStoreConfig/ConfigVars",
   "hotplate/hotDojoWidgets/util",

   "hotplate/bd/WorkspaceUserConfig",
   "hotplate/bd/WorkspaceConfig",
   "hotplate/bd/UserConfig",
   "hotplate/bd/Dashboard",
   "hotplate/bd/Contacts",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , topic

     , Dialog
     , _OnDijitClickMixin
     , BorderContainer
     , TabContainer
     , ContentPane

     , TempDialog
     , stores
     , _OverlayMixin
     , messages
     , globals
     , Resume
     , DestroyableJadeTemplatedContainer
     , ConfigVars
     , util

     , WorkspaceUserConfig
     , WorkspaceConfig
     , UserConfig
     , Dashboard
     , Contacts


 ){
    var counter = 0;

    // Create the "login" pane, based on a normal ContentPane
    return declare( [ DestroyableJadeTemplatedContainer, _OverlayMixin, _OnDijitClickMixin ], {
    //return declare( [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin, _OverlayMixin, _OnDijitClickMixin ], {

      workspaceName: vars.hotDojoAppContainer.workspaceName,

      templateString: '' +
        'div\n' +
        '  div.bookingDojo(data-dojo-type="dijit/layout/BorderContainer", data-dojo-props="gutters:false, design: \'headline\'")\n' +
        '    div.appHeader(data-dojo-type="dijit/layout/ContentPane", data-dojo-props="gutters:false, region: \'top\'")\n' +
        '      span Booking Dojo\n'+
        '      span(data-dojo-attach-point="userName", style="cursor:pointer", data-dojo-attach-event="ondijitclick:showUserConfig")\n' +

        '    div(data-dojo-attach-point="mainTabContainer", data-dojo-type="dijit/layout/TabContainer", data-dojo-props="region: \'center\', tabPosition: \'left-h\'")\n' +
        '      div(data-dojo-attach-point="widgetDashboard", data-dojo-type="hotplate/bd/Dashboard", data-dojo-props="title:\'Dashboard\'", class="dashboard")\n' +
        '      div(data-dojo-attach-point="inbox",data-dojo-type="dijit/layout/ContentPane",data-dojo-props="title: \'Inbox\'")\n' +
        '      div(data-dojo-attach-point="search",data-dojo-type="dijit/layout/ContentPane",data-dojo-props="title:\'Search\'")\n' +
        '      div(data-dojo-attach-point="calendar",data-dojo-type="dijit/layout/ContentPane",data-dojo-props="title:\'Calendar\'")\n' +
        '      div(data-dojo-attach-point="contacts",data-dojo-type="hotplate/bd/Contacts",data-dojo-props="title:\'Contacts\'")\n' +
        '      div(data-dojo-attach-point="workspaceUserConfig",data-dojo-type="hotplate/bd/WorkspaceUserConfig",data-dojo-props="title: \'Your Config\'")\n' +
        '      div(data-dojo-attach-point="workspaceConfig",data-dojo-type="hotplate/bd/WorkspaceConfig",data-dojo-props="title: \'Admin\'")\n' +
        '',

				//'       <span>Booking Dojo</span> <span data-dojo-attach-event="onclick:testRun">TestRun</span> <span data-dojo-attach-point="userName" style="cursor:pointer" data-dojo-attach-event="ondijitclick:showUserConfig"></span> <div class="logoutButton" data-dojo-type="hotplate/hotDojoAuth/LogoutButton" data-dojo-props="workspaceName: \'${workspaceName}\'"></div>' +

        showUserConfig: function(){
          this.userDialog.show();
        },

 
        /*
          This the first "real" function run within the application. It's run just after
          creating the main application widget (which contains everything else). it's
          responsible of registering this particular tab with the messaging service
          to get COMET notices, and make sure self store-based information (in this case,
          the username) will change of the store changes.
        */
        postCreate:function(){
          var self = this, q;

          this.inherited(arguments);

          // Make sure registerForMessages() is successful with overlay
          // (User will click on overlay to retry)
          this.set( 'overlayed', true );
          this.set( 'overlayClickable', false );
          registerForMessages();
          //
          this.on( 'overlayClick', function( e ){
            registerForMessages();
          });
          //
          function registerForMessages(){
            messages.register().then(
              function( res ){
                self.set( 'overlayed', false );
              },
              function( err ){
                self.set( 'overlayClickable', true );
              }
            );
          };
          window.onbeforeunload = function( e ) {
            messages.unregister();
          }


          // Place the user's name at the top. Taken from configuration. If it changes,
          // it's updated in realtime
          self.userName.innerHTML = util.escapeHTML( ConfigVars.UsersConfig.name );
          topic.subscribe( 'configChange/UsersConfig', function( record ){
            self.userName.innerHTML = util.escapeHTML( record.name );
          });     

          // The user dialog
          this.userDialog = new Dialog( {
            title: "Your account",
          });
          this.userDialog.addChild( new UserConfig );
          this.userDialog.startup();

          // Resume dialog, when the application emits a 'forbidden' topic.
          // The dialog needs to close itself when it receives a 'resumed' topic too
          topic.subscribe( 'hotDojoSubmit/unauthorized', function( ){

            var tempDialog = new TempDialog( { 
              title: "Authenticate",
              hideOn: "hotDojoAuth/resuming",
            } );

            // Make a dialog with the strategies store
            // var strategiesStore = stores( 'userStrategies', { userId: globals.userId } );
            var r = new Resume(); //  { store: strategiesStore } );
            tempDialog.addChild( r );
            tempDialog.startup();
          });

        },

        startup: function(){
          this.inherited(arguments);

        },

   });

});


