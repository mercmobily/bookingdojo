define( [
  "dojo/_base/declare"
, "dojo/topic"

, "dijit/Dialog"
, "dijit/_OnDijitClickMixin"
, "dijit/registry"
, "dijit/layout/BorderContainer"
, "dijit/layout/TabContainer"
, "dijit/layout/ContentPane"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/_OverlayMixin"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoAuth/panels/Resume"
, "hotplate/hotDojoStoreConfig/ConfigVars"
, "hotplate/hotDojoWidgets/util"
, "hotplate/hotDojoComet/_TabRegisterMixin"
, "hotplate/hotDojoAuth/_ReLoginMixin"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"

, "hotplate/bd/WorkspacesUsersConfig"
, "hotplate/bd/WorkspacesConfig"
, "hotplate/bd/UsersConfig"
, "hotplate/bd/GodConfig"
, "hotplate/bd/Inbox"
, "hotplate/bd/WorkspacesContactsList"

, "hotplate/bd/WorkspacesContacts"


], function(
  declare
, topic

, Dialog
, _OnDijitClickMixin
, registry
, BorderContainer
, TabContainer
, ContentPane

, stores
, _OverlayMixin
, globals
, Resume
, ConfigVars
, util
, _TabRegisterMixin
, _ReLoginMixin
, widgets
, TempDialog

, WorkspacesUsersConfig
, WorkspacesConfig
, UsersConfig
, GodConfig
, Inbox
, WorkspacesContactsList

, WorkspacesContacts

){
  var counter = 0;

  return declare( [ widgets.DestroyableTemplatedContainer, _OverlayMixin, _OnDijitClickMixin, _TabRegisterMixin ], {

    workspaceName: vars.hotDojoAppContainer.workspaceName,

    templateString: '' +
      '<div class="booking-dojo-widget">\n' +

      // BorderContainer that will contain the application header and the application's main contents
      '  <div class="booking-dojo-header-and-app" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">\n' +

      // Application header, placed in region "top"
      '    <div class="app-header" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">\n' +
      '      <span>Booking Dojo</span>\n'+

      '      <span id="user-name" data-dojo-attach-point="userName" data-dojo-attach-event="ondijitclick:showUserConfig"></span>\n' +
      '    </div>\n' +

      // Application contents, placed in region "center" (a tabContainer with sub-widgets)
      '    <div id="main-tab-container" data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">\n' +
      '      <div data-dojo-type="hotplate/bd/Inbox" data-dojo-props="title:\'Inbox\'" class="inbox"></div>\n' +
      '      <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>\n' +
      '      <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/WorkspacesContactsList" data-dojo-props="title:\'Contacts\'"></div>\n' + 
      '      <div data-dojo-type="hotplate/bd/WorkspacesUsersConfig" data-dojo-props="title: \'Your Config\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/WorkspacesConfig" data-dojo-props="title: \'Admin\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/GodConfig" data-dojo-props="title: \'God\'"></div>\n' +
      '    </div>\n' +


      '  </div>\n' +
      '</div>\n' +
      '',

    showUserConfig: function(){
      this.userDialog.show();
    },

    postCreate: function(){
      var self = this;

      this.inherited(arguments);

      // Place the user's name at the top. Taken from configuration. If it changes,
      // it's updated in realtime
      self.userName.innerHTML = util.escapeHTML( ConfigVars.usersInfo.name );
      //self.userName.innerHTML = util.escapeHTML( 'USER' );
      topic.subscribe( 'configChange/usersInfo', function( record ){
        self.userName.innerHTML = util.escapeHTML( record.name );
      });     

      // The user-wide configuration dialog
      this.userDialog = new Dialog( {
        title: "Your account",
        className: 'users-config',
      });
      var u;
      this.userDialog.addChild( u = new UsersConfig );
      this.userDialog.startup();
    },

    startup: function(){
      this.inherited(arguments);

      var self = this;

      // Give the "tell us about you" screen if needed
      var initialContactInfo = vars.hotCoreStoreConfig.storeRecords.workspacesUsersInfo._children.workspacesContacts[0];
    
      if( ! initialContactInfo.firstName ){

        var tempDialog = new TempDialog( {
          title: "Tell us about you...",
          closable: false
        } );        

        var contactEditor = new WorkspacesContacts({
          storeName: 'workspacesContacts',
          storeParameters: { workspaceId: globals.workspaceId },
          recordId: initialContactInfo.id,
        } );
        contactEditor.startup();

        // When subimission is successful, hide the
        // dialog box

        
        contactEditor.workspacesContactsInfoWidget.on( 'successfulsubmit', function( e ){


          // If the screen has enough information...
          //if( contactEditor.workspacesContactsInfoWidget.formWidget.value.firstName ){
          if( contactEditor.workspacesContactsEmailsWidget.store.memCache.data.length ){

            // Make sure the config screen doesn't have an unnecessary reload overlay
            // (Triggered by the record changing and the editor effectively already being open)
            contactEditorInWorkspacesUsersConfig = registry.byId( 'workspaces-users-config-contact-editor' );
            contactEditorInWorkspacesUsersConfig.workspacesContactsInfoWidget.loadInfo()

            // Hide the dialog
            tempDialog.hide();
          } else {
            alert("Please enter an email address")
          }
          

        });

        // Add the adding widget to the dialog, start everything up
        tempDialog.addChild( contactEditor );
        tempDialog.startup();
      }
    },
  });
});

/*
 */
