define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",
   "dojo/on",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",
   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",
   'dijit/_Container',
   'dijit/layout/_ContentPaneResizeMixin',


   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoWidgetHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/stores",
   "hotplate/hotDojoStores/AppStoreNotify",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoCometMessages/messages",

   "hotplate/bd/globals",
   "hotplate/bd/AccessConfig",
   "hotplate/bd/AdminConfig",
   "hotplate/bd/UserConfig",
   "hotplate/bd/Dashboard",
   "hotplate/bd/Contacts",

   "hotplate/bd/AppConfigVars",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , when
     , Observable
     , topic
     , on

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable
     , Dialog
     , _OnDijitClickMixin

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane
     , _Container
     , _ContentPaneResizeMixin

     , LogoutButton
     , _TemplatedHooksMixin
     , stores
     , dummy
     , _OverlayMixin
     , messages

     , globals
     , AccessConfig
     , AdminConfig
     , UserConfig
     , Dashboard
     , Contacts

     , AppConfigVars

 ){
    var counter = 0;

    // Create the "login" pane, based on a normal ContentPane
    // return declare( [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin, _OverlayMixin, _OnDijitClickMixin , _Container,  _ContentPaneResizeMixin ], {
    return declare( [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin, _OverlayMixin, _OnDijitClickMixin ], {

      workspaceName: vars.hotDojoAppContainer.workspaceName,

      templateString: '' +
        '<div>' +
        '  <div class="bookingDojo" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">' +
        '    <div class="appHeader" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">' +
        '       <span>Booking Dojo</span> <span data-dojo-attach-event="onclick:testRun">TestRun</span> <span data-dojo-attach-point="userName" style="cursor:pointer" data-dojo-attach-event="ondijitclick:showUserConfig"></span> <div class="logoutButton" data-dojo-type="hotplate/hotDojoAuth/LogoutButton" data-dojo-props="workspaceName: \'${workspaceName}\'"></div>' +
        '    </div>' +

        '    <div data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">' +
        '      <div data-dojo-attach-point="widgetDashboard" data-dojo-type="hotplate/bd/Dashboard" data-dojo-props="title:\'Dashboard\'" ></div>' +
        '      <div data-dojo-attach-point="inbox" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title: \'Inbox\'"></div>' +
        '      <div data-dojo-attach-point="search" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>' +
        '      <div data-dojo-attach-point="calendar" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>' +
        '      <div data-dojo-attach-point="contacts" data-dojo-type="hotplate/bd/Contacts" data-dojo-props="title:\'Contacts\'"></div>' +
        '      <div data-dojo-attach-point="accessConfig" data-dojo-type="hotplate/bd/AccessConfig" data-dojo-props="title: \'Your Config\'"></div>' +
        '      <div data-dojo-attach-point="adminConfig" data-dojo-type="hotplate/bd/AdminConfig" data-dojo-props="title: \'Admin\'"></div>' +

        '    </div>'+

        '  </div>' +
        '</div>',

        testRun:function(e){
          console.log("Ahaha");
           

        },

       
        showUserConfig: function(){
          this.userDialog.show();
        },

 
        /*
          This the first "real" function run within the application. It's run just after
          creating the main application widget (which contains everything else). it's
          responsible of registering this particular tab with the messaging service
          to get COMET notices, and make sure that store-based information (in this case,
          the username) will change of the store changes.
        */
        postCreate:function(){
          var that = this, q;

          this.inherited(arguments);

          // Make sure registerForMessages() is successful with overlay
          // (User will click on overlay to retry)
          this.set( 'overlayed', true );
          this.set( 'overlayClickable', false );
          registerForMessages();
          //
          this.on( 'overlayClick', function( e ){
            registerForMessages();
          });
          //
          function registerForMessages(){
            messages.register( globals.workspaceId ).then(
              function( res ){
                that.set( 'overlayed', false );
              },
              function( err ){
                that.set( 'overlayClickable', true );
              }
            );
          };
          window.onbeforeunload = function( e ) {
            messages.unregister();
          }


          var escapeHTML = function( str ) {
            var div  = document.createElement( 'div' );
            var text = document.createTextNode( str );
            div.appendChild( text );
            return div.innerHTML;
          };


          // Place the user's name in the username span, and subscribe to
          // possible changes
          that.userName.innerHTML = escapeHTML( AppConfigVars.userConfig.name );
          topic.subscribe( 'configChange/user', function( u ){
            that.userName.innerHTML = escapeHTML( AppConfigVars.userConfig.name );
          });     

          // The user dialog
          this.userDialog = new Dialog( {
            title: "Your account",
          });
          this.userDialog.addChild( new UserConfig );
          this.userDialog.startup();
  

        },

        startup: function(){
          this.inherited(arguments);

        },

   });

});


// OLD STUFF IN TestRun

          // messages.sync(); 

          /*
          var s = stores( 'options',  { workspaceIdCall: globals.workspaceId } );
          when( s.get('123456789012345678901234') ).then(
            function(res){
              console.log("Result:");
              console.log(res);
            },
            function(err){
              console.log("Error");
              console.log(err);
            }
          );
          var obj = { _id: '123456789012345678901234', name: "the name", age: 30 }
          // s.put(obj, { overwrite: false  }); 
          s.put(obj); 
          s.put(obj); 

          // s.put( { _id: '123456789012345678901234', name: "anotherone", age: 30 }, { incremental: true  }  );
          s.put( { name: "NOID", age: 30 } );
          // s.put( { _id: '51273dd772f5ff4a57000002', name: "NOID2 CHANGED", age: 35 }, { incremental: true  }  );
          // s.put( { _id: '51273dd772f5ff4a57000002', name: "NOID2 CHANGED 2", age: 39 }  );
          // s.remove( '123456789012345678901234' );
          
          s.query( { name: 'A' }, { start: 0, count: 3, sort: [
           { attribute: "name", descending: true },
           { attribute: "age"  }
          ]} );
  
          //s.put( { name: "Andrea", age: 24 } );
          //s.put( { name: "Antonia", age: 24  } );
          //s.put( { name: "Andrew", age: 23 } );
          //s.put( { name: "Beatrice", age:23  } );
          //s.put( { name: "Bob", age: 24 } );
          //s.put( { name: "Daniela", age: 25  } );
          //s.put( { name: "Don", age: 25 } );
          //s.put( { name: "Mimi", age:25  } );
          //s.put( { name: "Mariachiara", age: 23 } );
          */


