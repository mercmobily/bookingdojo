define( [
  "dojo/_base/declare"
, "dojo/topic"
, "dojo/dnd/Source"
, "dojo/_base/lang"

, "dijit/Dialog"
, "dijit/_OnDijitClickMixin"
, "dijit/registry"
, "dijit/layout/BorderContainer"
, "dijit/layout/TabContainer"
, "dijit/layout/ContentPane"

, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/_OverlayMixin"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoAuth/panels/Resume"
, "hotplate/hotDojoStoreConfig/ConfigVars"
, "hotplate/hotDojoWidgets/util"
, "hotplate/hotDojoComet/_TabRegisterMixin"
, "hotplate/hotDojoAuth/_ReLoginMixin"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"
, "hotplate/hotDojoSubmit/defaultSubmit"

, "hotplate/bd/WorkspacesUsersConfig"
, "hotplate/bd/WorkspacesConfig"
, "hotplate/bd/UsersConfig"
, "hotplate/bd/GodConfig"
, "hotplate/bd/StoreTest"
, "hotplate/bd/Inbox"
, "hotplate/bd/WorkspacesContactsList"

, "hotplate/bd/WorkspacesContacts"


], function(
  declare
, topic
, DnDSource
, lang

, Dialog
, _OnDijitClickMixin
, registry
, BorderContainer
, TabContainer
, ContentPane

, stores
, _OverlayMixin
, globals
, Resume
, ConfigVars
, util
, _TabRegisterMixin
, _ReLoginMixin
, widgets
, TempDialog
, ds

, WorkspacesUsersConfig
, WorkspacesConfig
, UsersConfig
, GodConfig
, StoreTest
, Inbox
, WorkspacesContactsList

, WorkspacesContacts

){
  var counter = 0;

/*
  var DnDTest = declare( 'DnDTest', [ Source ], {

    isSource: false,

    onDropExternal: function(source, nodes, copy){
      this.inherited(arguments);
      console.log("AH!1 ", source, nodes, copy );
    },

    onDrop: function(source, nodes, copy){
      this.inherited(arguments);
      console.log("AH!2", source, nodes, copy );
    },

    postCreate: function(){
      this.inherited(arguments);

      this.on('DropExternal', function( e ){
        console.log("DROP EXTERNAL!", e ) 
      });
    }

  });
*/


  return declare( [ widgets.DestroyableTemplatedContainer, _OverlayMixin, _OnDijitClickMixin, _TabRegisterMixin,_ReLoginMixin ], {

    workspaceName: vars.hotDojoAppContainer.workspaceName,

    templateString: '' +
      '<div class="booking-dojo-widget">\n' +

      // BorderContainer that will contain the application header and the application's main contents
      '  <div class="booking-dojo-header-and-app" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">\n' +

      // Application header, placed in region "top"
      '    <div class="app-header" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">\n' +
      '      <span>Booking Dojo</span>\n'+

      '      <span id="user-name" data-dojo-attach-point="userName" data-dojo-attach-event="ondijitclick:showUserConfig"></span>\n' +

      '      <span id="rubbish" data-dojo-attach-point="rubbish">RUBBISH</span>\n' +

      '    </div>\n' +

      // Application contents, placed in region "center" (a tabContainer with sub-widgets)
      '    <div id="main-tab-container" data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">\n' +
      '      <div data-dojo-type="hotplate/bd/WorkspacesContactsList" data-dojo-props="title:\'Contacts\'"></div>\n' + 

      '      <div data-dojo-type="hotplate/bd/Inbox" data-dojo-props="title:\'Inbox\'" class="inbox"></div>\n' +
      '      <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>\n' +
      '      <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/WorkspacesUsersConfig" data-dojo-props="title: \'Your Config\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/WorkspacesConfig" data-dojo-props="title: \'Admin\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/GodConfig" data-dojo-props="title: \'God\'"></div>\n' +
      '      <div data-dojo-type="hotplate/bd/StoreTest" data-dojo-props="title: \'Store Test\'"></div>\n' +
      '    </div>\n' +


      '  </div>\n' +
      '</div>\n' +
      '',

    showUserConfig: function(){
      this.userDialog.show();
    },

    postCreate: function(){
      var self = this;

      this.inherited(arguments);

      // Place the user's name at the top. Taken from configuration. If it changes,
      // it's updated in realtime
      
      var me = ConfigVars.workspacesUsersInfo._children.workspacesContacts[0];
      var workspacesContactsStore = stores('workspacesContacts', { workspaceId: globals.workspaceId } ) ;
      self.userName.innerHTML = util.escapeHTML( me.firstName );

      workspacesContactsStore.on( 'update', function( event ){
        if( event.target.id == me.id ){
          self.userName.innerHTML = util.escapeHTML( event.target.firstName );
        }
      });

      //self.userName.innerHTML = util.escapeHTML( 'USER' );
      topic.subscribe( 'configChange/usersInfo', function( record ){
      });     

      // The user-wide configuration dialog
      this.userDialog = new Dialog( {
        title: "Your account",
        className: 'users-config',
      });
      var u;
      this.userDialog.addChild( u = new UsersConfig );
      this.userDialog.startup();
      
      var target = new DnDSource(self.rubbish, {
        accept: ["dgrid-row"],
        isSource: false,

        // Make sure that only stores with enabledField are accepted, since
        // this is the field that will be set to "false" in the store
        checkAcceptance: function(source, nodes){
          return source.grid && source.grid.collection && source.grid.collection.enabledField;
        },

        onDrop: function( source, nodes ){

          // Find the enabledField
          var enabledField = source.grid.collection.enabledField;

          // Make a copy of the data contained in that row
          var o = lang.mixin(  (source.grid.row( nodes[0])).data );

          // Set the data so that enabledField is false, and _children is deleted
          o[ enabledField ] = false;
          delete o._children;


          var viewingWidget = source.grid.viewingWidget;
          if( viewingWidget ) {
            viewingWidget.listWidget.set( 'overlayStatus', { overlayed: true, clickable: false } );  
          }
          // Run the actual put
          source.grid.collection.put( o ).then(
              ds.UIMsg(),
              ds.UIErrorMsg( null, null, null )
          ).then(
            function( o ){
              if( viewingWidget) viewingWidget.listWidget.set( 'overlayStatus', { overlayed: false, clickable: false } );
              return o;
            },
            function( err ){
              if( viewingWidget) viewingWidget.listWidget.set( 'overlayStatus', { overlayed: false, clickable: false } );
              throw err;
            }
          );

        }

      });


    },

    startup: function(){
      this.inherited(arguments);

      this._selfContactInfo();
    },

    _selfContactInfo: function(){

      var self = this;
      var successfulInfoSubmit = false;

      // Give the "tell us about you" screen if needed
      var initialContactInfo = vars.hotCoreStoreConfig.storeRecords.workspacesUsersInfo._children.workspacesContacts[0];
    
      if( ! initialContactInfo.firstName ){

        var tempDialog = new TempDialog( {
          title: "Tell us about you...",
          closable: false
        } );        

        var contactEditor = new WorkspacesContacts({
          storeName: 'workspacesContacts',
          storeParameters: { workspaceId: globals.workspaceId },
          recordId: initialContactInfo.id,
        } );
        contactEditor.startup();

       
        // After adding an email address, if the info form was already submitted successfully,
        // then hide. otherwise, focus on the namewidget and ask user to add a name
        contactEditor.workspacesContactsEmailsWidget.addingWidget.on( 'successfulsubmit', function( e ){
          if( successfulInfoSubmit ){
            tempDialog.hide();
          } else {
            contactEditor.workspacesContactsInfoWidget.firstNameWidget.focus();
            contactEditor.workspacesContactsInfoWidget.alertBarWidget.set('message', "Please add your name");
            contactEditor.workspacesContactsInfoWidget.alertBarWidget.show( 3000 );

          }
        });
        
        // After submitting, the name will be set. If there are email addresses in the
        // email store, then hide. Otherwise, focus on the emailWidget and ask user to add an email
        contactEditor.workspacesContactsInfoWidget.on( 'successfulsubmit', function( e ){
          if( contactEditor.workspacesContactsEmailsWidget.store.memCache.data.length ){
            tempDialog.hide();
          } else {

            contactEditor.workspacesContactsEmailsWidget.addingWidget.emailWidget.focus();
            contactEditor.workspacesContactsInfoWidget.alertBarWidget.set('message', "Please add an email address");
            // No need to "show" the alertBarWidget as it's already displaying for "save"

            // Make sure the config screen doesn't have an unnecessary reload overlay
            // (Triggered by the record changing and the editor effectively already being open)
            contactEditorInWorkspacesUsersConfig = registry.byId( 'workspaces-users-config-contact-editor' );
            contactEditorInWorkspacesUsersConfig.workspacesContactsInfoWidget.loadInfo()

            successfulInfoSubmit = true;
          }

        });

        // Add the adding widget to the dialog, start everything up
        tempDialog.addChild( contactEditor );
        tempDialog.startup();
      }

    }

  });
});

/*
 */
