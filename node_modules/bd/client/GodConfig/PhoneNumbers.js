define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"
, "dijit/form/NumberTextBox"
, "dijit/form/Select"

, "put-selector/put"

, "hotplate/hotClientDojo/widgets/widgets"
, "hotplate/hotClientDojo/dgridWidgets/commonMixins"
, "hotplate/hotClientDojo/widgets/EditingWidget"
, "hotplate/hotClientDojo/dgridWidgets/EditableList"
, "hotplate/hotClientDojo/widgets/BusyButton"
, "hotplate/hotClientDojo/stores/stores"


], function(
  declare

, ValidationTextBox
, NumberTextBox
, Select

, put

, widgets
, commonMixins
, EditingWidget
, EditableList
, BusyButton
, stores

){
  return declare( [ EditableList ], {

    ownClass: 'all-phone-numbers',

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row');
        put( row, 'span.fullnumber', object.fullNumber );
        put( row, 'span.type', object.type );
        put( row, 'span.provider', object.provider );
        put( row, 'span.workspaceId', object.workspaceId ? object.workspaceId : '' );

        return row;
      },

      //dndParams: { selfAccept: true },
    }),

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="New"></div>\n' +

        '  <select class="type-filter" data-dojo-attach-point="typeWidget" id="${id}_type" name="type" data-dojo-type="dijit/form/Select" data-dojo-props="" />\n' +
        '    <option value="all">All types</option>\n' +
        '    <option value="shared">Shared</option>\n' +
        '    <option value="available">Available</option>\n' +
        '    <option value="private">Private</option>\n' +
        '  </select>\n' +

        '  <select class="provider-filter" data-dojo-attach-point="providerWidget" id="${id}_provider" name="provider" data-dojo-type="dijit/form/Select" data-dojo-props="" />\n' +
        '    <option value="all">All providers</option>\n' +
        '    <option value="twilio">Twilio</option>\n' +
        '    <option value="plivo">Plivo</option>\n' +
        '  </select>\n' +


        '  <span id="${id}_workspaceId" data-dojo-attach-point="workspaceIdWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="placeHolder:\'Workspace Id...\'"></span>\n' +

        '  <span id="${id}_fullnumber" data-dojo-attach-point="fullNumberWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="placeHolder:\'Phone number...\'"></span>\n' +

        //'  <span data-dojo-attach-point="updteFiltersButtonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Filter"></span>\n' +

        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    EditingConstructor: declare([ EditingWidget ], {
      templateString: '' +
        '<div>\n' +
        '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_fullnumber">Phone number</label>\n' +
        '        <input id="${id}_fullNumber" name="fullNumber" data-dojo-type="dijit/form/ValidationTextBox" size="40" maxlength="255" data-dojo-props="required:true, validator: sharedValidators.phoneNumber, invalidMessage: sharedValidators.phoneNumber(false)" />\n' +
        '      </div>\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_type">Type</label>\n' +
        '        <select id="${id}_type" name="type" data-dojo-type="dijit/form/Select" data-dojo-props="required:true" />\n' +
        '          <option value="shared">Shared</option>\n' +
        '          <option value="available">Available</option>\n' +
        '          <option value="private">Private</option>\n' +
        '        </select>\n' +
        '      </div>\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_provider">Provider</label>\n' +
        '        <select id="${id}_provider" name="provider" data-dojo-type="dijit/form/Select" data-dojo-props="required:true" />\n' +
        '          <option value="twilio">Twilio</option>\n' +
        '          <option value="plivo">Plivo</option>\n' +
        '        </select>\n' +
        '      </div>\n' +


        '      <div class="inputField">\n' +
        '        <label for="${id}_workspaceId">Workspace owner</label>\n' +
        '        <input id="${id}_workspaceId" name="workspaceId" data-dojo-type="dijit/form/ValidationTextBox" size="40" maxlength="255" data-dojo-props="" />\n' +
        '      </div>\n' +

        '      <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Save" />' +
        '    </form>\n'+
        '</div>\n'+
        '',
        alertBarDomPlacement: 'first',
        resetOnSuccess: true,

         manipulateValuesBeforeSubmit: function( values ){
           if( values.workspaceId == '' ) delete values.workspaceId;
         },


    }),

    storeName: 'phoneNumbers',
    storeParameters: {},
    editingWidgetPlacement: 'popup',
    multipleEditingAllowed: false,
    //addingWidgetRegion: 'top',
    gutters: false,
    closeDialogAfterSubmit: true,

    buttonsPosition: 'after', // or "top" or "bottom"

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingConstructorInDialog( 'Phone number' );
      });

      //self.extraWidget.updteFiltersButtonWidget.on( 'click', function( e ){
      //  self._setFiltersAndSort();
      //});


      // Make it react to enter and change of values
      self.extraWidget.on( 'keypress', function( e ) {
        if( e.charCode === 13) self._setFiltersAndSort();
      });
      self.extraWidget.typeWidget.on( 'change', function( e ) {
        self._setFiltersAndSort();
      });
      self.extraWidget.providerWidget.on( 'change', function( e ) {
        self._setFiltersAndSort();
      });




    },

    _setFiltersAndSort: function(){

      var self = this;

      var collection = self.store;

      var type = self.extraWidget.typeWidget.get('value');
      if( type != '' && type !== 'all' ) collection = collection.filter( { type: type });

      var provider = self.extraWidget.providerWidget.get('value');
      if( provider != '' && provider !== 'all' ) collection = collection.filter( { provider: provider });

      var fullNumber = self.extraWidget.fullNumberWidget.get('value');
      if( fullNumber != '' && fullNumber !== 'all' ) collection = collection.filter( { fullNumber: fullNumber });

      var workspaceId = self.extraWidget.workspaceIdWidget.get('value');
      if( workspaceId != '' ) collection = collection.filter( { workspaceId: workspaceId });

      self.listWidget.set('collection', collection);

    },




  } );

});



