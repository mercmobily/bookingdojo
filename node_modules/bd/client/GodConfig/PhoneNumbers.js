/*
INPUT: 
DESCRIPTION
A widget will show a list of phone numbers available to all workspaces (`phoneNumbers`). The ExtraWidget, placed at the top, offers filters abilities on those numbers. This is meant to be used by God to manage the numbers available (they are purchased from the provider).
TODO: it would be great to add functionality to purchase numbers automatically by users.
*/
define([
  "dojo/_base/declare"

, "dijit/form/ValidationTextBox"
, "dijit/form/Select"

, "put-selector/put"

, "hotplate/hotClientDojo/widgets/widgets"
, "hotplate/hotClientDojo/dgridWidgets/commonMixins"
, "hotplate/hotClientDojo/widgets/EditingWidget"
, "hotplate/hotClientDojo/widgets/SharedValidationTextBox"
, "hotplate/hotClientDojo/dgridWidgets/EditableList"
, "hotplate/hotClientDojo/widgets/BusyButton"


], function(
  declare

, ValidationTextBox
, Select

, put

, widgets
, commonMixins
, EditingWidget
, SharedValidationTextBox
, EditableList
, BusyButton

){
  return declare( [ EditableList ], {

    ownClass: 'all-phone-numbers',

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
        var row = put('div.row');
        put( row, 'span.fullnumber', object.fullNumber );
        put( row, 'span.type', object.type );
        put( row, 'span.provider', object.provider );
        put( row, 'span.workspaceId', object.workspaceId ? object.workspaceId : '' );

        return row;
      },

      //dndParams: { selfAccept: true },
    }),

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="New"></div>\n' +

        '  <select class="type-filter" data-dojo-attach-point="typeWidget" id="${id}_type" name="type" data-dojo-type="dijit/form/Select" data-dojo-props="" />\n' +
        '    <option value="all">All types</option>\n' +
        '    <option value="shared">Shared</option>\n' +
        '    <option value="available">Available</option>\n' +
        '    <option value="private">Private</option>\n' +
        '  </select>\n' +

        '  <select class="provider-filter" data-dojo-attach-point="providerWidget" id="${id}_provider" name="provider" data-dojo-type="dijit/form/Select" data-dojo-props="" />\n' +
        '    <option value="all">All providers</option>\n' +
        '    <option value="twilio">Twilio</option>\n' +
        '    <option value="plivo">Plivo</option>\n' +
        '  </select>\n' +

        '  <span id="${id}_workspaceId" data-dojo-attach-point="workspaceIdWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="placeHolder:\'Workspace Id...\'"></span>\n' +

        '  <span id="${id}_fullnumber" data-dojo-attach-point="fullNumberWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="placeHolder:\'Phone number...\'"></span>\n' +

        //'  <span data-dojo-attach-point="updteFiltersButtonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Filter"></span>\n' +

        '</div>\n'+
        '',
    }),
    extraWidgetPosition: 'top',

    EditingWidgetConstructor: declare([ EditingWidget ], {
      templateString: '' +
        '<div>\n' +
        '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_fullnumber">Phone number</label>\n' +
        '        <input id="${id}_fullNumber" name="fullNumber" data-dojo-type="hotplate/hotClientDojo/widgets/SharedValidationTextBox" size="40" maxlength="255" data-dojo-props="required:true, sharedValidator: \'phoneNumber\'" />\n' +
        '      </div>\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_type">Type</label>\n' +
        '        <select id="${id}_type" name="type" data-dojo-type="dijit/form/Select" data-dojo-props="required:true" />\n' +
        '          <option value="shared">Shared</option>\n' +
        '          <option value="available">Available</option>\n' +
        '          <option value="private">Private</option>\n' +
        '        </select>\n' +
        '      </div>\n' +

        '      <div class="inputField">\n' +
        '        <label for="${id}_provider">Provider</label>\n' +
        '        <select id="${id}_provider" name="provider" data-dojo-type="dijit/form/Select" data-dojo-props="required:true" />\n' +
        '          <option value="twilio">Twilio</option>\n' +
        '          <option value="plivo">Plivo</option>\n' +
        '        </select>\n' +
        '      </div>\n' +


        '      <div class="inputField">\n' +
        '        <label for="${id}_workspaceId">Workspace owner</label>\n' +
        '        <input id="${id}_workspaceId" name="workspaceId" data-dojo-type="dijit/form/ValidationTextBox" size="40" maxlength="255" data-dojo-props="" />\n' +
        '      </div>\n' +

        '      <input class="form-submit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="Save" />' +
        '    </form>\n'+
        '</div>\n'+
        '',
        alertBarDomPlacement: 'first',
        resetOnSuccess: true,

        manipulateValuesBeforeSubmit: function( values ){
           if( values.workspaceId == '' ) delete values.workspaceId;
         },


    }),

    storeName: 'phoneNumbers',
    storeParameters: {},
    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    gutters: false,
    closeDialogAfterSubmit: true,

    buttonsPosition: 'after', // or "top" or "bottom"

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingWidgetConstructorInDialog( 'Phone number' );
      });

      //self.extraWidget.updteFiltersButtonWidget.on( 'click', function( e ){
      //  self._setFiltersAndSort();
      //});

      // Make it react to enter and change of values
      self.extraWidget.on( 'keypress', function( e ) {
        if( e.charCode === 13) self._setFiltersAndSort();
      });
      self.extraWidget.typeWidget.on( 'change', function( e ) {
        self._setFiltersAndSort();
      });
      self.extraWidget.providerWidget.on( 'change', function( e ) {
        self._setFiltersAndSort();
      });
    },

    _setFiltersAndSort: function(){

      var self = this;

      var collection = self.store;

      var type = self.extraWidget.typeWidget.get('value');
      if( type != '' && type !== 'all' ) collection = collection.filter( { type: type });

      var provider = self.extraWidget.providerWidget.get('value');
      if( provider != '' && provider !== 'all' ) collection = collection.filter( { provider: provider });

      var fullNumber = self.extraWidget.fullNumberWidget.get('value');
      if( fullNumber != '' && fullNumber !== 'all' ) collection = collection.filter( { fullNumber: fullNumber });

      var workspaceId = self.extraWidget.workspaceIdWidget.get('value');
      if( workspaceId != '' ) collection = collection.filter( { workspaceId: workspaceId });

      self.listWidget.set('collection', collection);

    },
  });

});



