
define([
  "dojo/_base/declare"
, "dojo/aspect"
, "dojo/topic"
, "dojo/dom-class"
, "dojo/dom-style"
, "dojo/on"
, "dojo/query"
, "dojo/mouse"

, "dijit/form/ValidationTextBox"
, "dijit/form/CheckBox"
, "dijit/_WidgetBase"
, "dijit/Destroyable"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/StoreToggle"
, "hotplate/hotDojoGlobals/globals"

, "hotplate/bd/WorkspacesContacts"

], function(
  declare
, aspect
, topic
, domClass
, domStyle
, on
, query
, mouse

, ValidationTextBox
, CheckBox
, _WidgetBase
, Destroyable

, put

, commonMixins
, widgets
, TempDialog
, EditingWidget
, EditableList
, BusyButton
, stores
, StoreToggle
, globals

, WorkspacesContacts
){


  function formatInfo( i ){
    if( !i ) return '';
    return ( i.firstName ? i.firstName + ' ' : '' ) + ( i.middleName? i.middleName + ' ': '' ) + ( i.lastName ? i.lastName : '' );
  };
  function formatAddress( a ){
    if( !a ) return '';
    var r = (a.street ? a.street + ' ' : '') + (a.poBox ? a.poBox + ' ' : '' ) + ( a.localArea ? a.localArea + ' ' : '' ) + ( a.city ? a.city + ' ' : '' ) + ( a.county ? a.county + ' ' :  '' ) + ( a.postcode ? a.postCode : '' );
    return r;
  };
  function formatEmail( e ){
    if( !e ) return '';
    return e.email;
  };
  function formatPhoneNumber( n ){
    if( !n ) return '';
    if( n.dialCode ) return '+' + n.dialCode + ' - ' + n.number;
    else return n.number;
  };

  function formatTotal( t ){
    if( t > 1 ) return " +" + t;
    else return '';
  }; 


  var ContactsButtonsConstructor = declare( [ EditableList.DefaultButtonsConstructor ],{

    postCreate: function(){
      this.inherited(arguments);

      var self = this;
    }
  });


  return declare( [ EditableList ], {


    //ButtonsConstructor: ContactsButtonsConstructor,

    refreshOnChange: true,
    immediateRefresh: false,
    ownClass: 'workspaces-contacts-list',

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
      
        var self = this;
 
        var firstName, lastName, middleName;

        // Get the DOM variables ready
        if( object.firstName ) firstName = put( 'span.lastName',    object.firstName );
        if( object.lastName )  lastName =  put( 'span.firstName',   object.lastName );
        if( object.middleName) middleName = put( 'span.middleName', object.middleName );

        var ticked = false;
        if( object.isStarred) ticked = true;
        //if( object._children && object._children.workspacesContactsIsStarred && object._children.workspacesContactsIsStarred[ 0 ] && object._children.workspacesContactsIsStarred[ 0 ].isStarred ) ticked = true;
        var star = new StoreToggle({ 

          toggleField: 'isStarred',
          storeName: 'workspacesContactsIsStarred',
          storeParameters: {
            workspaceId: globals.workspaceId,
          },
          recordId: object.id,

          ticked: ticked,
        } );
       
        // Make up the row
        var row = put( 'div.row' );

        // Add .with-linked-user if 
        if( object.userId ){
          put( row, '.row-with-linked-user' )
        }
        
        put( row, star.domNode );
        var data = put( row, 'span.data' );
        put( data, 'span.info', formatInfo( object ) );
        put( data, 'span.separator' );

        var email = put( data, 'span.email' );
        put( email, 'span.email-info', object._children.mainEmailId ? formatEmail( object._children.mainEmailId ) : '' );
        //put( email, 'span.emails-total', formatTotal( object._ref.emailsTotal ) );
        put( data, email );
        put( data, 'span.separator' );

        var phoneNumber = put( data, 'span.phone-number' );
        put( phoneNumber, 'span.phone-number-info', object._children.mainPhoneNumberId ? formatPhoneNumber( object._children.mainPhoneNumberId) : '' );
        //put( phoneNumber, 'span.phone-numbers-total', formatTotal( object._ref.phoneNumbersTotal ) );
        put( data, phoneNumber );
	put( data, 'span.separator' );

        var address = put( data, 'span.address' );
        put( address, 'span.address-info', object._children.mainAddressId ? formatAddress( object._children.mainAddressId) : '' );
        //put( address, 'span.addresses-total', formatTotal( object._ref.addressesTotal ) );
        put( data, address );

        // Get a reference to the starWidget in the row (for future destruction)
        // and start it up
        row.starWidget = star;
        star.startup();
     
        //self.set( 'sort', 'surname' );
 
        return row;
      },
      //sort: "surname",
      dndParams: { selfAccept: false, copyOnly: true },

      postCreate: function(){
        this.inherited(arguments);
        var self = this;

        self.set( 'queryOptions', { placeNew: 'none' } );

        self.own( 

          // Destroy the widgets contained in the row before killing the row itself
          aspect.before( self, "removeRow", function( rowElement ){
            rowElement.starWidget.destroy();
          })

        );




      },

    }),

    initialSort: "lastName",

    EditingConstructor: WorkspacesContacts,

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New"></div>\n' +
        '  <label for="${id}_orderByName">Order by name</label>\n' +
        '  <div id="${id}_orderByName" data-dojo-attach-point="orderByNameWidget" data-dojo-type="dijit/form/CheckBox" value="On"></div>\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    storeName: 'workspacesContacts',
    storeParameters: { workspaceId: globals.workspaceId },
    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    gutters: false,

    buttonsPosition: 'after', // or "top" or "bottom"
    buttonsLeftOffset: 25,

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      // This widget's base class
      //domClass.add( self.domNode, 'workspaces-contacts-list' );

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingConstructorInDialog( 'New contact' );
      });

      // Change the listWidget's order depending on whether the checkbox is
      // ticked or not
      self.extraWidget.orderByNameWidget.on( 'click', function( e ){
        var checkBox = this;
        field = checkBox.get('value') ? 'firstName' : 'lastName';

        // Make up the collection with the initial sorting/filters
        var collection = self.store;
        if( self.initialFilter ) collection = collection.filter( self.initialFilter );
        collection = collection.sort( field );

        self.listWidget.set('collection', collection);

      });
    
  
      // Hide buttons for user-linked rows
      self.listWidget.on( on.selector('.dgrid-content .dgrid-row', mouse.enter), function( e ){
        var row = self.row( e );
        if( row.data.userId ){
          if( self.buttonsNode ) domStyle.set( self.buttonsNode, 'display', 'none' );
        }
      });

    },


  } );

});


