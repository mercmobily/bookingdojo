
define([
  "dojo/_base/declare"
, "dojo/aspect"
, "dojo/topic"
, "dojo/dom-class"
, "dojo/dom-style"
, "dojo/on"
, "dojo/query"
, "dojo/mouse"

, "dijit/form/ValidationTextBox"
, "dijit/form/CheckBox"
, "dijit/_WidgetBase"
, "dijit/Destroyable"
, "dijit/registry"
, "dijit/layout/ContentPane"

, "put-selector/put"

, "hotplate/hotClientDojo/dgridWidgets/commonMixins"
, "hotplate/hotClientDojo/widgets/widgets"
, "hotplate/hotClientDojo/widgets/TempDialog"
, "hotplate/hotClientDojo/widgets/EditingWidget"
, "hotplate/hotClientDojo/dgridWidgets/EditableList"
, "hotplate/hotClientDojo/widgets/BusyButton"
, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/widgets/StoreToggle"
, "hotplate/hotClientDojo/globals/globals"
, "hotplate/hotClientDojo/storeConfig/ConfigVars"

, "hotplate/bd/WorkspacesContacts"
, "hotplate/bd/WorkspacesContactsView"


], function(
  declare
, aspect
, topic
, domClass
, domStyle
, on
, query
, mouse

, ValidationTextBox
, CheckBox
, _WidgetBase
, Destroyable
, registry
, ContentPane

, put

, commonMixins
, widgets
, TempDialog
, EditingWidget
, EditableList
, BusyButton
, stores
, StoreToggle
, globals
, ConfigVars

, WorkspacesContacts
, WorkspacesContactsView

){


  function formatInfo( i ){
    if( !i ) return '';
    return ( i.firstName ? i.firstName + ' ' : '' ) + ( i.middleName? i.middleName + ' ': '' ) + ( i.lastName ? i.lastName : '' );
  };
  function formatAddress( a ){
    if( !a ) return '';
    var r = (a.street ? a.street + ' ' : '') + (a.poBox ? a.poBox + ' ' : '' ) + ( a.localArea ? a.localArea + ' ' : '' ) + ( a.city ? a.city + ' ' : '' ) + ( a.county ? a.county + ' ' :  '' ) + ( a.postcode ? a.postCode : '' );
    return r;
  };
  function formatEmail( e ){
    if( !e ) return '';
    return e.email;
  };
  function formatPhoneNumber( n ){
    if( !n ) return '';
    if( n.dialCode ) return '+' + n.dialCode + ' - ' + n.number;
    else return n.number;
  };

  function formatTotal( t ){
    if( t > 1 ) return " +" + t;
    else return '';
  }; 


  var ContactsButtonsConstructor = declare( [ EditableList.DefaultButtonsConstructor ],{

    postCreate: function(){
      this.inherited(arguments);

      var self = this;
    }
  });


  return declare( [ EditableList ], {

    //ButtonsConstructor: ContactsButtonsConstructor,

    ownClass: 'workspaces-contacts-list',
    editOnDoubleClick: false,
    openChildren: [],

    constructor: function(){
      this.openChildren = [];
    },

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
      
        var self = this;
 
        var firstName, lastName, middleName;

        // Get the DOM variables ready
        if( object.firstName ) firstName = put( 'span.lastName',    object.firstName );
        if( object.lastName )  lastName =  put( 'span.firstName',   object.lastName );
        if( object.middleName) middleName = put( 'span.middleName', object.middleName );

        var ticked = false;
        if( object.isStarred) ticked = true;
        //if( object._children && object._children.workspacesContactsIsStarred && object._children.workspacesContactsIsStarred[ 0 ] && object._children.workspacesContactsIsStarred[ 0 ].isStarred ) ticked = true;
        var star = new StoreToggle({ 

          toggleField: 'isStarred',
          storeName: 'workspacesContactsIsStarred',
          storeParameters: {
            workspaceId: globals.workspaceId,
          },
          recordId: object.id,

          ticked: ticked,
        } );
       
        // Make up the row
        var row = put( 'div.row' );

        // Add .with-linked-user if 
        if( object.userId ){
          put( row, '.row-with-linked-user' )
        }
        
        put( row, star.domNode );

        if( ! object.userId ){
          put( row, 'span.dijitIconEdit.edit', "" );
        } else {          
          put( row, 'span.edit', "" );
        }


        var data = put( row, 'span.data' );
        put( data, 'span.info', formatInfo( object ) );
        put( data, 'span.separator' );

        var email = put( data, 'span.email' );
        put( email, 'span.email-info', object._children.mainEmailId ? formatEmail( object._children.mainEmailId ) : '' );
        //put( email, 'span.emails-total', formatTotal( object._ref.emailsTotal ) );
        put( data, email );
        put( data, 'span.separator' );

        var phoneNumber = put( data, 'span.phone-number' );
        put( phoneNumber, 'span.phone-number-info', object._children.mainPhoneNumberId ? formatPhoneNumber( object._children.mainPhoneNumberId) : '' );
        //put( phoneNumber, 'span.phone-numbers-total', formatTotal( object._ref.phoneNumbersTotal ) );
        put( data, phoneNumber );
      	put( data, 'span.separator' );

        var address = put( data, 'span.address' );
        put( address, 'span.address-info', object._children.mainAddressId ? formatAddress( object._children.mainAddressId) : '' );
        //put( address, 'span.addresses-total', formatTotal( object._ref.addressesTotal ) );
        put( data, address );

        // Get a reference to the starWidget in the row (for future destruction)
        // and start it up
        row.starWidget = star;
        star.startup();
      
        //self.set( 'sort', 'surname' );
 
        return row;
      },
      //sort: "surname",
      dndParams: { selfAccept: false, copyOnly: true },

      postCreate: function(){
        this.inherited(arguments);
        var self = this;

        self.own( 

          // Destroy the widgets contained in the row before killing the row itself
          aspect.before( self, "removeRow", function( rowElement ){
            rowElement.starWidget.destroy();
          })

        );

      },

    }),

    orderByName: !! ConfigVars.workspacesUsersInfo.orderByNameDefault,
    onlyStarredContacts: false,
    searchBox: '',

    EditingConstructor: WorkspacesContacts,

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +

        '      <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotClientDojo/widgets/BusyButton" label="New"></div>\n' +
        '    <label for="${id}_orderByName">Order by name</label>\n' +
        '      <div id="${id}_orderByName" data-dojo-attach-point="orderByNameWidget" data-dojo-type="dijit/form/CheckBox" value="On"></div>\n' +

        '      <label for="${id}_starredFilter">Only starred contacts</label>\n' +
        '      <div id="${id}_starredFilter" data-dojo-attach-point="starredFilterWidget" data-dojo-type="dijit/form/CheckBox" value="On"></div>\n' +

        '      <label for="${id}_search">Search</label>\n' +
        '      <div id="${id}_searchContacts" data-dojo-attach-point="searchContactsWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="intermediateChanges:true"></div>\n' +

        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    storeName: 'workspacesContacts',
    storeParameters: { workspaceId: globals.workspaceId },

    initialSort: ConfigVars.workspacesUsersInfo.orderByNameDefault ? 'firstName' : [],

    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    gutters: false,


    buttonsPosition: 'after', // or "top" or "bottom"
    buttonsLeftOffset: 25,


    _setFiltersAndSort: function(){

      var self = this;

      var collection = self.store;

      if( this.orderByName ) collection = collection.sort( 'firstName' );

      this.onlyStarredContacts ?
        ( collection = collection.filter( { isStarred: true } ) ) :
        null;

      this.searchBox !== '' ?
        ( collection = collection.filter( { searchAll:  this.searchBox })) :
        null;

      self.listWidget.set('collection', collection);

    },

    startup: function(){
      this.inherited(arguments);

      // If you run the following line, something WEIRD happens to the store and basically 
      // it stops working altogether
      //this._setFiltersAndSort();
    },


    refreshContactsWidget: function(){

      var self = this;

      if( self.listWidget._inRefresh ){ 
        self.scheduleRefresh = true;
      } else {
        self._setFiltersAndSort();
      }

      self.own(

        self.listWidget.on( 'dgrid-refresh-complete,dgrid-error', function( e ){
          if( self.scheduleRefresh ){
            self.scheduleRefresh = false;
            self._setFiltersAndSort();
          }

        })

      );

    },

    _viewContact: function( row ){

      var tabContainer = registry.byId( 'contacts-tab' );
      var tab;

      var uniqueId = "contact-" + row.data.id;

      if( existingTab = registry.byId( uniqueId )) {
        tabContainer.selectChild( uniqueId );
      } else {

        tabContainer.addChild(
          tab = new WorkspacesContactsView({
            title: formatInfo( row.data ),
            closable: true,
            contactObject: row.data,
            id: uniqueId
           })
        );
        tabContainer.selectChild( tab );
      }

      //debugger;

      //console.log( tabContainer );
      //console.log( row );
      //dialog("Viewing: ", row );
    },

    // Update tab titles if name/lastname do change
    _updateTabTitles: function( item ){
      var contactWidget;

      if( contactWidget = registry.byId( "contact-" + item.target.id )) {
        contactWidget.set( 'title', formatInfo( item.target ));
      }
    },

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.extraWidget.orderByNameWidget.set( 'value', self.orderByName );

      self.own( 

        self.extraWidget.buttonWidget.on( 'click', function( e ){
          self.addingConstructorInDialog( 'New contact' );
        }),

        // If the status of the widget changes, 
        self.extraWidget.starredFilterWidget.on( 'click', function( e ){
          self.onlyStarredContacts = !! this.get( 'value' );
          self._setFiltersAndSort();
        }),

        self.extraWidget.orderByNameWidget.on( 'click', function( e ){
          self.orderByName = !! this.get( 'value' );
          self._setFiltersAndSort();
        }),

        self.extraWidget.searchContactsWidget.on( 'change', function( e ){
          self.searchBox = e;
          self.refreshContactsWidget();
        }),

        /*
        // Hide buttons for user-linked rows
        // NOTE: Commented out as buttons no longer appear on this screen
        self.listWidget.on( on.selector('.dgrid-content .dgrid-row', mouse.enter), function( e ){
          var row = self.row( e );
          if( row && row.data && row.data.userId ){
            if( self.buttonsNode ) domStyle.set( self.buttonsNode, 'display', 'none' );
          }
        }),
        */

        // Activates editing if user presses "e" or if user clicked on edit icon
        on( self.listWidget, 'keypress' , function( e ){
          var row = self.row( e );
          e.preventDefault();

          if( e.charCode == 101 ){
            var row = self.row( e );
            self._editRow( row );     
          }
        }),
        on( self.listWidget, 'click', function( e ){
          var row = self.row( e );

          if( e.target.className == 'dijitIconEdit edit' ){
            self._editRow( row );     
          }
        }),

        // View contact if user double clicks or presses "v" or Enter 
        on( self.listWidget, 'keypress' , function( e ){
          var row = self.row( e );
          e.preventDefault();
          if( e.charCode == 118 || e.charCode == 13 ){
            var row = self.row( e );
            self._viewContact( row );
          }
        }),
        on( self.listWidget, 'dblclick' , function( e ){
          var row = self.row( e );
          self._viewContact( row );
        }),
       
        // Since the queryEngine is not reliable for ordering, any changes will trigger a refresh
        self.store.on( 'add,update,remove', function( item ){
          self.listWidget.refresh( { keepScrollPosition: true } );
          self._updateTabTitles( item );
        })
      );
    },


  } );

});


