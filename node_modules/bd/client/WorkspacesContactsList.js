
define([
  "dojo/_base/declare"
, "dojo/aspect"
, "dojo/topic"

, "dijit/form/ValidationTextBox"
, "dijit/_WidgetBase"
, "dijit/Destroyable"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/StoreToggle"
, "hotplate/hotDojoGlobals/globals"

, "hotplate/bd/WorkspacesContacts"

], function(
  declare
, aspect
, topic

, ValidationTextBox
, _WidgetBase
, Destroyable

, put

, commonMixins
, widgets
, TempDialog
, EditingWidget
, EditableList
, BusyButton
, stores
, StoreToggle
, globals

, WorkspacesContacts
){


  function formatInfo( i ){
    if( !i ) return '';
    return i.firstName + ' ' + i.middleName + ' ' + i.lastName;
  };
  function formatAddress( a ){
    if( !a ) return '';
    return a.street + ' ' + a.poBox + ' ' + a.localArea + ' ' + a.city + ' ' + a.county + ' ' + a.postcode;
  };
  function formatEmail( e ){
    if( !e ) return '';
    return e.email;
  };
  function formatPhoneNumber( n ){
    if( !n ) return '';
    if( n.dialCode ) return '+' + n.dialCode + ' - ' + n.number;
    else return n.number;
  };

  function formatTotal( t ){
    if( t > 1 ) return " +" + t;
    else return '';
  }; 

  return declare( [ EditableList ], {

    refreshOnSubmit: true,
    immediateRefresh: false,

    ListConstructor: declare( [ commonMixins.FullOnDemandList ], {

      renderRow: function(object, options){
      
        var self = this;
 
        var firstName, lastName, middleName;

        // Get the DOM variables ready
        if( object.firstName ) firstName = put( 'span.lastName',    object.firstName );
        if( object.lastName )  lastName =  put( 'span.firstName',   object.lastName );
        if( object.middleName) middleName = put( 'span.middleName', object.middleName );
        var star = new StoreToggle({ 

          toggleField: 'isStarred',
          storeName: 'WorkspacesContactsIsStarred',
          storeParameters: {
            workspaceId: globals.workspaceId,
          },
          recordId: object.id,

          ticked: object._ref.isStarred,
        } );
       
        // Make up the row

        var row = put( 'div.row' );
        put( row, star.domNode );
        var data = put( row, 'span.data' );
				put( data, 'span.info', formatInfo( object ) );
				put( data, 'span.separator' );

				var email = put( data, 'span.email' );
        put( email, 'span.email-info', formatEmail( object._ref.email ) );
				put( email, 'span.emails-total', formatTotal( object._ref.emailsTotal ) );
        put( data, email );
				put( data, 'span.separator' );

        var phoneNumber = put( data, 'span.phone-number' );
				put( phoneNumber, 'span.phone-number-info', formatPhoneNumber( object._ref.phoneNumber ) );
				put( phoneNumber, 'span.phone-numbers-total', formatTotal( object._ref.phoneNumbersTotal ) );
        put( data, phoneNumber );
				put( data, 'span.separator' );

        var address = put( data, 'span.address' );
        put( address, 'span.address-info', formatAddress( object._ref.address ) );
				put( address, 'span.addresses-total', formatTotal( object._ref.addressesTotal ) );
        put( data, address );

        // Get a reference to the starWidget in the row (for future destruction)
        // and start it up
        row.starWidget = star;
        star.startup();
      
        return row;
      },
      queryOptions: { placeNew: 'last' },
      dndParams: { selfAccept: false },

      postCreate: function(){
        this.inherited(arguments);
        var self = this;

        self.own( 

          // Destroy the widgets contained in the row before killing the row itself
          aspect.before( self, "removeRow", function( rowElement ){
            rowElement.starWidget.destroy();
          }),

          // Listens to storeRecordUpgrade, in case one of the fields in _ref is updated
          topic.subscribe( 'storeRecordUpdate', function( from, message, remote ){
           if( message.storeName == 'WorkspacesContactsAddresses' || message.storeName == 'WorkspacesContactsEmails' || message.storeName =='WorkspacesContactsPhoneNumbers'){
             self.refresh();
           }
          })

        );

      },

    }),

    EditingConstructor: WorkspacesContacts,

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="New" />\n' +
        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    storeName: 'WorkspacesContacts',
    storeParameters: { workspaceId: globals.workspaceId },
    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    gutters: false,

    buttonsPosition: 'after', // or "top" or "bottom"
    buttonsLeftOffset: 25,

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.extraWidget.buttonWidget.on( 'click', function( e ){
        self.addingConstructorInDialog( 'New contact' );
      });

   },


  } );

});


