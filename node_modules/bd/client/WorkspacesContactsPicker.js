
define([
  "dojo/_base/declare"
, "dojo/aspect"
, "dojo/topic"
, "dojo/dom-class"
, "dojo/dom-style"
, "dojo/on"
, "dojo/query"
, "dojo/mouse"

, "dijit/form/ValidationTextBox"
, "dijit/form/CheckBox"
, "dijit/_WidgetBase"
, "dijit/Destroyable"

, "put-selector/put"

, "hotplate/hotDojoDgridWidgets/commonMixins"
, "hotplate/hotDojoWidgets/widgets"
, "hotplate/hotDojoWidgets/TempDialog"
, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoDgridWidgets/EditableList"
, "hotplate/hotDojoWidgets/BusyButton"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoWidgets/StoreToggle"
, "hotplate/hotDojoGlobals/globals"
, "hotplate/hotDojoStoreConfig/ConfigVars"

, "hotplate/bd/WorkspacesContacts"

], function(
  declare
, aspect
, topic
, domClass
, domStyle
, on
, query
, mouse

, ValidationTextBox
, CheckBox
, _WidgetBase
, Destroyable

, put

, commonMixins
, widgets
, TempDialog
, EditingWidget
, EditableList
, BusyButton
, stores
, StoreToggle

, globals
, ConfigVars

, WorkspacesContacts
){

  function formatInfo( i ){
    if( !i ) return '';
    return ( i.firstName ? i.firstName + ' ' : '' ) + ( i.middleName? i.middleName + ' ': '' ) + ( i.lastName ? i.lastName : '' );
  };
  function formatAddress( a ){
    if( !a ) return '';
    var r = (a.street ? a.street + ' ' : '') + (a.poBox ? a.poBox + ' ' : '' ) + ( a.localArea ? a.localArea + ' ' : '' ) + ( a.city ? a.city + ' ' : '' ) + ( a.county ? a.county + ' ' :  '' ) + ( a.postcode ? a.postCode : '' );
    return r;
  };
  function formatEmail( e ){
    if( !e ) return '';
    return e.email;
  };
  function formatPhoneNumber( n ){
    if( !n ) return '';
    if( n.dialCode ) return '+' + n.dialCode + ' - ' + n.number;
    else return n.number;
  };

  function formatTotal( t ){
    if( t > 1 ) return " +" + t;
    else return '';
  }; 


var Picker = declare( [ EditableList ], {

    ownClass: 'workspaces-contacts-picker workspaces-contacts-list auto-grow-dgrid',

    editOnDoubleClick: false,

    ListConstructor: declare( [ commonMixins.FullOnDemandListNoDnd ], {

      renderRow: function(object, options){
      
        var self = this;
 
        var firstName, lastName, middleName;


        console.log( "OBJECT:" , object );

        var contact = object._children.contactId;

        // Get the DOM variables ready
        if( contact.firstName ) firstName = put( 'span.lastName',    contact.firstName );
        if( contact.lastName )  lastName =  put( 'span.firstName',   contact.lastName );
        if( contact.middleName) middleName = put( 'span.middleName', contact.middleName );

        // Maybe do something with this
        var ticked = false;
        if( contact.isStarred) ticked = true;

        // Make up the row
        var row = put( 'div.row' );

        put( row, 'span.edit', "Edit" );

        var star = new StoreToggle({ 

          toggleField: 'isStarred',
          storeName: 'workspacesContactsIsStarred',
          storeParameters: {
            workspaceId: globals.workspaceId,
          },
          recordId: contact.id,

          ticked: ticked,
        } );
       
        // Add .with-linked-user if 
        if( contact.userId ){
          put( row, '.row-with-linked-user' )
        }
        
        put( row, star.domNode );
        var data = put( row, 'span.data' );
        put( data, 'span.info', formatInfo( contact ) );
        put( data, 'span.separator' );

        var email = put( data, 'span.email' );
        put( email, 'span.email-info', object.email );
        //put( email, 'span.emails-total', formatTotal( object._ref.emailsTotal ) );
        put( data, email );
        put( data, 'span.separator' );

        // Get a reference to the starWidget in the row (for future destruction)
        // and start it up
        row.starWidget = star;
        star.startup();      

        return row;
      },

      //sort: "surname",
      dndParams: { selfAccept: false, copyOnly: true },

    }),

    orderByName: !! ConfigVars.workspacesUsersInfo.orderByNameDefault,
    onlyStarredContacts: false,
    searchBox: '',

    // FIXME: make sure contact editing pops up on "edit" press
    EditingConstructor: WorkspacesContacts,

    ExtraWidgetConstructor: declare( [ widgets.DestroyableTemplatedContainer ], {
      templateString: '' +
        '<div>\n' +

        '  <label for="${id}_starredFilter">Only starred contacts</label>\n' +
        '  <div id="${id}_starredFilter" data-dojo-attach-point="starredFilterWidget" data-dojo-type="dijit/form/CheckBox" value="On"></div>\n' +

        '  <label for="${id}_search">Search</label>\n' +
        '  <div id="${id}_searchContacts" data-dojo-attach-point="searchContactsWidget" data-dojo-type="dijit/form/TextBox" data-dojo-props="intermediateChanges:true"></div>\n' +

        '</div>\n'+
        '',
    }),
    extraWidgetRegion: 'top',

    storeName: 'workspacesContactsEmailsSearch',
    storeParameters: { workspaceId: globals.workspaceId },

    //initialSort: ConfigVars.workspacesUsersInfo.orderByNameDefault ? 'firstName' : 'lastName',

    editingWidgetPlacement: 'dialog',
    multipleEditingAllowed: false,
    gutters: false,

    buttonsPosition: 'after', // or "top" or "bottom"
    buttonsLeftOffset: 25,


    _setFilters: function(){

      var self = this;

      var collection = self.store;

      //this.orderByName ? 
      //  ( collection = collection.sort( 'firstName' ) ) :
      //  ( collection = collection.sort( 'lastName' ) );

      this.onlyStarredContacts ?
        ( collection = collection.filter( { isStarred: true } ) ) :
        null;

      this.searchBox !== '' ?
        ( collection = collection.filter( { searchAll:  this.searchBox })) :
        null;

      self.listWidget.set('collection', collection);
    },



    refreshContactsWidget: function(){

      var self = this;

      if( self.listWidget._inRefresh ){ 
        self.scheduleRefresh = true;
      } else {
        self._setFilters();
      }

      self.own(

        self.listWidget.on( 'dgrid-refresh-complete,dgrid-error', function( e ){
          if( self.scheduleRefresh ){
            self.scheduleRefresh = false;
            self._setFilters();
          }

        })

      );

    },

    _selectionDone: function( row ){
      var self = this;

      self.emit( 'selection-done', { bubbles: false, row: row  } );
    },

    postCreate: function(){

      this.inherited(arguments);
      var self = this;

      self.own( 

        // If the status of the widget changes, 
        self.extraWidget.starredFilterWidget.on( 'click', function( e ){
          self.onlyStarredContacts = !! this.get( 'value' );
          self._setFilters();
        }),

        self.extraWidget.searchContactsWidget.on( 'change', function( e ){
          self.searchBox = e;
          self.refreshContactsWidget();
        }),
 
        // Trigger editing on SINGLE click. Note that clicking on the "edit" icon
        // won't trigger selection but editing
        on( self.listWidget, 'click', function( e ){
          var row = self.row( e );
          
          if( e.target.className == 'edit' ){

            self._editRow( row, new WorkspacesContacts({
              storeName: 'workspacesContacts',
              storeParameters: self.storeParameters,
              recordId: row.data.contactId,
              })
            ); 

          } else if( e.target.parentElement.className != 'toggle') {
            self._selectionDone( row );
          }

        }),

        on( self.listWidget, 'keypress' , function( e ){
          var row = self.row( e );

          if( e.charCode == 13 ){
            var row = self.row( e );
            self._selectionDone( row );
          } else if( e.charCode == 101 ){
            self._editRow( row );            
          }
          
        })

      );
    },

  } );



  return declare( [ TempDialog ], {

    title: "Lookup contact",

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      var picker = new Picker();

      this.addChild( picker );
      picker.startup();

      picker.on( 'selection-done', function( row ){
        console.log("Emitting from picker:", row );
        self.emit( 'selection-done', { bubbles: false, row: row } );
        self.hide();
      });
    }

  });

  
});


