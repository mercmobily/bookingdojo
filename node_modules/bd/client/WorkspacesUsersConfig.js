/*
INPUT: 
* workspaceId
* userId
* contactId
DESCRIPTION
A widget that will show various sub-widgets related to the user:
 * workspacesContacts -- to edit the contact associated to the user
 * workspacesUsersInfo -- to edit the `workspacesUsersInfo` table, which extends  the table `workspacesUsers` (which is an Hotplate one, and therefore  unchangeable). 
 * workspacesUsersActivities -- an editable list of activities for this particular user in this workspace
*/
define([
  "dojo/_base/declare"
, "dojo/topic"

, "dijit/layout/ContentPane"

, "hotplate/hotClientDojo/widgets/widgets"

, "hotplate/hotClientDojo/stores/stores"
, "hotplate/hotClientDojo/storeConfig/ConfigVars"
, "hotplate/hotClientDojo/widgets/ViewingWidget"

, "hotplate/bd/WorkspacesUsersConfig/WorkspacesUsersInfo"
, "hotplate/bd/WorkspacesUsersConfig/WorkspacesUsersActivities"
, "hotplate/bd/WorkspacesContacts"

], function(
  declare
, topic

, ContentPane

, widgets

, stores
, ConfigVars
, ViewingWidget

, WorkspacesUsersInfo
, WorkspacesUsersActivities
, WorkspacesContacts

){

  return declare( [ ViewingWidget ], {

    templateString: '' +
      '<div class="workspaces-users-config">\n' +
      '  <div class="box">\n'+
      '    <p class="boxTitle">Contact information</p>\n' +
      '    <div id="workspaces-users-config-contact-editor" data-dojo-type="hotplate/bd/WorkspacesContacts" data-dojo-props="workspaceId: this.workspaceId, contactId: this.contactId"></div>\n' +
      '  </div>\n' +
      
      '  <span data-dojo-attach-point="mainEmailAddressNode"></span>\n' +
      
      '  <div data-dojo-type="hotplate/bd/WorkspacesUsersConfig/WorkspacesUsersInfo" data-dojo-props="workspaceId: this.workspaceId, userId: this.userId, contactIdForSelect: this.contactId"></div>\n' +

      '  <span class="config-heading">Activities for this workspace</span>\n' +
      '  <div class="small-editable-list" data-dojo-type="hotplate/bd/WorkspacesUsersConfig/WorkspacesUsersActivities" data-dojo-props="workspaceId: this.workspaceId, userId: this.userId"></div>\n'+
    
      '</div>\n' +
      '',

    postMixInProperties: function(){
      this.inherited(arguments);

      this.info = {
        workspacesContacts: { 
          id: this.contactId,
          storeParameters: { workspaceId: this.workspaceId }
        } 
      };

    },

    renderInfo: function(){
      var record = this.info.workspacesContacts.data;
      this.mainEmailAddressNode.innerHTML = record._children.mainEmailId ? record._children.mainEmailId.email : 'Not set';
    },

  });

});
