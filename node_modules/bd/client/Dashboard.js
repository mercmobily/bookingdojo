define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",
   "dojo/on",
   "dojo/_base/lang",
   "dojo/dom-construct",
   "dojo/dom-style",
   "dojo/dom-attr",
   "dojo/aspect",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",
   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",
   "dijit/focus",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",
   'dijit/_Container',
   'dijit/layout/_ContentPaneResizeMixin',

   'dgrid/List',
   'dgrid/OnDemandList',
   "dgrid/Selection",
   "dgrid/Keyboard",
   "dgrid/util/mouse",
   "dgrid/extensions/DijitRegistry",
   'put-selector/put',

   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoWidgetHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/AppStoreNotify",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoWidgets/EditingWidget",
   "hotplate/hotDojoDgridWidgets/EditableList",
   "hotplate/hotDojoDgridWidgets/StoreSelect",
   "hotplate/hotDojoCometMessages/messages",
   "hotplate/hotDojoSubmit/defaultSubmit",
   "hotplate/hotDojoWidgets/BusyButton",
   "hotplate/hotDojoStores/stores",

   "hotplate/bd/globals",
   "hotplate/bd/AccessConfig",
   "hotplate/bd/AdminConfig",
   "hotplate/bd/UserConfig",

   "hotplate/bd/AppConfigVars",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , when
     , Observable
     , topic
     , on
     , lang
     , domConstruct
     , domStyle
     , domAttr
     , aspect

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable
     , Dialog
     , _OnDijitClickMixin
     , focusUtil

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane
     , _Container
     , _ContentPaneResizeMixin

     , List
     , OnDemandList
     , Selection
     , Keyboard
     , mouse
     , DijitRegistry
     , put

     , LogoutButton
     , _TemplatedHooksMixin
     , dummy
     , _OverlayMixin
     , EditingWidget
     , EditableList
     , StoreSelect
     , messages
     , ds
     , BusyButton
     , stores

     , globals
     , AccessConfig
     , AdminConfig
     , UserConfig

     , AppConfigVars

 ){

     // Create the "login" pane, based on a normal ContentPane
     var Dashboard = declare('hotplate/bd/Dashboard',  [_WidgetBase, _Container, _ContentPaneResizeMixin, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {
     // var Dashboard = declare('hotplate/bd/Dashboard',  [ ContentPane, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {

      widgetsInTemplate: true,

      templateString: jade.compile('' +
        'div\n' +
        '  div( data-dojo-attach-point="listNode")\n'+
        '  div( data-dojo-attach-point="selectNode")\n'+
        '  p MEMEMEM\n'+
        '')(),


        postCreate:function(){
          var that = this, q;

          this.inherited(arguments);

          var escapeHTML = function( str ) {
            var div  = document.createElement( 'div' );
            var text = document.createTextNode( str );
            div.appendChild( text );
            return div.innerHTML;
          };

        },

        startup: function(){
          this.inherited(arguments);
          var counter = 0;

          this.editableList = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',
            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.name + ' ' + object._id + ' ' + counter++ );
                return row;
              },

							postCreate: function(){
                var self = this;
								this.inherited(arguments);
								// this.set( 'queryOptions',{ before: { _id: '514aba99849418630e0001b8' }  } );
								this.set( 'queryOptions', { placeNew: 'last' } );
								// this.set( 'queryOptions', { placeNew: 'none', sort: [ { attribute:'name' } ]  } );
								// this.set( 'queryOptions',{ placeNew: 'last' } );
								//this.set( 'queryOptions',{ before: null  } );
                // aspect.after(this, 'insertRow', function(){
                //  console.log("PPPP");
                //}, true );
							}

            }),

            EditingConstructor: declare([ EditingWidget ], {
              templateString: jade.compile( '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputfield\n' +
                '        input( id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%;", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")' +
                '' )(),
                alertBarDomPlacement: 'last',

            }),

            AddingConstructor: declare([ EditingWidget ], {
              templateString: jade.compile( '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputField\n' +
                '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit", style="width:5%;padding-left: 10px;",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Add")' +
                '' )(),
                resetOnSuccess: true,
                alertBarDomPlacement: 'last',
            }),


            storeName: 'categories',
            store: stores( 'categories', { workspaceIdCall: globals.workspaceId } ),
            editingWidgetPlacement: 'inline',
            multipleEditingAllowed: true,
            addingWidgetRegion: 'top',
            gutters: false,

            editButton: 'edit',
            // deleteButton: 'delete',

          }, this.listNode );

          this.editableList.startup();
       

          this.storeSelect =  new StoreSelect( {
            storeName: 'categories',
            store: stores( 'categories', { workspaceIdCall: globals.workspaceId } ),
            baseClass: 'category-picker',
            queryOptions: { placeNew: 'last' },
            renderRow: function( object ){
              var row = put('div.row', object.name );
              return row;
            },
            value: '514c6edcbbd8ca9f680000b2',
          }, this.selectNode);



          this.storeSelect.startup();
        },

   });

  return Dashboard;

});

