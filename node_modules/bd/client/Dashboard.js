define([
   "dojo/_base/declare",

   "dijit/form/ValidationTextBox",

   'dgrid/List',
   'dgrid/OnDemandList',
   "dgrid/Selection",
   "dgrid/Keyboard",
   "dgrid/util/mouse",
   "dgrid/extensions/DijitRegistry",
   'put-selector/put',

   "hotplate/hotDojoJade/DestroyableJadeTemplatedContainer",
   "hotplate/hotDojoAuth/panels/Manager",
   "hotplate/hotDojoWidgets/EditingWidget",
   "hotplate/hotDojoDgridWidgets/EditableList",
   "hotplate/hotDojoDgridWidgets/StoreSelect",
   "hotplate/hotDojoWidgets/BusyButton",
   "hotplate/hotDojoStores/stores",
   "hotplate/hotDojoGlobals/globals",
   "hotplate/hotDojoJade/_JadeTemplatedMixin",

   ], function(
     declare

     , ValidationTextBox

     , List
     , OnDemandList
     , Selection
     , Keyboard
     , mouse
     , DijitRegistry
     , put

     , DestroyableJadeTemplatedContainer
     , Manager
     , EditingWidget
     , EditableList
     , StoreSelect
     , BusyButton
     , stores
     , globals
     , _JadeTemplatedMixin

 ){

    // Create the "login" pane, based on a normal ContentPane
    //var Dashboard = declare('hotplate/bd/Dashboard',  [_WidgetBase, _Container, _ContentPaneResizeMixin, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {
    // var Dashboard = declare('hotplate/bd/Dashboard',  [ ContentPane, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {

    var Dashboard = declare('hotplate/bd/Dashboard',  [ DestroyableJadeTemplatedContainer ], {

      templateString: '' +
        'div\n' +
        '  form\n'+
        '    table\n'+
        '      tr\n'+
        '        td\n'+
        '          div( data-dojo-attach-point="workspacesCategoriesNode")\n'+
        '          div( data-dojo-attach-point="workspacesCategoriesSelectNode")\n'+
        '        td\n'+
        '          div( data-dojo-attach-point="usersCategoriesNode")\n'+
        '          div( data-dojo-attach-point="usersCategoriesSelectNode")\n'+
        '        td\n'+
        '          div( data-dojo-attach-point="workspacesUsersCategoriesNode")\n'+
        '          div( data-dojo-attach-point="workspacesUsersCategoriesSelectNode")\n'+

        '  div( data-dojo-attach-point="managerNode")\n'+
        '',


        postCreate:function(){
          var that = this, q;

          this.inherited(arguments);

        },

        startup: function(){
          this.inherited(arguments);
          var counter = 0;

          var strategiesStore = stores( 'UsersStrategies', { userId: globals.userId } );

          //var manager = new Manager( { store: strategiesStore }, this.listNode2 );
          var manager = new Manager( {}, this.managerNode );
          manager.startup();
         
          this.workspacesCategories = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'last' } );
                // this.set( 'queryOptions',{ before: { _id: '514aba99849418630e0001b8' }  } );
                // this.set( 'queryOptions', { placeNew: 'none', sort: [ { attribute:'name' } ]  } );
                // this.set( 'queryOptions',{ placeNew: 'last' } );
                // this.set( 'queryOptions',{ before: null  } );
              }

            }),

            EditingConstructor: declare([ _JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputfield\n' +
                '        input( id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%;", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")' +
                '',
                alertBarDomPlacement: 'last',
                startup: function(){
                  this.inherited(arguments);
                  this.nameWidget.focus();
                },

            }),

            AddingConstructor: declare( [_JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputField\n' +
                '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit", style="width:5%;padding-left: 10px;",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Add")' +
                '',
                resetOnSuccess: true,
                alertBarDomPlacement: 'last',
            }),

            storeName: 'WorkspacesCategories',
            store: stores( 'WorkspacesCategories', { workspaceId: globals.workspaceId } ),
            editingWidgetPlacement: 'inline',
            multipleEditingAllowed: true,
            addingWidgetRegion: 'top',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

          }, this.workspacesCategoriesNode );
          // } );

          this.workspacesCategories.startup();


          this.usersCategories = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'last' } );
              }

            }),

            EditingConstructor: declare( [ _JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputfield\n' +
                '        input( id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%;", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")' +
                '',
                alertBarDomPlacement: 'last',
                startup: function(){
                  this.inherited(arguments);
                  this.nameWidget.focus();
                },

            }),

            AddingConstructor: declare( [ _JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputField\n' +
                '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit", style="width:5%;padding-left: 10px;",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Add")' +
                '',
                resetOnSuccess: true,
                alertBarDomPlacement: 'last',
            }),

            storeName: 'UsersCategories',
            store: stores( 'UsersCategories', { userId: globals.userId } ),
            editingWidgetPlacement: 'inline',
            multipleEditingAllowed: true,
            addingWidgetRegion: 'top',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

          }, this.usersCategoriesNode );

          this.usersCategories.startup();



          this.workspacesUsersCategories = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.name + ' ' + object.id + ' ' + counter++ );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'first' } );
              }

            }),

            EditingConstructor: declare( [ _JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputfield\n' +
                '        input( id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%;", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")' +
                '',
                alertBarDomPlacement: 'last',
                startup: function(){
                  this.inherited(arguments);
                  this.nameWidget.focus();
                },

            }),

            AddingConstructor: declare( [ _JadeTemplatedMixin, EditingWidget ], {
              templateString: '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputField\n' +
                '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit", style="width:5%;padding-left: 10px;",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Add")' +
                '',
                resetOnSuccess: true,
                alertBarDomPlacement: 'last',
            }),

            storeName: 'WorkspacesUsersCategories',
            store: stores( 'WorkspacesUsersCategories', { userId: globals.userId, workspaceId: globals.workspaceId } ),
            editingWidgetPlacement: 'dialog',
            multipleEditingAllowed: false,
            addingWidgetRegion: 'bottom',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

          }, this.workspacesUsersCategoriesNode );
          // } );

          this.workspacesUsersCategories.startup();


          this.workspacesCategoriesSelect =  new StoreSelect( {
            storeName: 'WorkspacesCategories',
            store: stores( 'WorkspacesCategories', { workspaceId: globals.workspaceId } ),
            baseClass: 'category-picker',
            // query: { name: "O" },
            queryOptions: { placeNew: 'last' },
            renderRow: function( object ){
              var row = put('div.row', object.name );
              return row;
            },
            // value: '514c6edcbbd8ca9f680000b2',
          }, this.workspacesCategoriesSelectNode );
          this.workspacesCategoriesSelect.startup();


          this.usersCategoriesSelect =  new StoreSelect( {
            storeName: 'UsersCategories',
            store: stores( 'UsersCategories', { userId: globals.userId } ),
            baseClass: 'category-picker',
            // query: { name: "O" },
            queryOptions: { placeNew: 'last' },
            renderRow: function( object ){
              var row = put('div.row', object.name );
              return row;
            },
            // value: '514c6edcbbd8ca9f680000b2',
          }, this.usersCategoriesSelectNode );
          this.usersCategoriesSelect.startup();

          this.workspacesUsersCategoriesSelect =  new StoreSelect( {
            storeName: 'WorkspacesUsersCategories',
            store: stores( 'WorkspacesUsersCategories', { workspaceId: globals.workspaceId, userId: globals.userId } ),
            baseClass: 'category-picker',
            // query: { name: "O" },
            queryOptions: { placeNew: 'last' },
            renderRow: function( object ){
              var row = put('div.row', object.name );
              return row;
            },
            // value: '514c6edcbbd8ca9f680000b2',
          }, this.workspacesUsersCategoriesSelectNode );
          this.workspacesUsersCategoriesSelect.startup();

        },

   });

  return Dashboard;

});



                              /*
                              '  <button data-dojo-type="dijit/form/DropDownButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\',labelll:\'AND\'">\n'+
                              '     <span>Edit<b>!</b></span>\n'+
                              '       <span id="editMenu" data-dojo-type="dijit/Menu" >\n'+
                              '         <span id="cut" data-dojo-type="dijit/MenuItem" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\'">Cut</span>\n'+
                              '         <span id="paste" data-dojo-type="dijit/MenuItem" data-dojo-attach-point="otherButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconPaste\'">Paste</span>\n'+
                              '       </span>\n'+
                              '     </span>\n'+
                              '  </button>\n'+
                              */
 
