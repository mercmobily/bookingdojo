
define( [
  "dojo/_base/declare"

, "dijit/form/Form"
, "dijit/form/ValidationTextBox"
, "dijit/form/CheckBox"
, "hotplate/hotDojoWidgets/BusyButton"


, "hotplate/hotDojoWidgets/EditingWidget"
, "hotplate/hotDojoStores/stores"
, "hotplate/hotDojoGlobals/globals"

, "hotplate/bd/WorkspacesUsersConfig/WorkspacesContactsEmailsSelect"


], function(

  declare

, Form
, ValidationTextBox
, CheckBox
, BusyButton

, EditingWidget
, stores
, globals

, WorkspacesContactsEmailsSelect

){

  return declare( [ EditingWidget ], {
    templateString: '' +
    '<div class="workspaces-users-info">\n'+
    '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST">\n'+
    '    <div class="box">\n'+
    '      <p class="boxTitle">Your settings</p>\n'+

    '      <div class="inputField">\n'+
    '        <label for="${id}_setting1">Setting 1</label>\n'+
    '        <input id="${id}_setting1" name="setting1" data-dojo-type="dijit/form/ValidationTextBox" data-dojo-attach-point="setting1Widget" size="40" maxlength="80", required:true" />\n'+
    '      </div>\n' +

    '      <div class="inputField">\n'+
    '        <label for="${id}_orderByNameDefault">Order contacts by name by default</label>\n'+
    '        <input id="${id}_orderByNameDefault" name="orderByNameDefault" data-dojo-type="dijit/form/CheckBox" data-dojo-attach-point="orderByNameDefault" size="40" maxlength="80", required:true" />\n'+
    '      </div>\n' +

    '      <div name="setting3" data-dojo-type="hotplate/bd/WorkspacesUsersConfig/WorkspacesContactsEmailsSelect" data-dojo-props="storeExtraParameters:{ contactId: vars.hotCoreStoreConfig.storeRecords.workspacesUsersInfo._children.workspacesContacts[0].id }"></div>\n' +

    '      <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />\n'+
    '    </div>\n' +
    '  </form>\n' +
    '</div>\n' +
    '',

    storeName: 'workspacesUsersInfo',
    storeParameters: { workspaceId: globals.workspaceId },
    recordId: globals.userId,

    // Sets the boolean widget depending on value fetched
    afterFormWidgetSet: function( res ){
      if( res.orderByNameDefault ) this.orderByNameDefault.set('value', true );
    },

    manipulateValuesBeforeSubmit: function( values ){
      values.orderByNameDefault = values.orderByNameDefault.indexOf( 'on' ) !== -1;
    },


  });
});


