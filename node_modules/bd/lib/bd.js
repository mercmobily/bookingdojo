var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, Store = require('jsonreststores')
, MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

, Schema = require('simpleschema')
, MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, db = hotplate.get('db')

, ObjectId = mongoWrapper.ObjectId
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hooks.init = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule('hotCoreJsonRestStores');

  // Mixin the extra hotplate-specific and driver-specific attributes  to
  // the generic Store/Schema
  var HotStore = declare( [ Store, MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  var HotSchema = declare( [ Schema, MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );



  var WorkspaceCategories = exports.WorkspaceCategories = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      workspaceId  : { type: 'id' },
      _id          : { type: 'id', required: true, searchable: true },

      name         : { type: 'string', notEmpty: true, trim: 50 },
    }),

    // COMMON
    searchSchema: new HotSchema({
      _id        : { type: 'id' },
      workspaceId: { type: 'id' },
      name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'workspaceCategories',
    paramIds: [ 'workspaceId', '_id' ],
      
    publicURL: '/config/workspace/:workspaceId/categories/',
    configStore: { workspaceId: true },

    // queryFilterType: '$or',
  });

  var UserCategories = exports.UserCategories = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      userId       : { type: 'id' },
      _id          : { type: 'id', required: true, searchable: true },

      name         : { type: 'string', notEmpty: true, trim: 50 },
    }),

    // COMMON
    searchSchema: new HotSchema({
      _id        : { type: 'id' },
      userId     : { type: 'id' },
      name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'userCategories',
    paramIds: [ 'userId', '_id' ],
      
    publicURL: '/config/user/:userId/categories/',
    configStore: { userId: true },

    // queryFilterType: '$or',
  });

  var WorkspaceUserCategories = exports.WorkspaceUserCategories = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      workspaceId  : { type: 'id' },
      userId       : { type: 'id' },
      _id          : { type: 'id', required: true, searchable: true },

      name         : { type: 'string', notEmpty: true, trim: 50 },
    }),

    // COMMON
    searchSchema: new HotSchema({
      _id        : { type: 'id' },
      userId     : { type: 'id' },
      workspaceId: { type: 'id' },
      name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'workspaceUserCategories',
    paramIds: [ 'workspaceId', 'userId', '_id' ],
      
    publicURL: '/config/workspace/:workspaceId/user/:userId/categories/',
    configStore: { userId: true, workspaceId: true },

    // queryFilterType: '$or',
  });



  /* ****************************************************************** */
  /* ****************************************************************** */
  /* ****************************************************************** */

  var UserConfig = exports.UserConfig = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      userId    :  { type: 'id', required: true },
      email     :  { type: 'string', default: "youremail@example.com", required: true, notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
      surname   :  { type: 'string', default: "Your surname", required: true, notEmpty: true, trim: 10 },
      name      :  { type: 'string', default: "Your name", required: true, notEmpty: true, trim: 50 },
    },

    {
      validator: function( schema, errors, cb ){
        if( this.name == 'Tony' ){
          // cb( new Error("NO, TONY NO!" ) );
          errors.push( { field: 'name', message: 'NO! TONY NO!' } );
          cb( null );
        } else {
          cb( null );
        }
      },

    } ),

    // COMMON
    searchSchema: new HotSchema({
      userId    : { type: 'id' },

      email     : { type: 'string', trim: 70, min: 4 },
      surname   : { type: 'string' },
      name      : { type: 'string' },
    }),

    paramIds :  [ 'userId' ],

    handlePut: true,
    handleGet: true,

    storeName:  'userConfig',

    publicURL: '/config/user/',
    configStore: { userId: true },

  });


  var WorkspaceConfig = exports.WorkspaceConfig = declare( HotStore, {

    schema: new HotSchema({
      workspaceId : { type: 'id' },
      longName    : { type: 'string', default: "Workspace's long name", required: true, notEmpty: true, trim: 35 },
      tag         : { type: 'string', default: "Workspace's tag line", required: true, notEmpty: true, notEmpty: true, trim: 70 },
    }),

    searchSchema: new HotSchema({
      workspaceId : { type: 'id' },
      longName    : { type: 'string' },
      tag         : { type: 'string' },
    }),

    storeName:  'workspaceConfig',
    paramIds: [ 'workspaceId' ],

    handlePut: true,
    handleGet: true,

    publicURL: '/config/workspace/',
    configStore: { workspaceId: true },


    checkPermissionsGet: function(  params, body, options, doc, fullDoc, cb ){
      cb( null, true );
    },

    checkPermissionsPutExisting: function( params, body, options, doc, fullDoc, cb ) {
      
      if( ! this._req.session.loggedIn ){
        cb( null, false );
      } else {
        cb( null, true );
      }

    },

    // Nobody can create new records -- they need to exist beforehand
    checkPermissionsPutNew: function( params, body, options, cb){
      cb( null, false );
    },
    
  });


  var WorkspaceUserConfig = exports.WorkspaceUserConfig = declare( HotStore, {

    // COMMON

    schema: new HotSchema({
      workspaceId   : { type: 'id' },
      userId        : { type: 'id' },
      localEmail    : { type: 'string', default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35 },
    }),

    searchSchema: new HotSchema({
      workspaceId   : { type: 'id' },
      userId        : { type: 'id' },

      localEmail : { type: 'string'},
    }),

    storeName: 'workspaceUserConfig',
    paramIds: [ 'workspaceId', 'userId' ],

    handlePut: true,
    handleGet: true,

    publicURL: '/config/workspace/:workspaceId/user/',
    configStore: { workspaceId: true, userId: true },

  } );

  done( null );
}

hooks.init.after = [ 'hotCoreJsonRestStores' ];


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.pageElementsPerPage = function( elements, req, pageName, done ){


  switch(pageName){


    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        moduleName: 'bd', result: {
          jses:  ['bdMain.js', 'jade.js' ],
          csses: ['bdMain.css' ],
        }
      });

    break;

   default:
      done( null, { moduleName: 'bd', result: {} }  );
    break;
  }
}


hooks.stores = function( done ){

  done( null,  {
    moduleName: 'bd', result: [ exports.WorkspaceCategories, exports.UserCategories, exports.WorkspaceUserCategories, exports.UserConfig, exports.WorkspaceConfig, exports.WorkspaceUserConfig ]
  });

}

/*
hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}
*/


