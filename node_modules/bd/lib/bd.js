var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, Store = require('jsonreststores-mongo')

, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, db = hotplate.get('db')
, declare = require( 'simpledeclare' )

, ObjectId = mongoWrapper.ObjectId
, Schema = Store.Schema
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hooks.creatingUser = function( done, u, body ){

  var userConfig = {};
  userConfig.email = u.registerEmail;
  userConfig.name = body.name;
  userConfig.surname = body.surname;
  userConfig._id = u._id;

  var userConfigCollection = db.collection('userConfig');

  console.log( userConfig ); 
  userConfigCollection.insert( userConfig, done );

}

hooks.creatingWorkspace = function( done, u, w ){

  
  var accessConfig = {};

  accessConfig._id = u._id;
  accessConfig.workspaceId = w._id;
  accessConfig.localEmail = u.registerEmail;
  // ...

  db.collection('accessConfig').insert( accessConfig, function( err ){

    if( err ){
      done( err );
    } else {

      var workspaceConfig = {};
      workspaceConfig.tag = "Your tagline here";
      workspaceConfig.longName = "Your workspace's description here";
      workspaceConfig._id = w._id;

      db.collection('workspaceConfig').insert( workspaceConfig, done );
    }
  })
}


hooks.createWorkspaceAnonSchema = function( done, schema ){

  schema.structure.name    = { type: 'string', notEmpty: true, required: true, trim: 45 };
  schema.structure.surname = { type: 'string', notEmpty: true, required: true, trim: 60 };

  done( null );
}

hooks.init = function( done ){
  done( null );
}

hooks.run = function( done ){

  var resUtils = hotplate.getModule('hotCoreResUtils');
  var messages = hotplate.getModule('hotMongoCometMessages');
  var sharedCode = hotplate.getModule('hotCoreSharedCode');
  var hotCoreJsonRestStores = hotplate.getModule('hotCoreJsonRestStores');

  // Add the db property to the mixin
  hotCoreJsonRestStores.StoreMixin.db = db;

  // Mixin the extra hotplate-specific methods and attributes to
  // the picked JsonRest Stores
  var HotStore = declare( Store, hotCoreJsonRestStores.StoreMixin );
  var HotSchema = declare( Store.Schema, hotCoreJsonRestStores.SchemaMixin );
  HotStore.Schema = HotSchema;


  var Categories = declare( HotStore, {

    // COMMON
    schema: new Schema({
      name    : { type: 'string', searchable: true, searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'categories',
    paramIds: [ 'workspaceId', '_id' ],
    // queryFilterType: '$or',
    // cometGroup: ['one', 'two', 'three' ],


  });

  Categories.make.All( app, '/call/:workspaceId/Categories/', ':_id', Categories );



  /* ****************************************************************** */
  /* ****************************************************************** */
  /* ****************************************************************** */


  var UserConfig = declare( HotStore, {

    // COMMON
    schema: new Schema({
      email   : { type: 'string', notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
      surname : { type: 'string', notEmpty: true, trim: 10 },
      name    : { type: 'string', notEmpty: true, trim: 50 },
    },
    {
      validate: function( schema, errors, cb ){
        if( this.name == 'Tony' ){
          cb( new Error("NO, TONY NO!" ) );
        } else {
          cb( null );
        }
      },


    } ),

    handlePut: true,
    handleGet: true,

    collectionName: 'userConfig',

    storeName:  'userConfig',
    paramIds: [ 'workspaceId', '_id' ],
    ignoreIds: [ 'workspaceId' ],
    

    // Permissions for the get
    checkPermissionsGet: function( req, doc, fullDoc, cb ) {
      cb( null, req.application.workspace.access.filter( function(o){ return o._id.toString() === doc._id.toString(); } ).length  );
    },
  
    // Permissions to save data
    checkPermissionsPutExisting: function( req, doc, fullDoc, cb ) {
      // TODO: implement this
      cb( null, true );
    },

    // Nobody cannnot create new records -- they need to exist beforehand
    checkPermissionsPutNew: function( req, cb){  cb( null, false );  },
  });

  Store.make.All( app, '/call/:workspaceId/userConfig/', ':_id', UserConfig );
 

  var UserConfigNoWorkspace = declare( UserConfig, {

    // Redefine the permission calls 
    checkPermissionsGet: function(  req, doc, fullDoc, cb ){
      cb( null,  req.session.userId.toString() == req.params.userId );
    },
    checkPermissionsPutExisting: function( req, doc, fullDoc, cb ) {
      cb( null, ! req.session.userId.toString() == doc._id.toString() );
    },

    killComet: true,
  });

  Store.make.All( app, '/call/userConfigNoWorkspace/', ':_id', UserConfigNoWorkspace );
  

  var WorkspaceConfig = declare( HotStore, {

    schema: new Schema({
      longName: { type: 'string', notEmpty: true, trim: 35 },
      tag     : { type: 'string', notEmpty: true, notEmpty: true, trim: 70 },
    }),
    storeName:  'workspaceConfig',
    paramIds: [ 'workspaceId', '_id' ],
    ignoreIds: [ 'workspaceId' ],

    handlePut: true,
    handleGet: true,

    checkPermissionsGet: function(  req, doc, fullDoc, cb ){
      cb( null, true );
      // cb( null, resUtils.currentUserInWorkspaceAccess( req, fullDoc ) );
    },

    checkPermissionsPutExisting: function( req, doc, fullDoc, cb ) {
      cb( null, true );
      // cb( null, resUtils.currentUserInWorkspaceAccess( req, fullDoc ) );
    },

    // Nobody cannnot create new records -- they need to exist beforehand
    checkPermissionsPutNew: function( req, cb){  cb( null, false );  },

  });

  Store.make.All( app, '/call/:workspaceId/workspaceConfig/', ':_id', WorkspaceConfig );

  

  var AccessConfig = declare( HotStore, {

    // COMMON

    schema: new Schema({
      localEmail: { type: 'string', notEmpty: true, trim: 35 },
    }),

    storeName: 'accessConfig',
    paramIds: [ 'workspaceId', '_id' ],

    handlePut: true,
    handleGet: true,

    // checkPermissionsGet:function( req, doc, fullDoc, cb ) {
    //   cb( null, true );
    // },

    // checkPermissionsPutExisting:function( req, doc, fullDoc, cb ) {
    //   cb( null, req.application.user._id.toString() == doc._id.toString() );
    // },

  } );

  Store.make.All( app, '/call/:workspaceId/accessConfig/', ':_id', AccessConfig );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){


  switch(pageName){


    case 'hotDojoAppContainer/container':

      var userConfig, accessConfig, workspaceConfig;

      db.collection('userConfig').findOne( { _id: req.application.user._id }, function( err, doc ){

        if( err ) {
          done( err );
        } else {
          userConfig = doc;

          db.collection('workspaceConfig').findOne( { _id: req.application.workspace._id }, function( err, doc ){
            if( err ) {
              done( err );
            } else {
              workspaceConfig = doc;    

              db.collection('accessConfig').findOne( { _id: req.application.user._id, workspaceId: req.application.workspace._id }, function( err, doc ){
                if( err ) {
                  done( err );
                } else {

                  accessConfig        = doc;

                  // Sending the page out
                  done( null, {
                    moduleName: 'bd', result: {
                      jses:  ['bdMain.js', 'jade.js' ],
                      csses: ['bdMain.css' ],
                      vars: [
                        { name: 'userConfig',      value: userConfig },
                        { name: 'accessConfig',    value: accessConfig },
                        { name: 'workspaceConfig', value: workspaceConfig } 
                      ], 
                    }
                  });
                }
              })

            };
          })
        }


      });
      
   break;

    // Add an extra div to the "No workspaces to pick!" page, so that
    // a user can click on their config if they like (they are logged in after all)
    case 'hotDojoAuth/pickButEmptyPage':

      done( null, {
               moduleName: 'bd', result: {
                 body: elements.body.replace('</div></body>', '<div id="userConfig"></div></div></body>'),
                 jses: ['mainPickEnrich.js', 'jade.js'],
              }
      });
    break;

    case 'hotDojoAuth/registerPage':
      done( null, {
               moduleName: 'bd', result: {
                 jses: ['mainChangeRegisterForm.js'],
              }
      });
    break;

    default:
      done( null, { moduleName: 'bd', result: {} }  );
    break;
  }
}


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, { 
    accessConfig         : { target: '/call/:workspaceId/accessConfig/',    idProperty: '_id', sortParam: 'sortBy', },
    workspaceConfig      : { target: '/call/:workspaceId/workspaceConfig/', idProperty: '_id', sortParam: 'sortBy', },
    userConfig           : { target: '/call/:workspaceId/userConfig/',      idProperty: '_id', sortParam: 'sortBy', },
    userConfigNoWorkspace: { target: '/call/userConfigNoWorkspace/',        idProperty: '_id', sortParam: 'sortBy', },
    options              : { target: '/call/:workspaceId/Options/',         idProperty: '_id', sortParam: 'sortBy', },
    categories           : { target: '/call/:workspaceId/Categories/',      idProperty: '_id', sortParam: 'sortBy', },
  });
}


hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}



/*
  var OptionsStore = declare( Store,  {
    storeName: 'options',
    db: db,
    schema: new Schema({
      _id   : { type: 'id', required: true },

      name  : { type: 'string', notEmpty: true, trim: 50, searchable: true, sortable: true, searchPartial: true },
      age   : { type: 'number', notEmpty: true , searchable: true, sortable: true },
    }),

    paramIds: [ 'optionId' ],
    handleGet: true,
    handleGetQuery: true,
    handlePut: true,
    handlePost: true,

    allDbExtrapolateDoc: function( fullDoc, res, cb ){
      var d = {};
      d.name = fullDoc.name;
      d._id = fullDoc._id;
      cb( null, d );
    },
    getDbPrepareBeforeSend: (function(){
      var i = 0;

      return function( doc, cb ){
        doc.CAZ = i ++;
        cb( null, doc ) 
      }
    })(),
  });

  // app.get( '/call/:workspaceId/Options/:optionId', JsonRestStores.Store.makeGet( OptionsStore ) );
  
  Store.make.All( app,  '/call/:workspaceId/Options/', ':optionId', OptionsStore );
  */


