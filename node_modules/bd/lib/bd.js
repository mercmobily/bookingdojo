var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, JsonRestStore = require('jsonreststores')
, SimpleSchema = require('simpleschema')
, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
, hotCoreMultiHome = hotplate.require('hotCoreMultiHome')

;

app = hotplate.app;

exports.hotHooks = hooks = {}


hotplate.hotEvents.on('stores', 'bd', hotplate.cachable( function( done ){

  var stores = {};

  var MultiHomePermsMixin = hotCoreMultiHome.MultiHomeBasicPermissionsMixin;
  var PrivateUserDataMixin = hotCoreJsonRestStores.PrivateUserDataPermissionsMixin;

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ){
      done( err );
    } else {


      // Mixin the extra hotplate-specific and driver-specific attributes  to
      // the generic Store/Schema
      var HotStore = s.HotStore;
      var HotSchema = s.HotSchema;
    
      stores.WorkspacesCategories = declare( [ HotStore, MultiHomePermsMixin ], {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          id           : { type: 'id' },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          id         : { type: 'id' },
          workspaceId: { type: 'id' },
          name       : { type: 'string', searchable: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'WorkspacesCategories',
        paramIds: [ 'workspaceId', 'id' ],
          
        publicURL: '/config/workspaces/:workspaceId/categories/',
        configStore: { workspaceId: true },
    
        // queryFilterType: '$or',
      });
    
      stores.UsersCategories = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        // COMMON
        schema: new HotSchema({
          userId       : { type: 'id' },
          id           : { type: 'id' },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          id         : { type: 'id' },
          userId     : { type: 'id' },
          name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'UsersCategories',
        paramIds: [ 'userId', 'id' ],
          
        publicURL: '/config/users/:userId/categories/',
        configStore: { userId: true },
    
        // queryFilterType: '$or',
      });
    
      stores.WorkspacesUsersCategories = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          userId       : { type: 'id' },
          id           : { type: 'id' },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          id         : { type: 'id' },
          userId     : { type: 'id' },
          workspaceId: { type: 'id' },
          name       : { type: 'string', filterType: { type: 'startWith' }, sortable: true, notEmpty: true, trim: 50 },

          nameCont   : { type: 'string', filterType: { type: 'contains', field: 'name', condition: 'or' } },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'WorkspacesUsersCategories',
        paramIds: [ 'workspaceId', 'userId', 'id' ],
          
        publicURL: '/config/workspaces/:workspaceId/users/:userId/categories/',
        configStore: { userId: true, workspaceId: true },
    
        // queryFilterType: '$or',
      });
    
    
    
      /* ****************************************************************** */
      /* ****************************************************************** */
      /* ****************************************************************** */
    
      stores.UsersConfig = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        // COMMON
        schema: new HotSchema({
          userId      :  { type: 'id', required: true },
          email       :  { type: 'string', default: "youremail@example.com", notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
          userCategory:  { type: 'id', required: false, notEmpty: false },
          surname     :  { type: 'string', default: "Your surname", notEmpty: true, trim: 10 },
          name        :  { type: 'string', default: "Your name", notEmpty: true, trim: 50 },
        },

    
        {
          validator: function( object, originalObject, castObject, options, cb ){

            var errors = [];
            if( object.name == 'Tony' ){
              // cb( new Error("NO, TONY NO!" ) );
              errors.push( { field: 'name', message: 'NO! TONY NO!' } );
            }
            cb( null, errors );
          },
    
        } ),

        // COMMON
        searchSchema: new HotSchema({
          userId    : { type: 'id' },
    
          email     : { type: 'string', trim: 70, min: 4 },
          surname   : { type: 'string' },
          name      : { type: 'string' },
        }),
    
        paramIds :  [ 'userId' ],
    
        handlePut: true,
        handleGet: true,
    
        storeName:  'UsersConfig',
    
        publicURL: '/config/users/',
        configStore: { userId: true },
    
      });
    
    
      stores.WorkspacesConfig = declare( [ HotStore, MultiHomePermsMixin ], {
    
        schema: new HotSchema({
          workspaceId : { type: 'id' },

          longName    : { type: 'string', default: "Workspace's long name", notEmpty: true, trim: 35 },
          tag         : { type: 'string', default: "Workspace's tag line",  notEmpty: true, notEmpty: true, trim: 70 },
        }),
    
        searchSchema: new HotSchema({
          workspaceId : { type: 'id' },
          longName    : { type: 'string' },
          tag         : { type: 'string' },
        }),
    
        storeName:  'WorkspacesConfig',
        paramIds: [ 'workspaceId' ],
    
        handlePut: true,
        handleGet: true,
    
        publicURL: '/config/workspaces/',
        configStore: { workspaceId: true },
    
    
        checkPermissionsGet: function(  params, body, options, doc, fullDoc, cb ){
          cb( null, true );
        },
    
        checkPermissionsPutExisting: function( params, body, options, doc, fullDoc, cb ) {
          
          if( ! this._req.session.loggedIn ){
            cb( null, false );
          } else {
            cb( null, true );
          }
    
        },
    
        // Nobody can create new records -- they need to exist beforehand
        checkPermissionsPutNew: function( params, body, options, cb){
          cb( null, false );
        },
        
      });
    
    
      stores.WorkspacesUsersConfig = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          workspaceId   : { type: 'id' },
          userId        : { type: 'id' },

          localEmail    : { type: 'string', default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35 },
        }),
    
        searchSchema: new HotSchema({
          workspaceId   : { type: 'id' },
          userId        : { type: 'id' },
    
          localEmail : { type: 'string'},
        }),
    
        storeName: 'WorkspacesUsersConfig',
        paramIds: [ 'workspaceId', 'userId' ],
    
        handlePut: true,
        handleGet: true,
    
        publicURL: '/config/workspaces/:workspaceId/users/',
        configStore: { workspaceId: true, userId: true },
    
      } );
    
      stores.NonConfig = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ],  {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          userId       : { type: 'id' },
          id           : { type: 'id' },
    
          nonConfig    : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          id         : { type: 'id' },
          userId     : { type: 'id' },
          workspaceId: { type: 'id' },
          nonConfig  : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'NonConfig',
        paramIds: [ 'workspaceId', 'userId', 'id' ],
          
        publicURL: '/nonConfig/workspaces/:workspaceId/users/:userId/nonConfig/',
    
        // queryFilterType: '$or',
      });
    }
  }); 
    
  done( null, [ stores.WorkspacesCategories, stores.UsersCategories, stores.WorkspacesUsersCategories, stores.UsersConfig, stores.WorkspacesConfig, stores.WorkspacesUsersConfig, stores.NonConfig ] );

} ))



// Simply activate path to client files
hotplate.hotEvents.on( 'clientPaths', 'bd', function( done ){
  done( null, [ path.join(__dirname, '../client') ] );
} )



hotplate.hotEvents.on( 'dojoModulesPerPage', 'bd', function( req, pageName, done ){

  switch( pageName ){

    case 'hotDojoAppContainer/container':
      done( null, [ 'bdMain' ] );
    break;

    default:
      done( null, [ ] );
    break;
  }

});


hotplate.hotEvents.on( 'pageElements', 'bd', function( done ){
    done( null, { titleWords: [ "Booking Dojo" ] } );
})

hotplate.hotEvents.on( 'pageElementsPerPage', 'bd', function( req, pageName, done ){

  switch(pageName){

    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        jses:  ['jade.js' ],
        csses: ['bdMain.css' ],
        titleWords: [ "Application" ],
      });

    break;

   default:
      done( null, {} );
    break;
  }
});



