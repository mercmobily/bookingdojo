var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
, hotCoreMultiHome = hotplate.require('hotCoreMultiHome')

, jsonRestStores = require( 'jsonreststores' )
, async = require( 'async' )
, fetch = require("fetch")
, cheerio = require("cheerio")
, querystring = require('querystring');
;

var app = hotplate.app;

var stores = {};

jsonRestStores.artificialDelay = 500;

exports.hotHooks = hooks = {}

hotplate.hotEvents.on( 'setRoutes', hotplate.cachable( function( app, done ){

  app.post( '/testing', function( req, res, next ){
    console.log("REQUEST RECEIVED:");
    console.log( req.headers );
    console.log( req.body );
    res.json( req.body );
  });


  app.get( '/logs/:workspaceId', function( req, res, next ){

    //stores.workspacesNinjaFormLogs.dbLayer.select( { conditions: { and: [ { field: 'workspaceId', type: 'eq', value:  req.params.workspaceId } ] }, sort: { date: 1  } }, { skipHardLimitOnQueries: true }, function( err, logLines ){
    stores.workspacesNinjaFormLogs.dbLayer.select( { sort: { date: 1  } }, { skipHardLimitOnQueries: true }, function( err, logLines ){
      if( err ) return next( err );

      var logs = '';
      for( var k in logLines ){
        var line = logLines[ k ];
        logs = logs + line.remoteDate + '\t' + line.subsystem + '\t' + line.submitLabel + '\t' + line.line + '\n';
      }
      res.set('Content-Type', 'text/plain' );
      res.send( logs );   
    });

  });

  
  done( null );

}));

hotplate.hotEvents.on( 'stores', 'bd', hotplate.cachable( function( done ){


  var MultiHomePermsMixin = hotCoreMultiHome.MultiHomeBasicPermissionsMixin;
  var PrivateUserDataMixin = hotCoreJsonRestStores.PrivateUserDataPermissionsMixin;

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ){
      done( err );
    } else {

      // Mixin the extra hotplate-specific and driver-specific attributes  to
      // the generic Store/Schema
      var HotStore = s.HotStore;
      var HotSchema = s.HotSchema;

      var UsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          email       :  { type: 'string', required: true, default: "youremail@example.com", notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
          surname     :  { type: 'string', required: true, default: "Your surname", notEmpty: true, trim: 10 },
          name        :  { type: 'string', required: true, default: "Your name", notEmpty: true, trim: 50 },
        }),

        onlineSearchSchema: new HotSchema({
          email     : { type: 'string' },
          surname   : { type: 'string' },
          name      : { type: 'string' },
        }),
    
        handlePut: true,
        handleGet: true,
    
        storeName:  'usersInfo',
    
        publicURL: '/config/users/:userId',
        hotExpose: true,
        configStore: { userId: true },
      });
      stores.usersInfo = new UsersInfo();
    

      var UsersHobbies = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          name          : { type: 'string', required: true, trim: 35, searchable: true },
        }),

        onlineSearchSchema: new HotSchema({
        }),
    
        storeName: 'usersHobbies',
    
        publicURL: '/config/users/:userId/hobbies/:id',
        hotExpose: true,
        configStore: { userId: true },

        position: true, 

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });
      stores.usersHobbies = new UsersHobbies();


      var WorkspacesInfo = declare( [ HotStore, MultiHomePermsMixin ], {
    
        schema: new HotSchema({
          longName    : { type: 'string', required: true, default: "Workspace's long name", notEmpty: true, trim: 35, searchable: true },
          tag         : { type: 'string', required: true, default: "Workspace's tag line",  notEmpty: true, notEmpty: true, trim: 70, searchable: true },
        }),
    
        onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'workspacesInfo',
    
        publicURL: '/config/workspacesInfo/:workspaceId',
        hotExpose: true,
        configStore: { workspaceId: true },

        handlePut: true,
        handleGet: true,
      });
      stores.workspacesInfo = new WorkspacesInfo();
    
    
      var WorkspacesUsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          userCategory  :  { type: 'id', required: false, notEmpty: false, searchable: true },
          localEmail    : { type: 'string', required: true, default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35, searchable: true },
        }),

        onlineSearchSchema: new HotSchema({
        }),
    
        storeName: 'workspacesUsersInfo',
    
        publicURL: '/config/workspaces/:workspaceId/users/:userId',
        hotExpose: true,
        configStore: { workspaceId: true, userId: true },

        handlePut: true,
        handleGet: true,
      });
      stores.workspacesUsersInfo = new WorkspacesUsersInfo();


      var WorkspacesUsersGoals = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

        schema: new HotSchema({
          name        : { type: 'string', notEmpty: true, trim: 50, searchable: true },
        }),
        onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'workspacesUsersGoals',
          
        publicURL: '/config/workspaces/:workspaceId/users/:userId/Goals/:id',
        hotExpose: true,
        configStore: { workspaceId: true, userId: true },
  
        position: true, 
 
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });
      stores.workspacesUsersGoals = new( WorkspacesUsersGoals)

      var WorkspacesUsersCategories = declare( [ HotStore, MultiHomePermsMixin ], {

        schema: new HotSchema({
          name        : { type: 'string', notEmpty: true, trim: 50, searchable: true },
        }),
        onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'workspacesUsersCategories',
          
        publicURL: '/config/workspaces/:workspaceId/usersCategories/:id',
        hotExpose: true,
        configStore: { workspaceId: true },
  
        position: true, 
 
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });
      stores.workspacesUsersCategories = new WorkspacesUsersCategories();

    
      var WorkspacesContactsCategories = declare( [ HotStore, MultiHomePermsMixin ], {

        schema: new HotSchema({
          name         : { type: 'string', notEmpty: true, trim: 50, searchable: true },
        }),
    
        onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'workspacesContactsCategories',
          
        publicURL: '/config/workspaces/:workspaceId/contactsCategories/:id',
        hotExpose: true,
        configStore: { workspaceId: true },
  
        position: true, 

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
 
        checkPermissionsDeletee: function checkPermissionsGetQuery( params, body, options, doc, fullDoc, cb ){
          cb( null, false );
        },

      });
      stores.workspacesContactsCategories = new WorkspacesContactsCategories();

      // Root-level store
      var CompanySizes = declare( [ HotStore ], {

        schema: new HotSchema({
          name         : { type: 'string', notEmpty: true, trim: 50, searchable: true },
        }),
    
        onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'companySizes',
          
        publicURL: '/companySizes/:id',
        hotExpose: true,
        configStore: { },
  
        position: true, 

        hotGlobalBroadcast: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });
      stores.companySizes = new CompanySizes();


      var WorkspacesContactsIsStarred = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          isStarred      : { type: 'boolean', required: false, searchable: true },
        }),

         onlineSearchSchema: new HotSchema({
        }),
    
        storeName:  'workspacesContactsIsStarred',
          
        publicURL: '/workspaces/:workspaceId/contacts/isStarred/:contactId',
        hotExpose: true,

        handlePut: true,
        handleGet: true,
      });
      stores.workspacesContactsIsStarred = new WorkspacesContactsIsStarred();


      var WorkspacesContactsAddresses = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          label             : { type: 'string', required: false, trim: 64 },
          street            : { type: 'string', required: false, trim: 256 },
          poBox             : { type: 'string', required: false, trim: 64 },
          localArea         : { type: 'string', required: false, trim: 64 },
          city              : { type: 'string', required: false, trim: 64 },
          county            : { type: 'string', required: false, trim: 64 },
          postcode          : { type: 'string', required: false, trim: 10 },
          country           : { type: 'string', required: false, trim: 64 },
        }),

        onlineSearchSchema: new HotSchema({
          label             : { type: 'string' },
          street            : { type: 'string' },
          poBox             : { type: 'string' },
          localArea         : { type: 'string' },
          city              : { type: 'string' },
          county            : { type: 'string' },
          postcode          : { type: 'string' },
          country           : { type: 'string' },
        }),
   
        storeName:  'workspacesContactsAddresses',
          
        publicURL: '/workspaces/:workspaceId/Contacts/:contactId/addresses/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
        position: true, 
      });
      stores.workspacesContactsAddresses = new WorkspacesContactsAddresses();

      var WorkspacesContactsEmails = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          label : { type: 'string', required: false, trim: 64 },
          email : { type: 'string', required: true, notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
        }),

        onlineSearchSchema: new HotSchema({
          label  : { type: 'string' },
          email  : { type: 'string' },
        }),
    
        storeName:  'workspacesContactsEmails',
          
        publicURL: '/workspaces/:workspaceId/contacts/:contactId/emails/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,

        position: true,

        // Don't allow the same email address twice
        postValidate: function( request, body, method, done ){
          var self = this;

          stores.workspacesContactsEmails.apiGetQuery( { filters: { email: body.email, contactId: body.contactId } }, function( err, docs ){
            if( err ) return done( err );

            // Filter self out (only need to do it for PUT calls)
            if( method === 'put' ){
              docs = docs.filter( function(i) { return i.id.toString() != body.id.toString() } );
            }
            

            if( docs.length ){          
              var errors = [];
              errors.push( { field: 'email', message: 'Email address already on file' } );
              done( new self.UnprocessableEntityError( { errors: errors } ) );
            } else {
              done( null );
            }
          });
        },

      });
      stores.workspacesContactsEmails = new WorkspacesContactsEmails();

      var WorkspacesContactsPhoneNumbers = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          label     : { type: 'string', required: false, trim: 64 },
          dialCode  : { type: 'number', required: true, notEmpty: true, trim: 4, min: 1, sharedValidator: 'countryDialCode' },
          number    : { type: 'string', required: true, notEmpty: true, trim: 20, min: 1, sharedValidator: 'phoneNumber', },
        }),

        onlineSearchSchema: new HotSchema({
          label     : { type: 'string' },
          dialCode  : { type: 'string' },
          number    : { type: 'string' },
        }),
 
        storeName:  'workspacesContactsPhoneNumbers',
          
        publicURL: '/workspaces/:workspaceId/contacts/:contactId/phoneNumbers/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,

        position: true, 
      });
      stores.workspacesContactsPhoneNumbers = new WorkspacesContactsPhoneNumbers();


      var WorkspacesNinjaFormSettings = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          url            : { type: 'string', required: false, trim: 250 },
          clickDate      : { type: 'date',   required: false },
        }),

        onlineSearchSchema: new HotSchema({
        }),

        storeName:  'workspacesNinjaFormSettings',
          
        publicURL: '/ninjaSubmit/ninjaFormSettings/:workspaceId',
        hotExpose: true,
        configStore: { workspaceId: true },

        handlePut: true,
        handleGet: true,

        afterPutNew: function afterPutNew( request, doc, fullDoc, overwrite, cb ){
          var self = this;
          this.inheritedAsync( afterPutNew, arguments, function( err ){
            if( err ) return cb( err );

            self.afterPutExisting( request, doc, fullDoc, doc, fullDoc, overwrite, cb );
          });
        },


        afterPutExisting: function afterPutExisting( request, doc, fullDoc, docAfter, fullDocAfter, overwrite, cb ){
          this.inheritedAsync( afterPutExisting, arguments, function( err ){
            if( err ) return cb( err );

            var current;

            if( docAfter.url == '' ){
              current = "Inattivo";
            } else if( typeof( docAfter.clickDate ) === 'object' ){
               current = "Pronto a partire";
            } else {
               current = "Data e ora non inseriti";
            }

            var record = {};
            record.workspaceId = doc.workspaceId;
            record.current = current;

            // This will affect the displayed status
            stores.workspacesNinjaFormStatus.apiPut( null, record, cb );

            // This will update config for the in-memory state machines
            Machine.workspaces[ docAfter.workspaceId ].setConfig( docAfter );
          });
        },


      });
      stores.workspacesNinjaFormSettings = new WorkspacesNinjaFormSettings();


      var WorkspacesNinjaFormTimeOffset = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          timeOffset     : { type: 'number', required: false, default: 0 },
        }),

        onlineSearchSchema: new HotSchema({
        }),

        storeName:  'workspacesNinjaFormTimeOffset',
          
        publicURL: '/ninjaSubmit/ninjaFormTimeOffset/:workspaceId',
        hotExpose: true,
        //configStore: { workspaceId: true },

        handlePut: true,
        handleGet: true,
        checkPermissionsGet: function( request, doc, fullDoc, cb ){
          cb( null, true );
        },
        prepareBody: function( request, body, method, cb ){


          var http = require( 'http' );
          var url = require( 'url' );
          var hotCoreStoreConfig = hotplate.require( 'hotCoreStoreConfig' );

          var workspaceId = request._req.params[ 'workspaceId' ];
          var userId = request._req.session.userId;

          hotCoreStoreConfig.getConfigRecords( workspaceId, userId, function( err, settings ){
            if( err ) return cb( err );
            
            var urlElements = url.parse( settings.workspacesNinjaFormSettings.url );
            var headOptions = {
              method: 'HEAD',
              host: urlElements.host,
              port: urlElements.port || 80,
            };


            var requestDate = new Date();

            var headRequest = http.request( headOptions, function( remoteResponse ) {
              var responseDate = new Date();
              var requestDelta = (responseDate.getTime() - requestDate.getTime()) / 2;
              var serverDate = new Date( remoteResponse.headers.date );

	      body.timeOffset = serverDate.getTime() - requestDate.getTime() - requestDelta;
              //body.timeOffset = serverDate.getTime() - requestDate.getTime();

              cb( null );
            });

            headRequest.on('error', function( err ) {
              cb( err );
            });

            headRequest.end();
            
          });

        },

      });
      stores.workspacesNinjaFormTimeOffset = new WorkspacesNinjaFormTimeOffset();

      var WorkspacesNinjaFormStatus = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          current     : { type: 'string', required: false, default: 'idle' }, // 'idle', 'checking', 'submitting'
        }),

        onlineSearchSchema: new HotSchema({
        }),

        storeName:  'workspacesNinjaFormStatus',
          
        publicURL: '/ninjaSubmit/ninjaFormStatus/:workspaceId',
        hotExpose: true,
        configStore: { workspaceId: true },

        handlePut: true,
        handleGet: true,
        checkPermissionsGet: function( request, doc, fullDoc, cb ){
          cb( null, true );
        },

      });
      stores.workspacesNinjaFormStatus = new WorkspacesNinjaFormStatus();

      var WorkspacesNinjaFormCodes = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          label     : { type: 'string', required: false, trim: 50, searchable: true },
          code      : { type: 'string', required: false, trim: 250 },
        }),


        onlineSearchSchema: new HotSchema({
        }),

        storeName:  'workspacesNinjaFormCodes',

        publicURL: '/workspaces/:workspaceId/ninjaFormCodes/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleDelete: true,
        handleGetQuery: true,
        position: true,

      });
      stores.workspacesNinjaFormCodes = new WorkspacesNinjaFormCodes();


      var WorkspacesNinjaFormLogs = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          workspaceId : { type: 'id' },
          date        : { type: 'date', required: false, searchable: true },
          remoteDate  : { type: 'date', required: false },
	  subsystem   : { type: 'string', required: true },
	  tabId       : { type: 'string', required: true },
          submitLabel : { type: 'string', required: false, trim: 64 },
          line        : { type: 'blob', required: true, trim: 512 },
        }),


        onlineSearchSchema: new HotSchema({
        }),

        sortableFields: [ 'date' ],

        storeName:  'workspacesNinjaFormLogs',

        publicURL: '/workspaces/:workspaceId/ninjaFormLogs/:id',
        hotExpose: true,

        handlePost: true,
        handleGet: true,
        handleGetQuery: true,

        prepareBody: function( request, body, method, cb ){

          stores.workspacesNinjaFormTimeOffset.apiGet( request.params.workspaceId, function( err, data ){

            var now = new Date();
            body.date = now;
            body.remoteDate = new Date().setTime( now.getTime() + data.timeOffset );
            //body.remoteDate = new Date().setTime( now.getTime() );
            cb( null );
          });
        },

      });
      stores.workspacesNinjaFormLogs = new WorkspacesNinjaFormLogs();


      var WorkspacesContacts = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          firstName      : { type: 'string', required: false, trim: 50, searchable: true },
          middleName     : { type: 'string', required: false, trim: 50, searchable: true },
          lastName       : { type: 'string', required: false, trim: 50, searchable: true },
          dateOfBirth    : { type: 'date',   required: false, searchable: true },
          isCompany      : { type: 'boolean',required: false, searchable: true },
          
          /* Sync info */
          syncModule     : { type: 'string', required: false, trim: 10 },
          syncId         : { type: 'string', required: false, trim: 64 },
          syncDate       : { type: 'date',   required: false },
        }),


        onlineSearchSchema: new HotSchema({
          firstName      : { type: 'string' },
          middleName     : { type: 'string' },
          lastName       : { type: 'string' },
          dateOfBirth    : { type: 'date' },
          isCompany      : { type: 'boolean' },
        }),

        sortableFields: [ 'firstName', 'lastName' ],

        storeName:  'workspacesContacts',
          
        publicURL: '/workspaces/:workspaceId/contacts/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,

        nested: [
          {
            layer: 'workspacesContactsIsStarred',
            join: { 'contactId': 'id' },
            type: 'multiple',
          },

          {
            layer: 'workspacesContactsAddresses',
            join: { 'contactId': 'id' },
            type: 'multiple'
          },

          {
            layer: 'workspacesContactsEmails',
            join: { 'contactId': 'id' },
            type: 'multiple'
          },

          {
            layer: 'workspacesContactsPhoneNumbers',
            join: { 'contactId': 'id' },
            type: 'multiple'
          },

        ],
        children: true,

        afterPost: function afterPost( request, doc, fullDoc, cb ){
         
          var self = this;

          self.inheritedAsync( afterPost, arguments, function(){

            // Attempt to create a record in WorkspacesContactsIsStarred. This will
            // fail quietly if there are problems, as it's not 100% essential and
            // at this point the contact record has already been created
            //stores.WorkspacesContactsIsStarred.Put( doc.id, { isStarred: false, workspaceId: doc.workspaceId }, { killComet: true }, function( err, doc ){
              cb( null );
            //});

          });
        },

      });
      stores.workspacesContacts = new WorkspacesContacts();


      var Messages = declare( [ HotStore, MultiHomePermsMixin ],  {
    
        schema: new HotSchema({
          incoming          : { type: 'boolean', required: true, notEmpty: true },
          type              : { type: 'string', required: true, notEmpty: true, trim: 5 },
          fromUserId        : { type: 'id', required: false, notEmpty: true },
          fromContactId     : { type: 'id', required: false, notEmpty: true },

          subject           : { type: 'string', required: true, notEmpty: true, trim: 50 },
          body              : { type: 'string', required: true, notEmpty: true, trim: 50 },
        }),
   
        onlineSearchSchema: new HotSchema({
          incoming          : { type: 'boolean' },
          type              : { type: 'string' },
          fromUserId        : { type: 'id' },
          fromContactId     : { type: 'id' },

          subject           : { type: 'string' },
          body              : { type: 'string' },
        }),
 
 
        storeName:  'messages',
          
        publicURL: '/workspaces/:workspaceId/messages/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });
      stores.messages = new Messages();
    }
  }); 

  done( null, stores );

} ))



/*
function goThroughCursor( cursor, processItem, cb ){
   
  function f(){

    cursor.next( function( err, item ){

      if( err ) return cb( err );
      if( item === null ) return cb( null );

      processItem( item, function( err ){
        if( err ) return cb( err );

        f();
      });
    });
  }
  f();
};
*/


var Machine = declare( null, {

  status: 'idle',
  workspaceId: null,

  constructor: function( config ){

    // Variables
    this.status = 'idle';
    this.initialPageBody = null;
    this.initialPageDate = null;
    this.initialMetaData = null;
    this.subsequentLoadCounter = 0;
    

    this.setConfig( config );

    // Machine registry
    Machine.workspaces[ this.workspaceId ] = this;

    // FIXME: This is for debugging purposes
    //this.statusSubmitting();

  },

  setConfig: function( config ){
    // Confg
    this.workspaceId = config.workspaceId;
    this.clickDate = config.clickDate;
    this.url = config.url;
    this.config = config;
  },

  _setStatusStore: function( currentStatus ){

    var record = {};
    record.workspaceId = this.workspaceId;
    record.current = currentStatus;

    // This will affect the displayed status
    stores.workspacesNinjaFormStatus.apiPut( null, record, function(){} );
  },


  tick: function(){
    var self = this;

    if( self.status == 'idle' ){
      var now = Math.floor( (new Date()).getTime() / 1000 );
      unixClickDate = Math.floor( self.clickDate.getTime() / 1000 );
          
      console.log("CONFIG:");
      console.log( self.config );

      console.log("COMPARING TIMES:");
      console.log( now );
      console.log( unixClickDate );
      console.log( unixClickDate - now );
      console.log( Machine.activationDeltaSeconds );

      if( unixClickDate - now < Machine.activationDeltaSeconds ){
        if( self.status == 'idle' ){
          self.statusLoadingInitial();
        }
      }

    }
  },

  statusAllDone: function(){

  },

  statusLoadingInitial: function(){
    var self = this;

    self.status = 'loadingInitial';
    self._setStatusStore("Carico la pagina iniziale...");

    fetch.fetchUrl( self.config.url, self._statusLoadingInitialChanger.bind(self) );

  },


  _statusLoadingInitialChanger: function( err, meta, body ){
    var self = this;

    console.log("HERE!", self.status );

    if( self.status == 'loadingInitial' ){

      // If there is an error, will re-attempt after 200ms
      if( err || body == '' ){
        console.log("ERROR!", err );
        setTimeout( function(){
          fetch.fetchUrl( self.config.url, self._statusLoadingInitialChanger.bind( self ) );
        }, 1000 );
        return;
      } 
      
      console.log("FETCHING SUCCESSFUL!");
      console.log( meta );
      console.log( body );

      // Set the initial page's data
      self.initialPageDate = new Date( meta.responseHeaders.date );
      self.initialPageBody = body;
      self.initialMetaData = meta;
      self.subsequentLoadCounter = 0;
      self.statusLoadingSubsequent();
    }

  },

  statusLoadingSubsequent: function(){

    var self = this;

    self.status = 'loadingSubsequent';
    self._setStatusStore("Aspetto il cambio...");

    // Loading the page
    setTimeout( fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) ), 0 );
    setTimeout( fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) ), 200 );
    setTimeout( fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) ), 400 );
    setTimeout( fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) ), 600 );
    setTimeout( fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) ), 800 );
    
  },

  _statusLoadingSubsequentChanger: function( err, meta, body ){

    var self = this;

    if( self.status == 'loadingSubsequent' ){

      // If there is an error, will re-attempt after 200ms
      if( err || body == '' ){
        console.log("ERROR!", err );
        setTimeout( function(){
          fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) );
        }, 200 );
        return;
      }

      self.subsequentLoadCounter ++;
      self._setStatusStore("Aspetto il cambio..." + self.subsequentLoadCounter );

      console.log( "COUNTER:" + self.subsequentLoadCounter );

      if( self.initialPageBody.toString() != body.toString() ){

        // Set the initial page's data
        self.formPageDate = new Date( meta.responseHeaders.date );
        self.formPage = body;
        self.formMetaData = meta;

        self.statusSubmitting();
      } else {
        fetch.fetchUrl( self.config.url, self._statusLoadingSubsequentChanger.bind( self ) );
      }
    }
 
  },


  statusSubmitting: function(){

    var self = this;

    self.status = 'submitting';
    self._setStatusStore("Submit in corso");

/*
    self.formPage = " \
\
<html>\
<head>\
<title>Sitilab di ADUC - Servizi Internet Firenze</title>\
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\
<meta name=\"description\" content=\"Progettazione, realizzazione e promozione siti internet Web marketing Promozione sui motori di ricerca Segnalazione, registrazione e indicizzazione motori Report indicizzazione e posizionamento Corsi di formazione per web design, Servizi redazionali in inglese, Sviluppo contenuti editoriali Traduzione siti web in inglese, gestione newsletter in inglese \">\
<meta name=\"keywords\" content=\"web design, siti web, siti internet, consulenza internet, consulente informatico, web marketing, web consulting, traduzione siti web, localizzazione in inglese siti internet, posizionamento, motori di ricerca, page ranking, monitoraggio posizionamento, Servizi redazionali in inglese, newsletter in inglese, gestione mailing list, formazione, formazione aziendale, corsi individuali, corsi web design, corsi internet, corsi web marketing\">\
<META content=\"index, follow\" name=robots>\
<META content=\"10 days\" name=revisit-after>\
<META content=Italy name=distribution>\
<META content=HTML name=DC.Format>\
<META content=http://www.sitilab.it name=DC.Identifier>\
<META content=it name=DC.Language>\
<META content=Italy name=DC.Coverage>\
<META content=General name=RATING>\
<META content=\"web design | siti web | siti internet | consulenza internet | consulente informatico | web marketing | web consulting | posizionamento | motori di ricerca | page ranking | monitoraggio posizionamento | traduzione siti web | localizzazione siti | servizi redazionali | gestione newsletter in inglese | traduzione siti internet | formazione aziendale | corsi individuali | corsi web design | corsi internet | corsi web marketing\" name=robot>\
<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\
</head>\
\
<body bgcolor=\"#FFFFFF\" text=\"#000000\" leftmargin=\"0\" topmargin=\"0\" marginwidth=\"0\" marginheight=\"0\" background=\"immagini/bg2.gif\" vlink=\"#3333CC\">\
<div align=\"center\">\
  <table width=\"760\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" height=\"354\" bordercolor=\"#0066FF\">\
    <tr> \
      <td class=\"headsmall\" bgcolor=\"#0033CC\" height=\"2\"> \
        <div align=\"center\">SitiLab di ADUC - Firenze - Siti web - Servizi di \
          Consulenza Internet - Web Marketing - Web Design - Localizzazione in \
          inglese siti internet - Posizionamento sui motori di ricerca</div>\
      </td>\
    </tr>\
    <tr> \
      <td height=\"38\"> \
        <div align=\"center\"><img src=\"immagini/testata.gif\" width=\"760\" height=\"100\" usemap=\"#Map\" border=\"0\"></div>\
      </td>\
    </tr>\
    <tr>\
      <td height=\"6\"> \
        <table border=\"0\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\" height=\"11\" bgcolor=\"#0066FF\">\
          <tr bgcolor=\"#8AC6F2\"> \
            <td width=\"10%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"index.html\" title=\"Home Page Sitilab\">Home</a></div>\
            </td>\
            <td width=\"30%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"\" title=\"\"></a></div>\
            </td>\
            <td width=\"15%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"https://ssl.sitilab.it/maia/\" title=\"Servizio Antispam Sitilab\">Antispam</a></div>\
            </td>\
            <td width=\"15%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"https://ssl.sitilab.it/webmail/\" title=\"Servizio WebMail Sitilab\">Webmail</a></div>\
            </td>\
            <td width=\"15%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"portfolio.html\" title=\"Visita il Portfolio delle Realizzazioni Sitilab\">Portfolio</a></div>\
            </td>\
            <td width=\"15%\" height=\"6\" class=\"menu\">\
              <div align=\"center\"><a href=\"contatto.html\" title=\"Richiedi informazioni sui Servizi Sitilab\">Contatto</a></div>\
            </td>\
          </tr>\
        </table>\
      </td>\
    </tr>\
    <tr> \
      <td valign=\"top\" align=\"left\" bgcolor=\"#E7F5FE\" height=\"840\"> \
        <p><br>\
          <span class=\"titolo14blu\">CONTATTO</span></p>\
        <p align=\"center\"><font face=\"Arial, Helvetica, sans-serif\" size=\"4\">\
          <font color=\"#0066FF\">Siti<i>Lab</i> - Firenze</font><br>\
          Realizzazione applicazioni internet e siti web - Consulenza internet</font><br>\
        </p>\
        <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"8\" align=\"center\" bgcolor=\"#FFFFFF\">\
          <tr>\
            <td>\
      <form name=\"form\" method=\"post\" action=\"testAction.php\">\
	<table width=\"104%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\" class=\"testo10\" height=\"254\">\
	  <tr> \
	    <td width=\"39%\" class=\"testo12\"> \
	      <div align=\"right\">Codice</div>\
	    </td>\
	    <td width=\"61%\"> \
	      <input type=\"text\" name=\"Codice\" class=\"testo10\" size=\"20\">\
	      <font color=\"#FF0000\">*</font> </td>\
	  </tr>\
	  <tr> \
	    <td width=\"39%\"> \
	    </td>\
	    <td width=\"61%\"> \
	      <input type=\"submit\" value=\"Invia dati\" name=\"submit\">\
	    </td>\
	  </tr>\
	</table>\
      </form>\
	<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\">\
	  <tr> \
	    <td class=\"giustificato10\" height=\"38\"><b><span class=\"testo12\">Garanzie \
	      di riservatezza</span></b><span class=\"testo12\"><br>\
	      In conformit&agrave; al D.L. 196 del 30/06/2003 sulla tutela \
	      dei dati personali, Sitilab di A.D.U.C.garantisce la massima \
	      riservatezza dei dati forniti: in particolare garantisce \
	      al sottoscrivente che tali dati personali verranno utilizzati \
	      solo ed esclusivamente per quanto indicato e che non verranno \
	      pubblicati n&eacute; ceduti a nessun'altra persona o Azienda \
	      e che gli stessi potranno essere gratuitamente rettificati \
	      scrivendo a info (at) sitilab.it</a></span></td>\
	  </tr>\
	</table>\
    </td>\
  </tr>\
</table>\
<h1 align=\"center\"><font face=\"Arial, Helvetica, sans-serif\" size=\"4\" color=\"#0066FF\">SITI<i> \
  lab</i> - Firenze</font><font face=\"Arial, Helvetica, sans-serif\" size=\"4\"> \
  <br>\
  Realizzazione applicazioni internet e siti web - Consulenza internet</font></h1>\
<h4 align=\"center\"><font face=\"Verdana, Arial, Helvetica, sans-serif\" size=\"2\">Sitilab \
  di A.D.U.C.<br>\
  via Cavour, 68 Firenze - 50129 <br>\
  Telefono: 055 291408 Fax: 055 2302452<br>\
  E-mail: info (at) sitilab.it</font></h4>\
<h3 align=\"center\"><img src=\"immagini/network.gif\" width=\"80\" height=\"30\" border=\"0\" alt=\"NETWORK SITILAB\"><br>\
  &nbsp;&nbsp;&nbsp; </h3>\
</td>\
</tr>\
</table>\
</div>\
</body>\
</html>\
";

*/

console.log("**********************"); 
console.log( self.formPage.toString() ); 
console.log("**********************"); 


$ = cheerio.load( self.formPage.toString() );

$( 'form' ).each( function( index, form ){

// *****************
// QUESTION:
// Is this the right way to do this?
// I am "converting" each found "DOM" object into a "JQuery" object (although
// it's not real dom, and it's not real jquery either).
// But, if there is no ID set for form, for example, is this _guaranteed_ to always find

      // the right one?
      var $form = $( form );

      fullAction = require('url').resolve( self.config.url, $form.attr( 'action' ) );
      //console.log( "URL:", self.config.url );
      //console.log( "ACTION:", $form.attr( 'action' ) );
      //console.log( "FULL ACTION:", fullAction );

      stores.workspacesNinjaFormCodes.apiGetQuery( { filters: { workspaceId: self.workspaceId }, skipHardLimitOnQueries: true }, function( err, codesData ){

      //stores.workspacesNinjaFormCodes.dbLayer.select( { conditions: { and: [ { field: 'workspaceId', type: 'eq', value: self.workspaceId } ] } }, { skipHardLimitOnQueries: true }, function( err, codesData ){

        codesData.forEach( function( codeData ){

          var code = codeData.code;
          var dataSubmitHash = {};

          // *****************
          // QUESTION:
          // Is this the right way to do this? I want to find all 'input' fields 
          // in this particular form. So, I pass $form as context and look for
          // all 'input' tags. Is this what you are meant to do?
          // ******************
          $( "input", $form ).each( function( index, inputField ){

            // *****************
            // QUESTION:
            // Once again, will this always work, regadrless of IDs etc.? I am passing `form` as the
            // context.
            // ******************
            var $inputField = $( inputField, form );

            // See if the field name is already assigned
            var fieldValue = $inputField.val() ? $inputField.val() : code;

            // Assign values
            dataSubmitHash[ $inputField.attr('name') ] = fieldValue;
          });

          
          //console.log("dataSubmitHash:", dataSubmitHash );
          //console.log("fullAction:", fullAction );
          //console.log("");


          // Transform this into a function, and run it

          //fullAction = "http://localhost:3000/testing";
          //console.log("FULL ACTION:", fullAction );
          fetch.fetchUrl( fullAction, { 
            method: 'post',
            headers: {
              'Content-type': 'application/x-www-form-urlencoded',
              'User-Agent' : 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36',
              'origin': fullAction,
            },
            payload: querystring.stringify( dataSubmitHash ),
            disableRedirects: true,
            maxRedirects: 0,
          }, function( err, meta, body ){
            if( err ){
              console.log( err );
              // TODO: LOG ERROR
              return;
            }

            // TODO: LOG RESULT
            console.log( "META:", meta );
            console.log( "BODY: ", body.toString() );
           
          });
          
        });

      });

    });
    
    //console.log( $( 'input', form ) );

    
  

  },

});



  
Machine.workspaces = {};
Machine.activationDeltaSeconds = 300;

Machine.startTicking = function(){

  setInterval( function(){
    for( var k in Machine.workspaces ){
      Machine.workspaces[ k ].tick();
    }
  }, 1000 );
};
 

hotplate.hotEvents.on( 'run', 'bd', function( done ){

  stores.workspacesNinjaFormSettings.dbLayer.select( {}, { useCursor: true }, function( err, cursor ){
    if( err ) return done( err );

    var config;
    async.doWhilst(
      function( callback ){

        cursor.next( function( err, i ){
          if( err ) return callback( err );
          
          config = i;
          if( config !== null ) new Machine( config );

          callback( null );
        });
      },

      function(){ return config != null; },

      function( err ) {
        if( err ) return done( err );

        Machine.startTicking();

        done( null );
      }
    );
  })
});


 
/*
     Status can be: idle, loadingInitial, loadingSubsequent, submitting, allDone

           setInterval() running idleChecker

           initial status: none;
           run idle();

           idle():
             * Set status to idle
             * idleChecker() will run every second. When run:
                 If in Idle:
                    Check if time is right. If it is, loadingInitial()

           loadingInitial():
             * Set status to loadingInitial
             * Make request
             * When result comes:
                 If in loadingInitial:
                   Save it, if error reissue request. If all good, loadingSubsequent()

           loadingSubsequent():
             * Set status to loadingSubsequent
             * Start 5 requests
             * When results come:
                 If in loadingSubsequent:
                   Response is the same: issue another request
                   Response is different: call submitting()

            submitting():
              * Set status to submitting()
              * Kill any ongoing requests (the ones still running from loadingInitial)
              * Submit all forms with codes
              * When all submissions are done, call allDone()

            allDone():
              * sets status to allDone()



*/






// Simply activate path to client files
hotplate.hotEvents.on( 'clientPath', 'bd', function( done ){
  done( null, path.join(__dirname, '../client') );
})

// Define which paths within clientPath will need to be rendered, and with which options
hotplate.hotEvents.on( 'clientPathRender', 'bd', function( done ){
  done( null, [ 
    {
      'templates/BookingDojo.jade': { name: 'Tony' },
      'templates/AnotherBookingDojo.jade': {},
    }
  ] );
} )



hotplate.hotEvents.on( 'dojoModulesPerPage', 'bd', function( req, pageName, done ){

  switch( pageName ){

    case 'hotDojoAppContainer/container':
      done( null, [ 'bdMain' ] );
    break;

    default:
      done( null, [ ] );
    break;
  }

});


hotplate.hotEvents.on( 'pageElements', 'bd', function( done ){
    done( null, { titleWords: [ "Booking Dojo" ] } );
})

hotplate.hotEvents.on( 'pageElementsPerPage', 'bd', function( req, pageName, done ){

  switch(pageName){

    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        csses: ['bdMain.css' ],
        titleWords: [ "Application" ],
      });

    break;

   default:
      done( null, {} );
    break;
  }
});


"use strict";

var hotplate = require('hotplate');


hotplate.hotEvents.on( 'sharedFunctions', 'bd', hotplate.cachable( function( done ) {

  var result = {};

  result.phoneNumberValidator = function( number ){
    if( number === false ) return "Phone number invalid, only numbers and spaces allowed";
    return number.match( /^[0-9 ]+$/ );
  };


  result.dialCodeValidator = function( code ){

    var dialCodes = {
      93:'Afghanistan',
      355:'Albania',
      213:'Algeria',
      1684:'American Samoa',
      376:'Andorra',
      244:'Angola',
      1264:'Anguilla',
      1268:'Antigua and Barbuda',
      54:'Argentina',
      374:'Armenia',
      297:'Aruba',
      247:'Ascension Island',
      61:'Australia',
      43:'Austria',
      994:'Azerbaijan',
      1242:'Bahamas',
      973:'Bahrain',
      880:'Bangladesh',
      1246:'Barbados',
      375:'Belarus',
      32:'Belgium',
      501:'Belize',
      229:'Benin',
      1441:'Bermuda',
      975:'Bhutan',
      591:'Bolivia',
      599:'Bonaire - Sint Eustatius and Saba',
      387:'Bosnia and Herzegovina',
      267:'Botswana',
      55:'Brazil',
      673:'Brunei',
      359:'Bulgaria',
      226:'Burkina Faso',
      257:'Burundi',
      855:'Cambodia',
      237:'Cameroon',
      1:'Canada',
      238:'Cape Verde',
      1345:'Cayman Islands',
      236:'Central African Republic',
      235:'Chad',
      56:'Chile',
      86:'China',
      57:'Colombia',
      269:'Comoros and Mayotte',
      242:'Congo',
      243:'Congo Dem Rep',
      682:'Cook Islands',
      506:'Costa Rica',
      225:'Cote d\'Ivoire',
      385:'Croatia',
      53:'Cuba',
      599:'Curaçao',
      357:'Cyprus',
      420:'Czech Republic',
      45:'Denmark',
      246:'Diego Garcia',
      253:'Djibouti',
      1767:'Dominica',
      1809:'Dominican Republic',
      593:'Ecuador',
      20:'Egypt',
      503:'El Salvador',
      240:'Equatorial Guinea',
      291:'Eritrea',
      372:'Estonia',
      251:'Ethiopia',
      500:'Falkland Islands',
      298:'Faroe Islands',
      679:'Fiji',
      358:'Finland',
      33:'France',
      594:'French Guiana',
      689:'French Polynesia',
      241:'Gabon',
      220:'Gambia',
      995:'Georgia',
      49:'Germany',
      233:'Ghana',
      350:'Gibraltar',
      30:'Greece',
      299:'Greenland',
      1473:'Grenada',
      590:'Guadeloupe',
      1671:'Guam',
      502:'Guatemala',
      224:'Guinea',
      245:'Guinea Bissau',
      592:'Guyana',
      509:'Haiti',
      504:'Honduras',
      852:'Hong Kong',
      36:'Hungary',
      354:'Iceland',
      91:'India',
      62:'Indonesia',
      98:'Iran',
      964:'Iraq',
      353:'Ireland',
      972:'Israel',
      39:'Italy',
      1876:'Jamaica',
      81:'Japan',
      962:'Jordan',
      7:'Kazakhstan',
      254:'Kenya',
      686:'Kiribati',
      850:'Korea - North',
      82:'Korea - South',
      965:'Kuwait',
      996:'Kyrgyzstan',
      856:'Laos',
      371:'Latvia',
      961:'Lebanon',
      266:'Lesotho',
      231:'Liberia',
      218:'Libya',
      423:'Liechtenstein',
      370:'Lithuania',
      352:'Luxembourg',
      853:'Macao',
      389:'Macedonia',
      261:'Madagascar',
      265:'Malawi',
      60:'Malaysia',
      960:'Maldives',
      223:'Mali',
      356:'Malta',
      692:'Marshall Islands',
      596:'Martinique',
      222:'Mauritania',
      230:'Mauritius',
      52:'Mexico',
      691:'Micronesia',
      373:'Moldova',
      377:'Monaco',
      976:'Mongolia',
      382:'Montenegro',
      1664:'Montserrat',
      212:'Morocco',
      258:'Mozambique',
      95:'Myanmar',
      264:'Namibia',
      674:'Nauru',
      977:'Nepal',
      31:'Netherlands',
      687:'New Caledonia',
      64:'New Zealand',
      505:'Nicaragua',
      227:'Niger',
      234:'Nigeria',
      683:'Niue',
      6723:'Norfolk Island',
      1:'Northern Mariana Islands',
      47:'Norway',
      968:'Oman',
      92:'Pakistan',
      680:'Palau',
      970:'Palestine',
      507:'Panama',
      675:'Papua New Guinea',
      595:'Paraguay',
      51:'Peru',
      63:'Philippines',
      48:'Poland',
      351:'Portugal',
      1787:'Puerto Rico',
      974:'Qatar',
      262:'Reunion',
      40:'Romania',
      7:'Russia',
      250:'Rwanda',
      590:'Saint Barthélemy',
      290:'Saint Helena',
      1869:'Saint Kitts and Nevis',
      1758:'Saint Lucia',
      590:'Saint Martin',
      508:'Saint Pierre and Miquelon',
      1784:'Saint Vincent Grenadines',
      685:'Samoa',
      378:'San Marino',
      239:'Sao Tome and Principe',
      966:'Saudi Arabia',
      221:'Senegal',
      381:'Serbia',
      248:'Seychelles',
      232:'Sierra Leone',
      65:'Singapore',
      1721:'Sint Maarten',
      421:'Slovakia',
      386:'Slovenia',
      677:'Solomon Islands',
      252:'Somalia',
      27:'South Africa',
      211:'South Sudan',
      34:'Spain',
      94:'Sri Lanka',
      249:'Sudan',
      597:'Suriname',
      268:'Swaziland',
      46:'Sweden',
      41:'Switzerland',
      963:'Syria',
      886:'Taiwan',
      992:'Tajikistan',
      255:'Tanzania',
      66:'Thailand',
      670:'Timor-Leste',
      228:'Togo',
      690:'Tokelau',
      676:'Tonga',
      1868:'Trinidad and Tobago',
      216:'Tunisia',
      90:'Turkey',
      993:'Turkmenistan',
      1649:'Turks and Caicos',
      688:'Tuvalu',
      256:'Uganda',
      380:'Ukraine',
      971:'United Arab Emirates',
      44:'United Kingdom',
      1:'United States',
      598:'Uruguay',
      998:'Uzbekistan',
      678:'Vanuatu',
      379:'Vatican City',
      58:'Venezuela',
      84:'Vietnam',
      1284:'Virgin Islands - British',
      1340:'Virgin Islands - US',
      681:'Wallis and Futuna',
      967:'Yemen',
      260:'Zambia',
      263:'Zimbabwe',
    }

    if( code === false ) return "Country code invalid";
    return !! dialCodes[ code ];
  };

  result.countryDialCodes = function(){
    return {
      93:'Afghanistan',
      355:'Albania',
      213:'Algeria',
      1684:'American Samoa',
      376:'Andorra',
      244:'Angola',
      1264:'Anguilla',
      1268:'Antigua and Barbuda',
      54:'Argentina',
      374:'Armenia',
      297:'Aruba',
      247:'Ascension Island',
      61:'Australia',
      43:'Austria',
      994:'Azerbaijan',
      1242:'Bahamas',
      973:'Bahrain',
      880:'Bangladesh',
      1246:'Barbados',
      375:'Belarus',
      32:'Belgium',
      501:'Belize',
      229:'Benin',
      1441:'Bermuda',
      975:'Bhutan',
      591:'Bolivia',
      599:'Bonaire - Sint Eustatius and Saba',
      387:'Bosnia and Herzegovina',
      267:'Botswana',
      55:'Brazil',
      673:'Brunei',
      359:'Bulgaria',
      226:'Burkina Faso',
      257:'Burundi',
      855:'Cambodia',
      237:'Cameroon',
      1:'Canada',
      238:'Cape Verde',
      1345:'Cayman Islands',
      236:'Central African Republic',
      235:'Chad',
      56:'Chile',
      86:'China',
      57:'Colombia',
      269:'Comoros and Mayotte',
      242:'Congo',
      243:'Congo Dem Rep',
      682:'Cook Islands',
      506:'Costa Rica',
      225:'Cote d\'Ivoire',
      385:'Croatia',
      53:'Cuba',
      599:'Curaçao',
      357:'Cyprus',
      420:'Czech Republic',
      45:'Denmark',
      246:'Diego Garcia',
      253:'Djibouti',
      1767:'Dominica',
      1809:'Dominican Republic',
      593:'Ecuador',
      20:'Egypt',
      503:'El Salvador',
      240:'Equatorial Guinea',
      291:'Eritrea',
      372:'Estonia',
      251:'Ethiopia',
      500:'Falkland Islands',
      298:'Faroe Islands',
      679:'Fiji',
      358:'Finland',
      33:'France',
      594:'French Guiana',
      689:'French Polynesia',
      241:'Gabon',
      220:'Gambia',
      995:'Georgia',
      49:'Germany',
      233:'Ghana',
      350:'Gibraltar',
      30:'Greece',
      299:'Greenland',
      1473:'Grenada',
      590:'Guadeloupe',
      1671:'Guam',
      502:'Guatemala',
      224:'Guinea',
      245:'Guinea Bissau',
      592:'Guyana',
      509:'Haiti',
      504:'Honduras',
      852:'Hong Kong',
      36:'Hungary',
      354:'Iceland',
      91:'India',
      62:'Indonesia',
      98:'Iran',
      964:'Iraq',
      353:'Ireland',
      972:'Israel',
      39:'Italy',
      1876:'Jamaica',
      81:'Japan',
      962:'Jordan',
      7:'Kazakhstan',
      254:'Kenya',
      686:'Kiribati',
      850:'Korea - North',
      82:'Korea - South',
      965:'Kuwait',
      996:'Kyrgyzstan',
      856:'Laos',
      371:'Latvia',
      961:'Lebanon',
      266:'Lesotho',
      231:'Liberia',
      218:'Libya',
      423:'Liechtenstein',
      370:'Lithuania',
      352:'Luxembourg',
      853:'Macao',
      389:'Macedonia',
      261:'Madagascar',
      265:'Malawi',
      60:'Malaysia',
      960:'Maldives',
      223:'Mali',
      356:'Malta',
      692:'Marshall Islands',
      596:'Martinique',
      222:'Mauritania',
      230:'Mauritius',
      52:'Mexico',
      691:'Micronesia',
      373:'Moldova',
      377:'Monaco',
      976:'Mongolia',
      382:'Montenegro',
      1664:'Montserrat',
      212:'Morocco',
      258:'Mozambique',
      95:'Myanmar',
      264:'Namibia',
      674:'Nauru',
      977:'Nepal',
      31:'Netherlands',
      687:'New Caledonia',
      64:'New Zealand',
      505:'Nicaragua',
      227:'Niger',
      234:'Nigeria',
      683:'Niue',
      6723:'Norfolk Island',
      1:'Northern Mariana Islands',
      47:'Norway',
      968:'Oman',
      92:'Pakistan',
      680:'Palau',
      970:'Palestine',
      507:'Panama',
      675:'Papua New Guinea',
      595:'Paraguay',
      51:'Peru',
      63:'Philippines',
      48:'Poland',
      351:'Portugal',
      1787:'Puerto Rico',
      974:'Qatar',
      262:'Reunion',
      40:'Romania',
      7:'Russia',
      250:'Rwanda',
      590:'Saint Barthélemy',
      290:'Saint Helena',
      1869:'Saint Kitts and Nevis',
      1758:'Saint Lucia',
      590:'Saint Martin',
      508:'Saint Pierre and Miquelon',
      1784:'Saint Vincent Grenadines',
      685:'Samoa',
      378:'San Marino',
      239:'Sao Tome and Principe',
      966:'Saudi Arabia',
      221:'Senegal',
      381:'Serbia',
      248:'Seychelles',
      232:'Sierra Leone',
      65:'Singapore',
      1721:'Sint Maarten',
      421:'Slovakia',
      386:'Slovenia',
      677:'Solomon Islands',
      252:'Somalia',
      27:'South Africa',
      211:'South Sudan',
      34:'Spain',
      94:'Sri Lanka',
      249:'Sudan',
      597:'Suriname',
      268:'Swaziland',
      46:'Sweden',
      41:'Switzerland',
      963:'Syria',
      886:'Taiwan',
      992:'Tajikistan',
      255:'Tanzania',
      66:'Thailand',
      670:'Timor-Leste',
      228:'Togo',
      690:'Tokelau',
      676:'Tonga',
      1868:'Trinidad and Tobago',
      216:'Tunisia',
      90:'Turkey',
      993:'Turkmenistan',
      1649:'Turks and Caicos',
      688:'Tuvalu',
      256:'Uganda',
      380:'Ukraine',
      971:'United Arab Emirates',
      44:'United Kingdom',
      1:'United States',
      598:'Uruguay',
      998:'Uzbekistan',
      678:'Vanuatu',
      379:'Vatican City',
      58:'Venezuela',
      84:'Vietnam',
      1284:'Virgin Islands - British',
      1340:'Virgin Islands - US',
      681:'Wallis and Futuna',
      967:'Yemen',
      260:'Zambia',
      263:'Zimbabwe',
    }
  };
  done( null, result );
}));


/*
        prepareBeforeSend: function( request, doc, cb ){

          doc._ref = {};


          // Step #1:
          // Get the isStarred extra _ref
          stores.workspacesContactsIsStarred.apiGet( doc.id, function( err, starred ){

            if( err && err.httpError == '404' ) err = null; // Make 404 acceptable
            if( err ) return cb( err );

            doc._ref.isStarred = starred && starred.isStarred;

            return cb( null, doc );

            // Step #2:
            // Get the first address
            stores.WorkspacesContactsAddresses.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, addresses ){
              if( err ) return cb( err );

              if( addresses.length > 0 ){
                doc._ref.address = addresses[ 0 ];
                doc._ref.addressesTotal = addresses.length;
              }

              // Step #3:
              // Get the first email address
              stores.WorkspacesContactsEmails.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, emails ){
                if( err ) return cb( err );

                if( emails.length > 0 ){
                  doc._ref.email = emails[ 0 ];
                  doc._ref.emailsTotal = emails.length;
                }

                // Step #3:
                // Get the first phone number
                stores.WorkspacesContactsPhoneNumbers.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, phoneNumbers ){
                  if( err ) return cb( err );

                  if( phoneNumbers.length > 0 ){
                    doc._ref.phoneNumber = phoneNumbers[ 0 ];
                    doc._ref.phoneNumbersTotal = phoneNumbers.length;
                  }
                  cb( null, doc );
                });
              });

            });

          });
        },
*/
