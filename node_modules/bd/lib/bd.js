var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
, hotCoreMultiHome = hotplate.require('hotCoreMultiHome')

, jsonRestStores = require( 'jsonreststores' )

;

app = hotplate.app;

jsonRestStores.artificialDelay = 300;

exports.hotHooks = hooks = {}

hotplate.hotEvents.on( 'stores', 'bd', hotplate.cachable( function( done ){

  var stores = {};

  var MultiHomePermsMixin = hotCoreMultiHome.MultiHomeBasicPermissionsMixin;
  var PrivateUserDataMixin = hotCoreJsonRestStores.PrivateUserDataPermissionsMixin;

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ){
      done( err );
    } else {

      // Mixin the extra hotplate-specific and driver-specific attributes  to
      // the generic Store/Schema
      var HotStore = s.HotStore;
      var HotSchema = s.HotSchema;

      stores.UsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          email       :  { type: 'string', required: true, default: "youremail@example.com", notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
          surname     :  { type: 'string', required: true, default: "Your surname", notEmpty: true, trim: 10 },
          name        :  { type: 'string', required: true, default: "Your name", notEmpty: true, trim: 50 },
        }),
        searchSchema: new HotSchema({
          email     : { type: 'string', trim: 70, min: 4 },
          surname   : { type: 'string' },
          name      : { type: 'string' },
        }),
    
        handlePut: true,
        handleGet: true,
    
        storeName:  'UsersInfo',
    
        publicURL: '/config/users/:userId',
        hotExpose: true,
        configStore: { userId: true },
      });
    

      stores.UsersHobbies = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          name          : { type: 'string', required: true, trim: 35 },
        }),
        searchSchema: new HotSchema({
          name          : { type: 'string'},
        }),
    
        storeName: 'UsersHobbies',
    
        publicURL: '/config/users/:userId/hobbies/:id',
        hotExpose: true,
        configStore: { userId: true },

        positionField: 'position', 

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });


      stores.WorkspacesInfo = declare( [ HotStore, MultiHomePermsMixin ], {
    
        schema: new HotSchema({
          longName    : { type: 'string', required: true, default: "Workspace's long name", notEmpty: true, trim: 35 },
          tag         : { type: 'string', required: true, default: "Workspace's tag line",  notEmpty: true, notEmpty: true, trim: 70 },
        }),
    
        searchSchema: new HotSchema({
          longName    : { type: 'string' },
          tag         : { type: 'string' },
        }),
    
        storeName:  'WorkspacesInfo',
    
        publicURL: '/config/workspacesInfo/:workspaceId',
        hotExpose: true,
        configStore: { workspaceId: true },

        handlePut: true,
        handleGet: true,
      });
    
    
      stores.WorkspacesUsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {
    
        schema: new HotSchema({
          userCategory  :  { type: 'id', required: false, notEmpty: false },
          localEmail    : { type: 'string', required: true, default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35 },
        }),
        searchSchema: new HotSchema({
          userCategory :  { type: 'id' },
          localEmail   : { type: 'string'},
        }),
    
        storeName: 'WorkspacesUsersInfo',
    
        publicURL: '/config/workspaces/:workspaceId/users/:userId',
        hotExpose: true,
        configStore: { workspaceId: true, userId: true },

        handlePut: true,
        handleGet: true,
      });


      stores.WorkspacesUsersGoals = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

        schema: new HotSchema({
          name        : { type: 'string', notEmpty: true, trim: 50 },
        }),
        searchSchema: new HotSchema({
          name        : { type: 'string', searchable: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        storeName:  'WorkspacesUsersGoals',
          
        publicURL: '/config/workspaces/:workspaceId/users/:userId/Goals/:id',
        hotExpose: true,
        configStore: { workspaceId: true, userId: true },
  
        positionField: 'position', 
 
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });

      stores.WorkspacesUsersCategories = declare( [ HotStore, MultiHomePermsMixin ], {

        schema: new HotSchema({
          name        : { type: 'string', notEmpty: true, trim: 50 },
        }),
        searchSchema: new HotSchema({
          name       : { type: 'string', searchable: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        storeName:  'WorkspacesUsersCategories',
          
        publicURL: '/config/workspaces/:workspaceId/usersCategories/:id',
        hotExpose: true,
        configStore: { workspaceId: true },
  
        positionField: 'position', 
 
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });

    
      stores.WorkspacesContactsCategories = declare( [ HotStore, MultiHomePermsMixin ], {

        schema: new HotSchema({
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        searchSchema: new HotSchema({
          name       : { type: 'string', sortable: true },
        }),
    
        storeName:  'WorkspacesContactsCategories',
          
        publicURL: '/config/workspaces/:workspaceId/contactsCategories/:id',
        hotExpose: true,
        configStore: { workspaceId: true },
  
        positionField: 'position', 

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
 
        checkPermissionsDeletee: function checkPermissionsGetQuery( params, body, options, doc, fullDoc, cb ){
          cb( null, false );
        },

      });

      // Root-level store
      stores.CompanySizes = declare( [ HotStore ], {

        schema: new HotSchema({
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        searchSchema: new HotSchema({
          name       : { type: 'string', searchable: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        storeName:  'CompanySizes',
          
        publicURL: '/companySizes/:id',
        hotExpose: true,
        configStore: { },
  
        positionField: 'position', 

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });



      stores.NonConfig = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ],  {
    
        schema: new HotSchema({
          name         : { type: 'string', required: true, notEmpty: true, trim: 50 },
        }),
    
        searchSchema: new HotSchema({
          name       : { type: 'string', sortable: true, notEmpty: true, trim: 50 },
        }),
    
        storeName:  'NonConfig',
          
        publicURL: '/nonConfig/workspaces/:workspaceId/users/:userId/nonConfig/:id',
        hotExpose: true,

        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
      });



/*
        {
          validator: function( object, originalObject, castObject, options, cb ){

            var errors = [];
            if( object.name == 'Tony' ){
              // cb( new Error("NO, TONY NO!" ) );
              errors.push( { field: 'name', message: 'NO! TONY NO!' } );
            }
            cb( null, errors );
          },
    
        } 
*/


    }
  }); 

   
 
  done( null, stores );

} ))


// Simply activate path to client files
hotplate.hotEvents.on( 'clientPath', 'bd', function( done ){
  done( null, path.join(__dirname, '../client') );
} )

// Define which paths within clientPath will need to be rendered, and with which options
hotplate.hotEvents.on( 'clientPathRender', 'bd', function( done ){
  done( null, [ 
    {
      'templates/BookingDojo.jade': { name: 'Tony' },
      'templates/AnotherBookingDojo.jade': {},
    }
  ] );
} )



hotplate.hotEvents.on( 'dojoModulesPerPage', 'bd', function( req, pageName, done ){

  switch( pageName ){

    case 'hotDojoAppContainer/container':
      done( null, [ 'bdMain' ] );
    break;

    default:
      done( null, [ ] );
    break;
  }

});


hotplate.hotEvents.on( 'pageElements', 'bd', function( done ){
    done( null, { titleWords: [ "Booking Dojo" ] } );
})

hotplate.hotEvents.on( 'pageElementsPerPage', 'bd', function( req, pageName, done ){

  switch(pageName){

    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        csses: ['bdMain.css' ],
        titleWords: [ "Application" ],
      });

    break;

   default:
      done( null, {} );
    break;
  }
});



