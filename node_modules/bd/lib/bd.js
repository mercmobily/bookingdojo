var
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
, hotCoreMultiHome = hotplate.require('hotCoreMultiHome')
, hotCoreStoreRegistry = hotplate.require( 'hotCoreStoreRegistry' )

, jsonRestStores = require( 'jsonreststores' )
;

app = hotplate.app;

jsonRestStores.artificialDelay = 500;

exports.hotHooks = hooks = {}


hotplate.hotEvents.on( 'run', 'bd', hotplate.cachable( function( done ){

  hotCoreStoreRegistry.getAllStores( function( err, registryStores ){
    if( err ) return done( err );

    // Redefine afterPost() for workspaceUsersBase, workspacesUsers, usersWorkspaces
    registryStores.workspacesUsersBase.redefineMethod( 'afterPost', function( request, doc, fullDoc, cb ){
      console.log("11111111111111111");
      this.inheritedAsync( registryStores.workspacesUsersBase.afterPost, arguments, function(){
        registryStores.workspacesContacts.apiPost( { linkedUserId: doc.userId, workspaceId: doc.workspaceId }, {}, cb );
      });
    });
    registryStores.workspacesUsers.redefineMethod( 'afterPost', function( request, doc, fullDoc, cb ){
      console.log("22222222222222222");
      this.inheritedAsync( registryStores.workspacesUsers.afterPost, arguments, function(){
        registryStores.workspacesContacts.apiPost( { linkedUserId: doc.userId, workspaceId: doc.workspaceId }, {}, cb );
      });
    });
    registryStores.usersWorkspaces.redefineMethod( 'afterPost', function( request, doc, fullDoc, cb ){
      console.log("33333333333333333");
      this.inheritedAsync( registryStores.usersWorkspaces.afterPost, arguments, function(){
        registryStores.workspacesContacts.apiPost( { linkedUserId: doc.userId, workspaceId: doc.workspaceId }, {}, cb );
      });
    })


    /*
    setTimeout( function(){
      registryStores.workspacesUsersBase.apiPost( { userId: '999999999999999999999999', workspaceId: '999999999999999999999991' }, {}, function( err ){ console.log("ERROR:", err ) }  );
    }, 1000 );
    */
    done( null );
  });
}));


hotplate.hotEvents.on( 'stores', 'bd', hotplate.cachable( function( done ){

  var stores = {};

  var MultiHomePermsMixin = hotCoreMultiHome.MultiHomeBasicPermissionsMixin;
  var PrivateUserDataMixin = hotCoreJsonRestStores.PrivateUserDataPermissionsMixin;

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ) return done( err );

    var HotStore = s.HotStore;
    var HotSchema = s.HotSchema;

    var UsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

      schema: new HotSchema({
        email       :  { type: 'string', required: true, default: "youremail@example.com", notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
        //surname     :  { type: 'string', required: true, default: "Your surname", notEmpty: true, trim: 10 },
        //name        :  { type: 'string', required: true, default: "Your name", notEmpty: true, trim: 50 },
      }),

      onlineSearchSchema: new HotSchema({
        email     : { type: 'string' },
        //surname   : { type: 'string' },
        //name      : { type: 'string' },
      }),

      handlePut: true,
      handleGet: true,

      storeName:  'usersInfo',

      publicURL: '/config/users/:userId',
      hotExpose: true,
      configStore: { userId: true },
    });
    stores.usersInfo = new UsersInfo();


    var UsersInterests = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

      schema: new HotSchema({
        name          : { type: 'string', required: true, trim: 35, searchable: true },
      }),

      onlineSearchSchema: new HotSchema({
      }),

      storeName: 'usersInterests',

      publicURL: '/config/users/:userId/interests/:id',
      hotExpose: true,
      configStore: { userId: true },

      position: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,
    });
    stores.usersInterests = new UsersInterests();


    var WorkspacesInfo = declare( [ HotStore, MultiHomePermsMixin ], {

      schema: new HotSchema({
        longName    : { type: 'string', required: true, default: "Workspace's long name", notEmpty: true, trim: 35, searchable: true },
        tag         : { type: 'string', required: true, default: "Workspace's tag line",  notEmpty: true, notEmpty: true, trim: 70, searchable: true },
        statsUse   : { type: 'id',     required: false, notEmpty: false },
      }),

      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'workspacesInfo',

      publicURL: '/config/workspacesInfo/:workspaceId',
      hotExpose: true,
      configStore: { workspaceId: true },

      handlePut: true,
      handleGet: true,
    });
    stores.workspacesInfo = new WorkspacesInfo();


    var WorkspacesUsersInfo = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

      schema: new HotSchema({
        localEmail    : { type: 'string', required: true, default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35, searchable: true },
      }),

      onlineSearchSchema: new HotSchema({
      }),

      storeName: 'workspacesUsersInfo',

      publicURL: '/config/workspaces/:workspaceId/users/:userId',
      hotExpose: true,
      configStore: { workspaceId: true, userId: true },

      handlePut: true,
      handleGet: true,

      nested: [
        {
          layer: 'workspacesContacts',
          join: { linkedUserId: 'userId' },
          type: 'multiple',
        }
      ],

    });
    stores.workspacesUsersInfo = new WorkspacesUsersInfo();


    var WorkspacesUsersActivities = declare( [ HotStore, MultiHomePermsMixin, PrivateUserDataMixin ], {

      schema: new HotSchema({
        name        : { type: 'string', notEmpty: true, trim: 50, searchable: true },
      }),
      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'workspacesUsersActivities',

      publicURL: '/config/workspaces/:workspaceId/users/:userId/activities/:id',
      hotExpose: true,
      configStore: { workspaceId: true, userId: true },

      position: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,
    });
    stores.workspacesUsersActivities = new( WorkspacesUsersActivities );

    var WorkspacesContactsCategories = declare( [ HotStore, MultiHomePermsMixin ], {

      schema: new HotSchema({
        name         : { type: 'string', notEmpty: true, trim: 50, searchable: true },
      }),

      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'workspacesContactsCategories',

      publicURL: '/config/workspaces/:workspaceId/contactsCategories/:id',
      hotExpose: true,
      configStore: { workspaceId: true },

      position: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      checkPermissionsDeletee: function checkPermissionsGetQuery( params, body, options, doc, fullDoc, cb ){
        cb( null, false );
      },

    });
    stores.workspacesContactsCategories = new WorkspacesContactsCategories();

    // Root-level store
    var StatsUses = declare( [ HotStore ], {

      schema: new HotSchema({
        name         : { type: 'string', notEmpty: true, trim: 50, searchable: true },
      }),

      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'statsUses',

      publicURL: '/statsUses/:id',
      hotExpose: true,
      configStore: { },

      position: true,

      hotGlobalBroadcast: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,
    });
    stores.statsUses = new StatsUses();


    var WorkspacesContactsIsStarred = declare( [ HotStore, MultiHomePermsMixin ],  {

      schema: new HotSchema({
        isStarred      : { type: 'boolean', required: false, searchable: true },
      }),

       onlineSearchSchema: new HotSchema({
      }),

      storeName:  'workspacesContactsIsStarred',

      publicURL: '/workspaces/:workspaceId/contacts/isStarred/:contactId',
      hotExpose: true,

      handlePut: true,
      handleGet: true,
    });
    stores.workspacesContactsIsStarred = new WorkspacesContactsIsStarred();



    var WorkspacesContacts = declare( [ HotStore, MultiHomePermsMixin ],  {

      schema: new HotSchema({
        firstName         : { type: 'string', required: false, trim: 50, searchable: true },
        middleName        : { type: 'string', required: false, trim: 50, searchable: true },
        lastName          : { type: 'string', required: false, trim: 50, searchable: true },
        dateOfBirth       : { type: 'date',   required: false, searchable: true },
        isCompany         : { type: 'boolean',required: false, searchable: true },
        contactCategory   : { type: 'id',     required: false, notEmpty: false, searchable: true },

        /* Main info */
        mainAddressId     : { type: 'id',     required: false },
        mainPhoneNumberId : { type: 'id',     required: false },
        mainEmailId       : { type: 'id',     required: false },

        /* Linked user */
        linkedUserId      : { type: 'id', required: false },

        /* Sync info */
        syncModule     : { type: 'string', required: false, trim: 10 },
        syncId         : { type: 'string', required: false, trim: 64 },
        syncDate       : { type: 'date',   required: false },


      }),


      onlineSearchSchema: new HotSchema({
        firstName      : { type: 'string' },
        middleName     : { type: 'string' },
        lastName       : { type: 'string' },
        dateOfBirth    : { type: 'date' },
        isCompany      : { type: 'boolean' },
        contactCategory: { type: 'id' },
      }),

      sortableFields: [ 'firstName', 'lastName' ],

      storeName:  'workspacesContacts',

      publicURL: '/workspaces/:workspaceId/contacts/:id',
      hotExpose: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      nested: [

        {
          layer: 'workspacesContactsEmails',
          join: { 'id' : 'mainEmailId' },
          type: 'lookup',
          parentField: 'mainEmailId',
        },

        {
          layer: 'workspacesContactsAddresses',
          join: { 'id' : 'mainAddressId' },
          type: 'lookup',
          parentField: 'mainAddressId',
        },

        {
          layer: 'workspacesContactsPhoneNumbers',
          join: { 'id' : 'mainPhoneNumberId' },
          type: 'lookup',
          parentField: 'mainPhoneNumberId',
        },

        {
          layer: 'workspacesContactsIsStarred',
          join: { 'contactId': 'id' },
          type: 'multiple',
        },


        {
          layer: 'workspacesContactsAddresses',
          join: { 'contactId': 'id' },
          type: 'multiple'
        },

        {
          layer: 'workspacesContactsEmails',
          join: { 'contactId': 'id' },
          type: 'multiple'
        },

        {
          layer: 'workspacesContactsPhoneNumbers',
          join: { 'contactId': 'id' },
          type: 'multiple'
        },



      ],
      children: true,

      afterPost: function afterPost( request, doc, fullDoc, cb ){

        var self = this;

        self.inheritedAsync( afterPost, arguments, function(){

          // Attempt to create a record in WorkspacesContactsIsStarred. This will
          // fail quietly if there are problems, as it's not 100% essential and
          // at this point the contact record has already been created
          //stores.WorkspacesContactsIsStarred.Put( doc.id, { isStarred: false, workspaceId: doc.workspaceId }, { killComet: true }, function( err, doc ){
            cb( null );
          //});

        });
      },

    });
    stores.workspacesContacts = new WorkspacesContacts();




    /* MERC
    var WorkspacesContactsUsers = declare( [ HotStore, MultiHomePermsMixin ],  {

      schema: new HotSchema({

      }),

       onlineSearchSchema: new HotSchema({
      }),

      storeName:  'workspacesContactsUser',

      publicURL: '/workspaces/:workspaceId/users/:userId',
      hotExpose: true,

      handlePut: true,
      handleGet: true,
    });
    stores.workspacesContactsIsStarred = new WorkspacesContactsIsStarred();
    */



    var UpdateFirstParentMixin = declare( null,  {

      firstParentStoreField: null,

      _setMain: function( request, cb ){

        var self = this;

        self.apiGetQuery( { ranges: { limit: 1 }, filters: { contactId: request.params.contactId } }, function( err, docs ){
          if( err ) return cb( err );

          // Get the document. If it's not set, there is no "main" email addres
          var doc = docs[ 0 ];
          if( ! doc ) return cb( null );

          // Make up the update object
          var updateObject = {};
          updateObject[ self.firstParentStoreField ] = doc.id;

          stores.workspacesContacts.dbLayer.update( { conditions: { and: [  { field: 'id', type: 'eq', value: request.params.contactId } ] } }, updateObject, function( err ){
            if( err ) return cb( err );


            stores.workspacesContacts.apiGet( request.params.contactId, function( err, contact ){
              if( err ) return cb( err );

              console.log("Contact to be broadcast:", contact);
              console.log("Contact's children:", contact._children );

              // Sends a storeRecordUpdate. Since the update is on fields that are NOT directly editable,
              // it will pass `suppressReload` as false, so that editing forms open won't grey out
              stores.workspacesContacts.broadcastStoreChanges( request, 'storeRecordUpdate', contact.id, contact, { tabId: null, suppressReload: true }, cb );
            });
          });

        });
      },

      afterPutExisting: function afterPutExisting( request, doc, fullDoc, docAfter, fullDocAfter, overwrite, done){
        var self = this;
        self.inheritedAsync( afterPutExisting, arguments, function( err ){
          if( err ) done( err );

          self._setMain( request, done );
        });
      },

      afterPost: function afterPost( request, doc, fullDoc, done ){
        var self = this;
        self.inheritedAsync( afterPost, arguments, function( err ){
          if( err ) done( err );

          self._setMain( request, done );
        });
      },

      afterPutNew: function afterPutNew( request, doc, fullDoc, overwrite, done ){
        var self = this;
        self.inheritedAsync( afterPutNew, arguments, function( err ){
          if( err ) done( err );

          self._setMain( request, done );
        });
      },

      afterDelete: function afterDelete( request, doc, fullDoc, done ){
        var self = this;
        self.inheritedAsync( afterDelete, arguments, function( err ){
          if( err ) done( err );

          self._setMain( request, done );
        });
      },

    });



    var WorkspacesContactsAddresses = declare( [ HotStore, MultiHomePermsMixin, UpdateFirstParentMixin ],  {

      firstParentStoreField: 'mainAddressId',

      schema: new HotSchema({
        label             : { type: 'string', required: false, trim: 64 },
        street            : { type: 'string', required: false, trim: 256 },
        poBox             : { type: 'string', required: false, trim: 64 },
        localArea         : { type: 'string', required: false, trim: 64 },
        city              : { type: 'string', required: false, trim: 64 },
        county            : { type: 'string', required: false, trim: 64 },
        postcode          : { type: 'string', required: false, trim: 10 },
        country           : { type: 'string', required: false, trim: 64 },
      }),

      onlineSearchSchema: new HotSchema({
        label             : { type: 'string' },
        street            : { type: 'string' },
        poBox             : { type: 'string' },
        localArea         : { type: 'string' },
        city              : { type: 'string' },
        county            : { type: 'string' },
        postcode          : { type: 'string' },
        country           : { type: 'string' },
      }),

      storeName:  'workspacesContactsAddresses',

      publicURL: '/workspaces/:workspaceId/Contacts/:contactId/addresses/:id',
      hotExpose: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,
      position: true,
    });
    stores.workspacesContactsAddresses = new WorkspacesContactsAddresses();

    var WorkspacesContactsEmails = declare( [ HotStore, MultiHomePermsMixin, UpdateFirstParentMixin ],  {


      firstParentStoreField: 'mainEmailId',

      schema: new HotSchema({
        label : { type: 'string', required: false, trim: 64 },
        email : { type: 'string', required: true, notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
      }),

      onlineSearchSchema: new HotSchema({
        label  : { type: 'string' },
        email  : { type: 'string' },
      }),

      storeName:  'workspacesContactsEmails',

      publicURL: '/workspaces/:workspaceId/contacts/:contactId/emails/:id',
      hotExpose: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      position: true,

      // Don't allow the same email address twice
      postValidate: function( request, body, method, done ){
        var self = this;

        stores.workspacesContactsEmails.apiGetQuery( { filters: { email: body.email, contactId: body.contactId } },  function( err, docs ){
          if( err ) return done( err );

          // Filter self out (only need to do it for PUT calls)
          if( method === 'put' ){
            docs = docs.filter( function(i) { return i.id.toString() != body.id.toString() } );
          }

          if( docs.length ){
            var errors = [];
            errors.push( { field: 'email', message: 'Email address already on file' } );
            done( new self.UnprocessableEntityError( { errors: errors } ) );
          } else {
            done( null );
          }
        });
      },


    });
    stores.workspacesContactsEmails = new WorkspacesContactsEmails();

    var WorkspacesContactsPhoneNumbers = declare( [ HotStore, MultiHomePermsMixin, UpdateFirstParentMixin ],  {

      firstParentStoreField: 'mainPhoneNumberId',

      schema: new HotSchema({
        label     : { type: 'string', required: false, trim: 64 },
        dialCode  : { type: 'number', required: true, notEmpty: true, trim: 4, min: 1, sharedValidator: 'countryDialCode' },
        number    : { type: 'string', required: true, notEmpty: true, trim: 20, min: 1, sharedValidator: 'phoneNumber', },
      }),

      onlineSearchSchema: new HotSchema({
        label     : { type: 'string' },
        dialCode  : { type: 'string' },
        number    : { type: 'string' },
      }),

      storeName:  'workspacesContactsPhoneNumbers',

      publicURL: '/workspaces/:workspaceId/contacts/:contactId/phoneNumbers/:id',
      hotExpose: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      position: true,
    });
    stores.workspacesContactsPhoneNumbers = new WorkspacesContactsPhoneNumbers();



    var Messages = declare( [ HotStore, MultiHomePermsMixin ],  {

      schema: new HotSchema({
        incoming          : { type: 'boolean', required: true, notEmpty: true },
        type              : { type: 'string', required: true, notEmpty: true, trim: 5 },
        fromUserId        : { type: 'id', required: false, notEmpty: true },
        fromContactId     : { type: 'id', required: false, notEmpty: true },

        subject           : { type: 'string', required: true, notEmpty: true, trim: 50 },
        body              : { type: 'string', required: true, notEmpty: true, trim: 50 },
      }),

      onlineSearchSchema: new HotSchema({
        incoming          : { type: 'boolean' },
        type              : { type: 'string' },
        fromUserId        : { type: 'id' },
        fromContactId     : { type: 'id' },

        subject           : { type: 'string' },
        body              : { type: 'string' },
      }),


      storeName:  'messages',

      publicURL: '/workspaces/:workspaceId/messages/:id',
      hotExpose: true,

      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,
    });
    stores.messages = new Messages();

    done( null, stores );
  });
}));


// Simply activate path to client files
hotplate.hotEvents.on( 'clientPath', 'bd', function( done ){
  done( null, path.join(__dirname, '../client') );
} )

// Define which paths within clientPath will need to be rendered, and with which options
hotplate.hotEvents.on( 'clientPathRender', 'bd', function( done ){
  done( null, [
    {
      'templates/BookingDojo.jade': { name: 'Tony' },
      'templates/AnotherBookingDojo.jade': {},
    }
  ] );
} )



hotplate.hotEvents.on( 'dojoModulesPerPage', 'bd', function( req, pageName, done ){

  switch( pageName ){

    case 'hotDojoAppContainer/container':
      done( null, [ 'bdMain' ] );
    break;

    default:
      done( null, [ ] );
    break;
  }

});


hotplate.hotEvents.on( 'pageElements', 'bd', function( done ){
    done( null, { titleWords: [ "Booking Dojo" ] } );
})

hotplate.hotEvents.on( 'pageElementsPerPage', 'bd', function( req, pageName, done ){

  switch(pageName){

    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        csses: ['bdMain.css' ],
        titleWords: [ "Application" ],
      });

    break;

   default:
      done( null, {} );
    break;
  }
});


"use strict";

var hotplate = require('hotplate');


hotplate.hotEvents.on( 'sharedFunctions', 'bd', hotplate.cachable( function( done ) {

  var result = {};

  result.phoneNumberValidator = function( number ){
    if( number === false ) return "Phone number invalid, only numbers and spaces allowed";
    return number.match( /^[0-9 ]+$/ );
  };


  result.dialCodeValidator = function( code ){

    var dialCodes = {
      93:'Afghanistan',
      355:'Albania',
      213:'Algeria',
      1684:'American Samoa',
      376:'Andorra',
      244:'Angola',
      1264:'Anguilla',
      1268:'Antigua and Barbuda',
      54:'Argentina',
      374:'Armenia',
      297:'Aruba',
      247:'Ascension Island',
      61:'Australia',
      43:'Austria',
      994:'Azerbaijan',
      1242:'Bahamas',
      973:'Bahrain',
      880:'Bangladesh',
      1246:'Barbados',
      375:'Belarus',
      32:'Belgium',
      501:'Belize',
      229:'Benin',
      1441:'Bermuda',
      975:'Bhutan',
      591:'Bolivia',
      599:'Bonaire - Sint Eustatius and Saba',
      387:'Bosnia and Herzegovina',
      267:'Botswana',
      55:'Brazil',
      673:'Brunei',
      359:'Bulgaria',
      226:'Burkina Faso',
      257:'Burundi',
      855:'Cambodia',
      237:'Cameroon',
      1:'Canada',
      238:'Cape Verde',
      1345:'Cayman Islands',
      236:'Central African Republic',
      235:'Chad',
      56:'Chile',
      86:'China',
      57:'Colombia',
      269:'Comoros and Mayotte',
      242:'Congo',
      243:'Congo Dem Rep',
      682:'Cook Islands',
      506:'Costa Rica',
      225:'Cote d\'Ivoire',
      385:'Croatia',
      53:'Cuba',
      599:'Curaçao',
      357:'Cyprus',
      420:'Czech Republic',
      45:'Denmark',
      246:'Diego Garcia',
      253:'Djibouti',
      1767:'Dominica',
      1809:'Dominican Republic',
      593:'Ecuador',
      20:'Egypt',
      503:'El Salvador',
      240:'Equatorial Guinea',
      291:'Eritrea',
      372:'Estonia',
      251:'Ethiopia',
      500:'Falkland Islands',
      298:'Faroe Islands',
      679:'Fiji',
      358:'Finland',
      33:'France',
      594:'French Guiana',
      689:'French Polynesia',
      241:'Gabon',
      220:'Gambia',
      995:'Georgia',
      49:'Germany',
      233:'Ghana',
      350:'Gibraltar',
      30:'Greece',
      299:'Greenland',
      1473:'Grenada',
      590:'Guadeloupe',
      1671:'Guam',
      502:'Guatemala',
      224:'Guinea',
      245:'Guinea Bissau',
      592:'Guyana',
      509:'Haiti',
      504:'Honduras',
      852:'Hong Kong',
      36:'Hungary',
      354:'Iceland',
      91:'India',
      62:'Indonesia',
      98:'Iran',
      964:'Iraq',
      353:'Ireland',
      972:'Israel',
      39:'Italy',
      1876:'Jamaica',
      81:'Japan',
      962:'Jordan',
      7:'Kazakhstan',
      254:'Kenya',
      686:'Kiribati',
      850:'Korea - North',
      82:'Korea - South',
      965:'Kuwait',
      996:'Kyrgyzstan',
      856:'Laos',
      371:'Latvia',
      961:'Lebanon',
      266:'Lesotho',
      231:'Liberia',
      218:'Libya',
      423:'Liechtenstein',
      370:'Lithuania',
      352:'Luxembourg',
      853:'Macao',
      389:'Macedonia',
      261:'Madagascar',
      265:'Malawi',
      60:'Malaysia',
      960:'Maldives',
      223:'Mali',
      356:'Malta',
      692:'Marshall Islands',
      596:'Martinique',
      222:'Mauritania',
      230:'Mauritius',
      52:'Mexico',
      691:'Micronesia',
      373:'Moldova',
      377:'Monaco',
      976:'Mongolia',
      382:'Montenegro',
      1664:'Montserrat',
      212:'Morocco',
      258:'Mozambique',
      95:'Myanmar',
      264:'Namibia',
      674:'Nauru',
      977:'Nepal',
      31:'Netherlands',
      687:'New Caledonia',
      64:'New Zealand',
      505:'Nicaragua',
      227:'Niger',
      234:'Nigeria',
      683:'Niue',
      6723:'Norfolk Island',
      1:'Northern Mariana Islands',
      47:'Norway',
      968:'Oman',
      92:'Pakistan',
      680:'Palau',
      970:'Palestine',
      507:'Panama',
      675:'Papua New Guinea',
      595:'Paraguay',
      51:'Peru',
      63:'Philippines',
      48:'Poland',
      351:'Portugal',
      1787:'Puerto Rico',
      974:'Qatar',
      262:'Reunion',
      40:'Romania',
      7:'Russia',
      250:'Rwanda',
      590:'Saint Barthélemy',
      290:'Saint Helena',
      1869:'Saint Kitts and Nevis',
      1758:'Saint Lucia',
      590:'Saint Martin',
      508:'Saint Pierre and Miquelon',
      1784:'Saint Vincent Grenadines',
      685:'Samoa',
      378:'San Marino',
      239:'Sao Tome and Principe',
      966:'Saudi Arabia',
      221:'Senegal',
      381:'Serbia',
      248:'Seychelles',
      232:'Sierra Leone',
      65:'Singapore',
      1721:'Sint Maarten',
      421:'Slovakia',
      386:'Slovenia',
      677:'Solomon Islands',
      252:'Somalia',
      27:'South Africa',
      211:'South Sudan',
      34:'Spain',
      94:'Sri Lanka',
      249:'Sudan',
      597:'Suriname',
      268:'Swaziland',
      46:'Sweden',
      41:'Switzerland',
      963:'Syria',
      886:'Taiwan',
      992:'Tajikistan',
      255:'Tanzania',
      66:'Thailand',
      670:'Timor-Leste',
      228:'Togo',
      690:'Tokelau',
      676:'Tonga',
      1868:'Trinidad and Tobago',
      216:'Tunisia',
      90:'Turkey',
      993:'Turkmenistan',
      1649:'Turks and Caicos',
      688:'Tuvalu',
      256:'Uganda',
      380:'Ukraine',
      971:'United Arab Emirates',
      44:'United Kingdom',
      1:'United States',
      598:'Uruguay',
      998:'Uzbekistan',
      678:'Vanuatu',
      379:'Vatican City',
      58:'Venezuela',
      84:'Vietnam',
      1284:'Virgin Islands - British',
      1340:'Virgin Islands - US',
      681:'Wallis and Futuna',
      967:'Yemen',
      260:'Zambia',
      263:'Zimbabwe',
    }

    if( code === false ) return "Country code invalid";
    return !! dialCodes[ code ];
  };

  result.countryDialCodes = function(){
    return {
      93:'Afghanistan',
      355:'Albania',
      213:'Algeria',
      1684:'American Samoa',
      376:'Andorra',
      244:'Angola',
      1264:'Anguilla',
      1268:'Antigua and Barbuda',
      54:'Argentina',
      374:'Armenia',
      297:'Aruba',
      247:'Ascension Island',
      61:'Australia',
      43:'Austria',
      994:'Azerbaijan',
      1242:'Bahamas',
      973:'Bahrain',
      880:'Bangladesh',
      1246:'Barbados',
      375:'Belarus',
      32:'Belgium',
      501:'Belize',
      229:'Benin',
      1441:'Bermuda',
      975:'Bhutan',
      591:'Bolivia',
      599:'Bonaire - Sint Eustatius and Saba',
      387:'Bosnia and Herzegovina',
      267:'Botswana',
      55:'Brazil',
      673:'Brunei',
      359:'Bulgaria',
      226:'Burkina Faso',
      257:'Burundi',
      855:'Cambodia',
      237:'Cameroon',
      1:'Canada',
      238:'Cape Verde',
      1345:'Cayman Islands',
      236:'Central African Republic',
      235:'Chad',
      56:'Chile',
      86:'China',
      57:'Colombia',
      269:'Comoros and Mayotte',
      242:'Congo',
      243:'Congo Dem Rep',
      682:'Cook Islands',
      506:'Costa Rica',
      225:'Cote d\'Ivoire',
      385:'Croatia',
      53:'Cuba',
      599:'Curaçao',
      357:'Cyprus',
      420:'Czech Republic',
      45:'Denmark',
      246:'Diego Garcia',
      253:'Djibouti',
      1767:'Dominica',
      1809:'Dominican Republic',
      593:'Ecuador',
      20:'Egypt',
      503:'El Salvador',
      240:'Equatorial Guinea',
      291:'Eritrea',
      372:'Estonia',
      251:'Ethiopia',
      500:'Falkland Islands',
      298:'Faroe Islands',
      679:'Fiji',
      358:'Finland',
      33:'France',
      594:'French Guiana',
      689:'French Polynesia',
      241:'Gabon',
      220:'Gambia',
      995:'Georgia',
      49:'Germany',
      233:'Ghana',
      350:'Gibraltar',
      30:'Greece',
      299:'Greenland',
      1473:'Grenada',
      590:'Guadeloupe',
      1671:'Guam',
      502:'Guatemala',
      224:'Guinea',
      245:'Guinea Bissau',
      592:'Guyana',
      509:'Haiti',
      504:'Honduras',
      852:'Hong Kong',
      36:'Hungary',
      354:'Iceland',
      91:'India',
      62:'Indonesia',
      98:'Iran',
      964:'Iraq',
      353:'Ireland',
      972:'Israel',
      39:'Italy',
      1876:'Jamaica',
      81:'Japan',
      962:'Jordan',
      7:'Kazakhstan',
      254:'Kenya',
      686:'Kiribati',
      850:'Korea - North',
      82:'Korea - South',
      965:'Kuwait',
      996:'Kyrgyzstan',
      856:'Laos',
      371:'Latvia',
      961:'Lebanon',
      266:'Lesotho',
      231:'Liberia',
      218:'Libya',
      423:'Liechtenstein',
      370:'Lithuania',
      352:'Luxembourg',
      853:'Macao',
      389:'Macedonia',
      261:'Madagascar',
      265:'Malawi',
      60:'Malaysia',
      960:'Maldives',
      223:'Mali',
      356:'Malta',
      692:'Marshall Islands',
      596:'Martinique',
      222:'Mauritania',
      230:'Mauritius',
      52:'Mexico',
      691:'Micronesia',
      373:'Moldova',
      377:'Monaco',
      976:'Mongolia',
      382:'Montenegro',
      1664:'Montserrat',
      212:'Morocco',
      258:'Mozambique',
      95:'Myanmar',
      264:'Namibia',
      674:'Nauru',
      977:'Nepal',
      31:'Netherlands',
      687:'New Caledonia',
      64:'New Zealand',
      505:'Nicaragua',
      227:'Niger',
      234:'Nigeria',
      683:'Niue',
      6723:'Norfolk Island',
      1:'Northern Mariana Islands',
      47:'Norway',
      968:'Oman',
      92:'Pakistan',
      680:'Palau',
      970:'Palestine',
      507:'Panama',
      675:'Papua New Guinea',
      595:'Paraguay',
      51:'Peru',
      63:'Philippines',
      48:'Poland',
      351:'Portugal',
      1787:'Puerto Rico',
      974:'Qatar',
      262:'Reunion',
      40:'Romania',
      7:'Russia',
      250:'Rwanda',
      590:'Saint Barthélemy',
      290:'Saint Helena',
      1869:'Saint Kitts and Nevis',
      1758:'Saint Lucia',
      590:'Saint Martin',
      508:'Saint Pierre and Miquelon',
      1784:'Saint Vincent Grenadines',
      685:'Samoa',
      378:'San Marino',
      239:'Sao Tome and Principe',
      966:'Saudi Arabia',
      221:'Senegal',
      381:'Serbia',
      248:'Seychelles',
      232:'Sierra Leone',
      65:'Singapore',
      1721:'Sint Maarten',
      421:'Slovakia',
      386:'Slovenia',
      677:'Solomon Islands',
      252:'Somalia',
      27:'South Africa',
      211:'South Sudan',
      34:'Spain',
      94:'Sri Lanka',
      249:'Sudan',
      597:'Suriname',
      268:'Swaziland',
      46:'Sweden',
      41:'Switzerland',
      963:'Syria',
      886:'Taiwan',
      992:'Tajikistan',
      255:'Tanzania',
      66:'Thailand',
      670:'Timor-Leste',
      228:'Togo',
      690:'Tokelau',
      676:'Tonga',
      1868:'Trinidad and Tobago',
      216:'Tunisia',
      90:'Turkey',
      993:'Turkmenistan',
      1649:'Turks and Caicos',
      688:'Tuvalu',
      256:'Uganda',
      380:'Ukraine',
      971:'United Arab Emirates',
      44:'United Kingdom',
      1:'United States',
      598:'Uruguay',
      998:'Uzbekistan',
      678:'Vanuatu',
      379:'Vatican City',
      58:'Venezuela',
      84:'Vietnam',
      1284:'Virgin Islands - British',
      1340:'Virgin Islands - US',
      681:'Wallis and Futuna',
      967:'Yemen',
      260:'Zambia',
      263:'Zimbabwe',
    }
  };
  done( null, result );
}));


/*
        prepareBeforeSend: function( request, doc, cb ){

          doc._ref = {};


          // Step #1:
          // Get the isStarred extra _ref
          stores.workspacesContactsIsStarred.apiGet( doc.id, function( err, starred ){

            if( err && err.httpError == '404' ) err = null; // Make 404 acceptable
            if( err ) return cb( err );

            doc._ref.isStarred = starred && starred.isStarred;

            return cb( null, doc );

            // Step #2:
            // Get the first address
            stores.WorkspacesContactsAddresses.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, addresses ){
              if( err ) return cb( err );

              if( addresses.length > 0 ){
                doc._ref.address = addresses[ 0 ];
                doc._ref.addressesTotal = addresses.length;
              }

              // Step #3:
              // Get the first email address
              stores.WorkspacesContactsEmails.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, emails ){
                if( err ) return cb( err );

                if( emails.length > 0 ){
                  doc._ref.email = emails[ 0 ];
                  doc._ref.emailsTotal = emails.length;
                }

                // Step #3:
                // Get the first phone number
                stores.WorkspacesContactsPhoneNumbers.GetQuery( { filters: { workspaceId: doc.workspaceId, contactId: doc.id  } }, function( err, phoneNumbers ){
                  if( err ) return cb( err );

                  if( phoneNumbers.length > 0 ){
                    doc._ref.phoneNumber = phoneNumbers[ 0 ];
                    doc._ref.phoneNumbersTotal = phoneNumbers.length;
                  }
                  cb( null, doc );
                });
              });

            });

          });
        },
*/
