var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, Store = require('jsonreststores')
, MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

, Schema = require('simpleschema')
, MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, db = hotplate.get('db')

, ObjectId = mongoWrapper.ObjectId
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hooks.init = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule('hotCoreJsonRestStores');

  // Mixin the extra hotplate-specific and driver-specific attributes  to
  // the generic Store/Schema
  var HotStore = declare( [ Store, MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  var HotSchema = declare( [ Schema, MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );

  var Categories = exports.Categories = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      workspaceId: { type: 'id' },
      _id     : { type: 'string', required: true, searchable: true },
      name    : { type: 'string', notEmpty: true, trim: 50 },
    }),

    // COMMON
    searchSchema: new HotSchema({
      workspaceId: { type: 'id' },
      _id        : { type: 'string', required: true },
      name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'categories',
    paramIds: [ 'workspaceId', '_id' ],
      
    publicURL: '/call/:workspaceId/categories/',

    // queryFilterType: '$or',
  });
  // Categories.onlineAll( app, '/call/:workspaceId/categories/', ':_id' );


  console.log("TESTING THE APPPPPPPPPPPPPPPPPPIIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
  //Categories.Post( { workspaceId: ObjectId() }, { name: "AHooooooooooAHAHAH" }, function( res, err ){
  //Categories.Post( { workspaceId: ObjectId() }, { name: "RAHooooooooooAHAHAH" }, function( res, err ){
  Categories.Post( { workspaceId: ObjectId(),  name: "RAHooooooooooAHAHAH4" }, function( res, err ){
    console.log("AAAAAAAAAAAHHHHHHHHHHHHHHH!");
    console.log( res );
    console.log( err );
  });

  /* ****************************************************************** */
  /* ****************************************************************** */
  /* ****************************************************************** */

  var UserConfigBase = declare( HotStore, {

    // COMMON
    schema: new HotSchema({
      _id        : { type: 'id' },

      userId    :  { type: 'id' },
      email      : { type: 'string', default: "youremail@example.com", required: true, notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
      surname    : { type: 'string', default: "Your surname", required: true, notEmpty: true, trim: 10 },
      name       : { type: 'string', default: "Your name", required: true, notEmpty: true, trim: 50 },
    },

    {
      validate: function( schema, errors, cb ){
        if( this.name == 'Tony' ){
          // cb( new Error("NO, TONY NO!" ) );
          errors.push( { field: 'name', message: 'NO! TONY NO!' } );
          cb( null );
        } else {
          cb( null );
        }
      },

    } ),

    // COMMON
    searchSchema: new HotSchema({
      _id        : { type: 'id' },

      userId    : { type: 'id' },
      email      : { type: 'string', trim: 70, min: 4 },
      surname    : { type: 'string' },
      name       : { type: 'string' },
    }),

    paramIds :  [ '_id' ],
    collectionName: 'userConfig',

  });

  var UserConfig = exports.UserConfig = declare( UserConfigBase, {

    handlePut: true,
    handleGet: true,

    storeName:  'userConfig',
    paramIds :  ['_id'],
    //paramIds:  [ 'workspaceId', '_id' ],
    //ignoreIds: [ 'workspaceId' ],

    // Permissions for the get
    checkPermissionsGet: function( params, body, options, doc, fullDoc, cb ) {
      // cb( null, req.application.workspace.access.filter( function(o){ return o._id.toString() === doc._id.toString(); } ).length  );
      cb( null, true  );
    },
  
    // Permissions to save data
    checkPermissionsPutExisting: function( params, body, options, doc, fullDoc, cb ) {
      // TODO: implement this
      cb( null, true );
    },

    // Nobody cannnot create new records -- they need to exist beforehand
    checkPermissionsPutNew: function( params, body, options, cb){
      cb( null, false ); 
    },

    publicURL: '/call/userConfig/',
    configStore: { userId: true },

  });

  // UserConfig.onlineAll( app, '/call/userConfig/', ':_id' );
  

  /*
  var UserConfigNoWorkspace = declare( UserConfigBase, {

    paramIds: [ '_id' ],

    // Redefine the permission calls 
    checkPermissionsGet: function(  params, body, options, doc, fullDoc, cb ){
      // cb( null,  req.session.userId.toString() == req.params._id );
      cb( null, true );
    },
    checkPermissionsPutExisting: function( req, doc, fullDoc, cb ) {
      // cb( null, req.session.userId.toString() == doc._id.toString() );
      cb( null, true );
    },

    storeName:  'userConfigNoWorkspace',

    killComet: true,
  });

  UserConfigNoWorkspace.onlineAll( app, '/call/userConfigNoWorkspace/', ':_id', UserConfigNoWorkspace );
  */  


  var WorkspaceConfig = exports.WorkspaceConfig = declare( HotStore, {

    schema: new HotSchema({
      _id : { type: 'id' },

      workspaceId: { type: 'id' },
      longName: { type: 'string', default: "Workspace's long name", required: true, notEmpty: true, trim: 35 },
      tag     : { type: 'string', default: "Workspace's tag line", required: true, notEmpty: true, notEmpty: true, trim: 70 },
    }),

    searchSchema: new HotSchema({
      _id : { type: 'id' },

      workspaceId: { type: 'id' },
      longName: { type: 'string' },
      tag     : { type: 'string' },
    }),


    storeName:  'workspaceConfig',
    paramIds: [ '_id' ],

    handlePut: true,
    handleGet: true,

    checkPermissionsGet: function(  params, body, options, doc, fullDoc, cb ){
      cb( null, true );
    },

    checkPermissionsPutExisting: function( params, body, options, doc, fullDoc, cb ) {
      cb( null, true );
    },

    // Nobody cannnot create new records -- they need to exist beforehand
    checkPermissionsPutNew: function( params, body, options, cb){
      cb( null, false );
    },
    
    publicURL: '/call/workspaceConfig/',
    configStore: { workspaceId: true },

  });

  // WorkspaceConfig.onlineAll( app, '/call/workspaceConfig/', ':_id' );

  

  var AccessConfig = exports.AccessConfig = declare( HotStore, {

    // COMMON

    schema: new HotSchema({
      _id        : { type: 'id' },
      workspaceId   : { type: 'id' },
      userId   : { type: 'id' },

      localEmail : { type: 'string', default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35 },
    }),

    searchSchema: new HotSchema({
      _id           : { type: 'id' },
      workspaceId   : { type: 'id' },
      userId        : { type: 'id' },

      localEmail : { type: 'string'},
    }),

 
    storeName: 'accessConfig',
    paramIds: [ 'workspaceId', '_id' ],

    handlePut: true,
    handleGet: true,

    // checkPermissionsGet:function( req, doc, fullDoc, cb ) {
    //   cb( null, true );
    // },

    // checkPermissionsPutExisting:function( req, doc, fullDoc, cb ) {
    //   cb( null, req.application.user._id.toString() == doc._id.toString() );
    // },

    publicURL: '/call/:workspaceId/accessConfig/',
    configStore: { workspaceId: true, userId: true },

  } );

  // AccessConfig.onlineAll( app, '/call/:workspaceId/accessConfig/', ':_id' );


  done( null );
}

hooks.init.after = [ 'hotCoreJsonRestStores' ];


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){


  switch(pageName){


    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        moduleName: 'bd', result: {
          jses:  ['bdMain.js', 'jade.js' ],
          csses: ['bdMain.css' ],
        }
      });

    break;

   default:
      done( null, { moduleName: 'bd', result: {} }  );
    break;
  }
}


hooks.stores = function( done ){

  done( null,  {
    moduleName: 'bd', result: [ exports.Categories, exports.UserConfig, exports.WorkspaceConfig, exports.AccessConfig ]
  });


/*
  done( null, { 
    accessConfig         : { target: '/call/:workspaceId/accessConfig/',    idProperty: '_id', sortParam: 'sortBy', },
    workspaceConfig      : { target: '/call/workspaceConfig/', idProperty: '_id', sortParam: 'sortBy', },
    userConfig           : { target: '/call/userConfig/',      idProperty: '_id', sortParam: 'sortBy', },
    categories           : { target: '/call/:workspaceId/categories/',      idProperty: '_id', sortParam: 'sortBy', },
    // options              : { target: '/call/:workspaceId/Options/',         idProperty: '_id', sortParam: 'sortBy', },
  });
*/

}

/*
hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}
*/


