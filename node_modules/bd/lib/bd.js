var 
  dummy

, hotplate =  require('hotplate')
, path = require('path')

, declare = require( 'simpledeclare' )

, Store = require('jsonreststores')
, MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

, Schema = require('simpleschema')
, MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

, async = require('async')
, util = require('util')


, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hotplate.hotEvents.on('stores', 'bd', hotplate.cachable( function( done ){

  var stores = {};

  hotCoreJsonRestStores.getJsonRestStoresMixins( function( err, mixins ){
    if( err ){
      done( err );
    } else {


      // Mixin the extra hotplate-specific and driver-specific attributes  to
      // the generic Store/Schema
      var HotStore = declare( [ Store, MongoDriverMixin, mixins.StoreMixin ] );
      var HotSchema = declare( [ Schema, MongoSchemaMixin, mixins.SchemaMixin ] );
    
      stores.WorkspaceCategories = declare( HotStore, {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          _id          : { type: 'id', required: true, searchable: true },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          _id        : { type: 'id' },
          workspaceId: { type: 'id' },
          name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'workspaceCategories',
        paramIds: [ 'workspaceId', '_id' ],
          
        publicURL: '/config/workspace/:workspaceId/categories/',
        configStore: { workspaceId: true },
    
        // queryFilterType: '$or',
      });
    
      stores.UserCategories = declare( HotStore, {
    
        // COMMON
        schema: new HotSchema({
          userId       : { type: 'id' },
          _id          : { type: 'id', required: true, searchable: true },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          _id        : { type: 'id' },
          userId     : { type: 'id' },
          name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'userCategories',
        paramIds: [ 'userId', '_id' ],
          
        publicURL: '/config/user/:userId/categories/',
        configStore: { userId: true },
    
        // queryFilterType: '$or',
      });
    
      stores.WorkspaceUserCategories = declare( HotStore, {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          userId       : { type: 'id' },
          _id          : { type: 'id', required: true, searchable: true },
    
          name         : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          _id        : { type: 'id' },
          userId     : { type: 'id' },
          workspaceId: { type: 'id' },
          name       : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'workspaceUserCategories',
        paramIds: [ 'workspaceId', 'userId', '_id' ],
          
        publicURL: '/config/workspace/:workspaceId/user/:userId/categories/',
        configStore: { userId: true, workspaceId: true },
    
        // queryFilterType: '$or',
      });
    
    
    
      /* ****************************************************************** */
      /* ****************************************************************** */
      /* ****************************************************************** */
    
      stores.UserConfig = declare( HotStore, {
    
        // COMMON
        schema: new HotSchema({
          userId      :  { type: 'id', required: true },
          email       :  { type: 'string', default: "youremail@example.com", required: true, notEmpty: true, sharedValidator: 'email', trim: 70, min: 4 },
          userCategory:  { type: 'id', required: true },
          surname     :  { type: 'string', default: "Your surname", required: true, notEmpty: true, trim: 10 },
          name        :  { type: 'string', default: "Your name", required: true, notEmpty: true, trim: 50 },
        },
    
        {
          validator: function( schema, errors, cb ){
            if( this.name == 'Tony' ){
              // cb( new Error("NO, TONY NO!" ) );
              errors.push( { field: 'name', message: 'NO! TONY NO!' } );
              cb( null );
            } else {
              cb( null );
            }
          },
    
        } ),
    
        // COMMON
        searchSchema: new HotSchema({
          userId    : { type: 'id' },
    
          email     : { type: 'string', trim: 70, min: 4 },
          surname   : { type: 'string' },
          name      : { type: 'string' },
        }),
    
        paramIds :  [ 'userId' ],
    
        handlePut: true,
        handleGet: true,
    
        storeName:  'userConfig',
    
        publicURL: '/config/user/',
        configStore: { userId: true },
    
      });
    
    
      stores.WorkspaceConfig = declare( HotStore, {
    
        schema: new HotSchema({
          workspaceId : { type: 'id' },
          longName    : { type: 'string', default: "Workspace's long name", required: true, notEmpty: true, trim: 35 },
          tag         : { type: 'string', default: "Workspace's tag line", required: true, notEmpty: true, notEmpty: true, trim: 70 },
        }),
    
        searchSchema: new HotSchema({
          workspaceId : { type: 'id' },
          longName    : { type: 'string' },
          tag         : { type: 'string' },
        }),
    
        storeName:  'workspaceConfig',
        paramIds: [ 'workspaceId' ],
    
        handlePut: true,
        handleGet: true,
    
        publicURL: '/config/workspace/',
        configStore: { workspaceId: true },
    
    
        checkPermissionsGet: function(  params, body, options, doc, fullDoc, cb ){
          cb( null, true );
        },
    
        checkPermissionsPutExisting: function( params, body, options, doc, fullDoc, cb ) {
          
          if( ! this._req.session.loggedIn ){
            cb( null, false );
          } else {
            cb( null, true );
          }
    
        },
    
        // Nobody can create new records -- they need to exist beforehand
        checkPermissionsPutNew: function( params, body, options, cb){
          cb( null, false );
        },
        
      });
    
    
      stores.WorkspaceUserConfig = declare( HotStore, {
    
        // COMMON
    
        schema: new HotSchema({
          workspaceId   : { type: 'id' },
          userId        : { type: 'id' },
          localEmail    : { type: 'string', default: 'youremail@example.com', notEmpty: true, sharedValidator: 'email', trim: 35 },
        }),
    
        searchSchema: new HotSchema({
          workspaceId   : { type: 'id' },
          userId        : { type: 'id' },
    
          localEmail : { type: 'string'},
        }),
    
        storeName: 'workspaceUserConfig',
        paramIds: [ 'workspaceId', 'userId' ],
    
        handlePut: true,
        handleGet: true,
    
        publicURL: '/config/workspace/:workspaceId/user/',
        configStore: { workspaceId: true, userId: true },
    
      } );
    
      stores.NonConfig = declare( HotStore, {
    
        // COMMON
        schema: new HotSchema({
          workspaceId  : { type: 'id' },
          userId       : { type: 'id' },
          _id          : { type: 'id', required: true, searchable: true },
    
          nonConfig    : { type: 'string', notEmpty: true, trim: 50 },
        }),
    
        // COMMON
        searchSchema: new HotSchema({
          _id        : { type: 'id' },
          userId     : { type: 'id' },
          workspaceId: { type: 'id' },
          nonConfig  : { type: 'string', searchPartial: true, sortable: true, notEmpty: true, trim: 50 },
        }),
    
        handlePut: true,
        handlePost: true,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: true,
    
        storeName:  'nonConfig',
        paramIds: [ 'workspaceId', 'userId', '_id' ],
          
        publicURL: '/nonConfig/workspace/:workspaceId/user/:userId/nonConfig/',
    
        // queryFilterType: '$or',
      });
    }
  }); 
    
  done( null, [ stores.WorkspaceCategories, stores.UserCategories, stores.WorkspaceUserCategories, stores.UserConfig, stores.WorkspaceConfig, stores.WorkspaceUserConfig, stores.NonConfig ] );

} ))



// Simply activate path to client files
hotplate.hotEvents.on( 'clientPaths', 'bd', function( done ){
  done( null, [ path.join(__dirname, '../client') ] );
} )


hotplate.hotEvents.on( 'pageElementsPerPage', 'bd', function( elements, req, pageName, done ){

  switch(pageName){

    case 'hotDojoAppContainer/container':

      // Sending the page out
      done( null, {
        jses:  ['bdMain.js', 'jade.js' ],
        csses: ['bdMain.css' ],
      });

    break;

   default:
      done( null, {} );
    break;
  }
});


hooks.stores = hotplate.cachable( function( done ){

  getStores( function( err, stores ){
    if( err ){
      done( err );
    } else {

      done( null,  {
        moduleName: 'bd', result: [ stores.WorkspaceCategories, stores.UserCategories, stores.WorkspaceUserCategories, stores.UserConfig, stores.WorkspaceConfig, stores.WorkspaceUserConfig, stores.NonConfig ]
      });

    }
  })

});

/*
hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}
*/


