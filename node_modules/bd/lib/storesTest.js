
/*
* Rest store ("straight", no cache)
 * Case SNUe: natural collection, unfiltered, put with defaultNewToStart=false
 * Case SNUs: natural collection, unfiltered, put with defaultNewToStart=true
 * Case SOU: ordered collection, unfiltered (Refresh)
 * Case SOF: ordered collection, filtered (Refresh)
 * Case SNFe: natural collection, filtered, put with defaultNewToStart=false (Refresh)
 * Case SNFs: natural collection, filtered, put with defaultNewToStart=true (Refresh)

* Rest store (cached)
 * Case CNUe: natural collection, unfiltered, put with defaultNewToStart=false
 * Case CNUs: natural collection, unfiltered, put with defaultNewToStart=true
 * Case COU: ordered collection, unfiltered (QueryEngine)
 * Case COF: ordered collection, filtered (QueryEngine)
 * Case CNFe: natural collection, filtered, put with defaultNewToStart=false (QueryEngine)
 * Case CNFs: natural collection, filtered, put with defaultNewToStart=true (QueryEngine)
*/

var
  dummy

, hotplate =  require('hotplate')
, declare = require( 'simpledeclare' )
, async = require('async')
, debug = require('debug')('bd')

, emailaddresses = require( 'email-addresses')

, hotCoreJsonRestStores = hotplate.require('hotCoreJsonRestStores')
, hotCoreStoreRegistry = hotplate.require( 'hotCoreStoreRegistry' )
, hotCoreServerLogger = hotplate.require( 'hotCoreServerLogger' )
, logger = hotCoreServerLogger
;


hotplate.hotEvents.on( 'stores', 'bd', hotplate.cachable( function( done ){

  var stores = {};

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ) return done( err );

    var HotStore = s.HotStore;
    var HotSchema = s.HotSchema;
    var BasicDbStore = s.BasicDbStore;
    var BasicSchema = s.BasicSchema;


    // * Case SNUe: natural collection, unfiltered, put with defaultNewToStart=false
    var SNUe = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10 },
      }),

      storeName:  'snue',
      publicURL: '/testStores/snue/:id',
      position: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.snue = new SNUe();

    // * Case SNUs: natural collection, unfiltered, put with defaultNewToStart=true
    var SNUs = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10 },
      }),

      storeName:  'snus',
      publicURL: '/testStores/snus/:id',
      position: true,
      defaultNewToStart: true,
      
      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.snus = new SNUs();

    // * Case SOU: ordered collection, unfiltered (Refresh)
    var SOU = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'sou',
      publicURL: '/testStores/sou/:id',
      position: false,
      sortableFields: [ 'name' ],

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.sou = new SOU();

    //* Case SOF: ordered collection, filtered (Refresh)
    var SOF = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'sof',
      publicURL: '/testStores/sof/:id',
      position: false,
      sortableFields: [ 'name' ],

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.sof = new SOF();

    // * Case SNFe: natural collection, filtered, put with defaultNewToStart=false (Refresh)
    var SNFe = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'snfe',
      publicURL: '/testStores/snfe/:id',
      position: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.snfe = new SNFe();

    // * Case SNFs: natural collection, filtered, put with defaultNewToStart=true (Refresh)
    var SNFs = declare( [ HotStore ],  {

      type: 'uncached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'snfs',
      publicURL: '/testStores/snfs/:id',
      position: true,
      defaultNewToStart: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.snfs = new SNFs();


    // * Case CNUe: natural collection, unfiltered, put with defaultNewToStart=false
    var CNUe = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10 },
      }),

      storeName:  'cnue',
      publicURL: '/testStores/cnue/:id',
      position: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cnue = new CNUe();

    // * Case CNUs: natural collection, unfiltered, put with defaultNewToStart=true
    var CNUs = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10 },
      }),

      storeName:  'cnus',
      publicURL: '/testStores/cnus/:id',
      position: true,
      defaultNewToStart: true,
      
      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cnus = new CNUs();

    // * Case COU: ordered collection, unfiltered (QueryEngine)
    var COU = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'cou',
      publicURL: '/testStores/cou/:id',
      position: false,
      sortableFields: [ 'name' ],

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cou = new COU();

    //* Case COF: ordered collection, filtered (QueryEngine)
    var COF = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'cof',
      publicURL: '/testStores/cof/:id',
      position: false,
      sortableFields: [ 'name' ],

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cof = new COF();

    // * Case CNFe: natural collection, filtered, put with defaultNewToStart=false (QueryEngine)
    var CNFe = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'cnfe',
      publicURL: '/testStores/cnfe/:id',
      position: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cnfe = new CNFe();

    // * Case CNFs: natural collection, filtered, put with defaultNewToStart=true (QueryEngine)
    var CNFs = declare( [ HotStore ],  {

      type: 'cached',

      schema: new HotSchema({
        name: { type: 'string', required: true, notEmpty: true, trim: 10, searchable: true },
      }),

      storeName:  'cnfs',
      publicURL: '/testStores/cnfs/:id',
      position: true,
      defaultNewToStart: true,

      // All enabled by default
      handlePut: true,
      handlePost: true,
      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Exposed through hotplate
      hotExpose: true,

    });
    stores.cnfs = new CNFs();


    done( null, stores );
  });

}));

